
mannequin_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000935c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009624  08009624  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009624  08009624  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800962c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  0800969c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0800969c  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd6c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f32  00000000  00000000  0002ce05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018230  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d190  00000000  00000000  00048400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008814e  00000000  00000000  00055590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd6de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000dd730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08009454 	.word	0x08009454

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08009454 	.word	0x08009454

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpun>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__aeabi_fcmpun+0x14>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d108      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d102      	bne.n	80010a0 <__aeabi_fcmpun+0x20>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d102      	bne.n	80010a6 <__aeabi_fcmpun+0x26>
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0001 	mov.w	r0, #1
 80010aa:	4770      	bx	lr

080010ac <__aeabi_f2uiz>:
 80010ac:	0042      	lsls	r2, r0, #1
 80010ae:	d20e      	bcs.n	80010ce <__aeabi_f2uiz+0x22>
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30b      	bcc.n	80010ce <__aeabi_f2uiz+0x22>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d409      	bmi.n	80010d4 <__aeabi_f2uiz+0x28>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2uiz+0x32>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d102      	bne.n	80010e4 <__aeabi_f2uiz+0x38>
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	4770      	bx	lr
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <writeByte>:
float aRes, gRes, mRes;      // scale resolutions per LSB for the sensors

float SelfTest[6];

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	460b      	mov	r3, r1
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	4613      	mov	r3, r2
 80010fc:	717b      	strb	r3, [r7, #5]
   uint8_t data_write[3];
   data_write[0] = subAddress;
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	733b      	strb	r3, [r7, #12]
   data_write[1] = data;
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	737b      	strb	r3, [r7, #13]

#if I2C_dev
	HAL_I2C_Master_Transmit(&Trans, address<<1, (uint8_t *) data_write, 2, 100);
#else

	HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2140      	movs	r1, #64	; 0x40
 800110a:	480f      	ldr	r0, [pc, #60]	; (8001148 <writeByte+0x5c>)
 800110c:	f004 f948 	bl	80053a0 <HAL_GPIO_WritePin>

	data_write[0] = subAddress;
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	733b      	strb	r3, [r7, #12]
    data_write[1] = data;
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	737b      	strb	r3, [r7, #13]
 	while(HAL_SPI_TransmitReceive(&Trans,(uint8_t*) data_write,(uint8_t*) data_write,2,0x1000)!=HAL_OK);
 8001118:	bf00      	nop
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	f107 010c 	add.w	r1, r7, #12
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <writeByte+0x60>)
 800112c:	f005 f83f 	bl	80061ae <HAL_SPI_TransmitReceive>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f1      	bne.n	800111a <writeByte+0x2e>

	HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <writeByte+0x5c>)
 800113c:	f004 f930 	bl	80053a0 <HAL_GPIO_WritePin>

#endif

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010c00 	.word	0x40010c00
 800114c:	20000120 	.word	0x20000120

08001150 <readByte>:

char readByte(uint8_t address, uint8_t subAddress)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
    uint8_t data_write[2];
#if I2C_dev
	HAL_I2C_Mem_Read(&Trans,address<<1,subAddress,1,data,1,100);
    return data[0];
#else
	data_write[0] = address;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	723b      	strb	r3, [r7, #8]
    data_write[1] = subAddress;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	727b      	strb	r3, [r7, #9]

	if(address == MPU9250_ADDRESS){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b68      	cmp	r3, #104	; 0x68
 800116c:	d120      	bne.n	80011b0 <readByte+0x60>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <readByte+0xc8>)
 8001174:	f004 f914 	bl	80053a0 <HAL_GPIO_WritePin>
	   	data_write[0] = subAddress | READWRITE_CMD;
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	723b      	strb	r3, [r7, #8]
	   //	while(HAL_SPI_Transmit(&Trans, data_write, 1, HAL_MAX_DELAY)!=HAL_OK);
	   	HAL_SPI_Transmit(&Trans, data_write, 1, HAL_MAX_DELAY);
 8001182:	f107 0108 	add.w	r1, r7, #8
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	2201      	movs	r2, #1
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <readByte+0xcc>)
 800118e:	f004 fdb3 	bl	8005cf8 <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&Trans,data,1,0xFFFF);
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	2201      	movs	r2, #1
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <readByte+0xcc>)
 800119e:	f004 feee 	bl	8005f7e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	481c      	ldr	r0, [pc, #112]	; (8001218 <readByte+0xc8>)
 80011a8:	f004 f8fa 	bl	80053a0 <HAL_GPIO_WritePin>
	    return data[0];
 80011ac:	7b3b      	ldrb	r3, [r7, #12]
 80011ae:	e02f      	b.n	8001210 <readByte+0xc0>
	}
	else
	{
		// set slave 0 to the AK8963 and set for read
		writeByte(AK8963_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | READWRITE_CMD);
 80011b0:	228c      	movs	r2, #140	; 0x8c
 80011b2:	2125      	movs	r1, #37	; 0x25
 80011b4:	200c      	movs	r0, #12
 80011b6:	f7ff ff99 	bl	80010ec <writeByte>

		// set the register to the desired AK8963 sub address
		writeByte(AK8963_ADDRESS, I2C_SLV0_REG, subAddress);
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	461a      	mov	r2, r3
 80011be:	2126      	movs	r1, #38	; 0x26
 80011c0:	200c      	movs	r0, #12
 80011c2:	f7ff ff93 	bl	80010ec <writeByte>

		// enable I2C and request the bytes
		writeByte(AK8963_ADDRESS, I2C_SLV0_CTRL, I2C_SLV0_EN | 1);
 80011c6:	2281      	movs	r2, #129	; 0x81
 80011c8:	2127      	movs	r1, #39	; 0x27
 80011ca:	200c      	movs	r0, #12
 80011cc:	f7ff ff8e 	bl	80010ec <writeByte>

		// takes some time for these registers to fill
		HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f003 f8f3 	bl	80043bc <HAL_Delay>

		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <readByte+0xc8>)
 80011dc:	f004 f8e0 	bl	80053a0 <HAL_GPIO_WritePin>
	   	data_write[0] = EXT_SENS_DATA_00 | READWRITE_CMD;
 80011e0:	23c9      	movs	r3, #201	; 0xc9
 80011e2:	723b      	strb	r3, [r7, #8]
		HAL_SPI_Transmit(&Trans,(uint8_t*) data_write,1,HAL_MAX_DELAY);
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	2201      	movs	r2, #1
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <readByte+0xcc>)
 80011f0:	f004 fd82 	bl	8005cf8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Trans, data, 1, HAL_MAX_DELAY);
 80011f4:	f107 010c 	add.w	r1, r7, #12
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	2201      	movs	r2, #1
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <readByte+0xcc>)
 8001200:	f004 febd 	bl	8005f7e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <readByte+0xc8>)
 800120a:	f004 f8c9 	bl	80053a0 <HAL_GPIO_WritePin>
	    return data[0];
 800120e:	7b3b      	ldrb	r3, [r7, #12]
	}
#endif

}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010c00 	.word	0x40010c00
 800121c:	20000120 	.word	0x20000120

08001220 <readBytes>:

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	460b      	mov	r3, r1
 800122e:	71bb      	strb	r3, [r7, #6]
 8001230:	4613      	mov	r3, r2
 8001232:	717b      	strb	r3, [r7, #5]

#if I2C_dev
    HAL_I2C_Mem_Read(&Trans,address<<1,subAddress,1,dest,count,100);
#else

	if(address == MPU9250_ADDRESS){
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b68      	cmp	r3, #104	; 0x68
 8001238:	d11f      	bne.n	800127a <readBytes+0x5a>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	482a      	ldr	r0, [pc, #168]	; (80012e8 <readBytes+0xc8>)
 8001240:	f004 f8ae 	bl	80053a0 <HAL_GPIO_WritePin>
	   	data_write[0] = subAddress | READWRITE_CMD;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124a:	b2db      	uxtb	r3, r3
 800124c:	723b      	strb	r3, [r7, #8]
	   	//while(HAL_SPI_Transmit(&Trans, data_write, 1, HAL_MAX_DELAY)!=HAL_OK);
	   	HAL_SPI_Transmit(&Trans, data_write, 1, HAL_MAX_DELAY);
 800124e:	f107 0108 	add.w	r1, r7, #8
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	2201      	movs	r2, #1
 8001258:	4824      	ldr	r0, [pc, #144]	; (80012ec <readBytes+0xcc>)
 800125a:	f004 fd4d 	bl	8005cf8 <HAL_SPI_Transmit>
	    HAL_SPI_Receive(&Trans,dest,count,0xFFFF);
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	b29a      	uxth	r2, r3
 8001262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <readBytes+0xcc>)
 800126a:	f004 fe88 	bl	8005f7e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <readBytes+0xc8>)
 8001274:	f004 f894 	bl	80053a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
	}

#endif

}
 8001278:	e032      	b.n	80012e0 <readBytes+0xc0>
		writeByte(AK8963_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | READWRITE_CMD);
 800127a:	228c      	movs	r2, #140	; 0x8c
 800127c:	2125      	movs	r1, #37	; 0x25
 800127e:	200c      	movs	r0, #12
 8001280:	f7ff ff34 	bl	80010ec <writeByte>
		writeByte(AK8963_ADDRESS, I2C_SLV0_REG, subAddress);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	461a      	mov	r2, r3
 8001288:	2126      	movs	r1, #38	; 0x26
 800128a:	200c      	movs	r0, #12
 800128c:	f7ff ff2e 	bl	80010ec <writeByte>
		writeByte(AK8963_ADDRESS, I2C_SLV0_CTRL, I2C_SLV0_EN | count);
 8001290:	797b      	ldrb	r3, [r7, #5]
 8001292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2127      	movs	r1, #39	; 0x27
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff25 	bl	80010ec <writeByte>
		HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f003 f88a 	bl	80043bc <HAL_Delay>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <readBytes+0xc8>)
 80012ae:	f004 f877 	bl	80053a0 <HAL_GPIO_WritePin>
	   	data_write[0] = EXT_SENS_DATA_00 | READWRITE_CMD;
 80012b2:	23c9      	movs	r3, #201	; 0xc9
 80012b4:	723b      	strb	r3, [r7, #8]
		HAL_SPI_Transmit(&Trans,(uint8_t*) data_write,1,HAL_MAX_DELAY);
 80012b6:	f107 0108 	add.w	r1, r7, #8
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	2201      	movs	r2, #1
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <readBytes+0xcc>)
 80012c2:	f004 fd19 	bl	8005cf8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&Trans, dest, count, HAL_MAX_DELAY);
 80012c6:	797b      	ldrb	r3, [r7, #5]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <readBytes+0xcc>)
 80012d2:	f004 fe54 	bl	8005f7e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <readBytes+0xc8>)
 80012dc:	f004 f860 	bl	80053a0 <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	20000120 	.word	0x20000120

080012f0 <getMres>:


void getMres() {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
    // 14 bit resolution (0) and 16 bit resolution (1)
    case MFS_14BITS:
          mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
          break;
    case MFS_16BITS:
          mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <getMres+0x14>)
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <getMres+0x18>)
 80012f8:	601a      	str	r2, [r3, #0]
          break;
 80012fa:	bf00      	nop
  }
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	200000dc 	.word	0x200000dc
 8001308:	3fbfebff 	.word	0x3fbfebff

0800130c <getGres>:


void getGres() {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0f/32768.0f;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <getGres+0x14>)
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <getGres+0x18>)
 8001314:	601a      	str	r2, [r3, #0]
          break;
 8001316:	bf00      	nop
          break;
    case GFS_2000DPS:
          gRes = 2000.0f/32768.0f;
          break;
  }
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	200000d8 	.word	0x200000d8
 8001324:	3bfa0000 	.word	0x3bfa0000

08001328 <getAres>:


void getAres() {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
          break;
    case AFS_8G:
          aRes = 8.0f/32768.0f;
          break;
    case AFS_16G:
          aRes = 16.0f/32768.0f;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <getAres+0x18>)
 800132e:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001332:	601a      	str	r2, [r3, #0]
          break;
 8001334:	bf00      	nop
  }
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200000d4 	.word	0x200000d4

08001344 <readAccelData>:
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
}

void readAccelData(int16_t * destination)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here
  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	2206      	movs	r2, #6
 8001352:	213b      	movs	r1, #59	; 0x3b
 8001354:	2068      	movs	r0, #104	; 0x68
 8001356:	f7ff ff63 	bl	8001220 <readBytes>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800135a:	7a3b      	ldrb	r3, [r7, #8]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7a7b      	ldrb	r3, [r7, #9]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800136c:	7abb      	ldrb	r3, [r7, #10]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b219      	sxth	r1, r3
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3302      	adds	r3, #2
 800137a:	430a      	orrs	r2, r1
 800137c:	b212      	sxth	r2, r2
 800137e:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b219      	sxth	r1, r3
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	b21a      	sxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	430a      	orrs	r2, r1
 8001390:	b212      	sxth	r2, r2
 8001392:	801a      	strh	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <readGyroData>:

void readGyroData(int16_t * destination)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z gyro register data stored here
  readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2206      	movs	r2, #6
 80013aa:	2143      	movs	r1, #67	; 0x43
 80013ac:	2068      	movs	r0, #104	; 0x68
 80013ae:	f7ff ff37 	bl	8001220 <readBytes>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b219      	sxth	r1, r3
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3302      	adds	r3, #2
 80013d2:	430a      	orrs	r2, r1
 80013d4:	b212      	sxth	r2, r2
 80013d6:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80013d8:	7b3b      	ldrb	r3, [r7, #12]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b219      	sxth	r1, r3
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	430a      	orrs	r2, r1
 80013e8:	b212      	sxth	r2, r2
 80013ea:	801a      	strh	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <readMagData>:

void readMagData(int16_t * destination)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
#if I2C_dev
  readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
#else
  readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2207      	movs	r2, #7
 8001402:	2103      	movs	r1, #3
 8001404:	200c      	movs	r0, #12
 8001406:	f7ff ff0b 	bl	8001220 <readBytes>
 #endif

  uint8_t c = rawData[6]; // End data read by reading ST2 register
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	73fb      	strb	r3, [r7, #15]
  if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11c      	bne.n	8001452 <readMagData+0x5e>
    destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8001418:	7a7b      	ldrb	r3, [r7, #9]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	801a      	strh	r2, [r3, #0]
    destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b219      	sxth	r1, r3
 8001430:	7abb      	ldrb	r3, [r7, #10]
 8001432:	b21a      	sxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3302      	adds	r3, #2
 8001438:	430a      	orrs	r2, r1
 800143a:	b212      	sxth	r2, r2
 800143c:	801a      	strh	r2, [r3, #0]
    destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b219      	sxth	r1, r3
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3304      	adds	r3, #4
 800144c:	430a      	orrs	r2, r1
 800144e:	b212      	sxth	r2, r2
 8001450:	801a      	strh	r2, [r3, #0]
  }
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <initAK8963>:
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
  }


void initAK8963(float * destination)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL1, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  HAL_Delay(10);
#else
  /* AK8963_Reset ---------------------------------------------------------*/
  uint8_t rawData[3] = {0, 0, 0};  // x/y/z gyro calibration data stored here
 8001464:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <initAK8963+0x158>)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	4611      	mov	r1, r2
 800146e:	8019      	strh	r1, [r3, #0]
 8001470:	3302      	adds	r3, #2
 8001472:	0c12      	lsrs	r2, r2, #16
 8001474:	701a      	strb	r2, [r3, #0]
// enable I2C master mode
  writeByte(MPU9250_ADDRESS, USER_CTRL,I2C_MST_EN); // Enable I2c master
 8001476:	2220      	movs	r2, #32
 8001478:	216a      	movs	r1, #106	; 0x6a
 800147a:	2068      	movs	r0, #104	; 0x68
 800147c:	f7ff fe36 	bl	80010ec <writeByte>
// set the I2C bus speed to 400 kHz
  writeByte(MPU9250_ADDRESS, I2C_MST_CTRL,I2C_MST_CLK); // Enable I2c master
 8001480:	220d      	movs	r2, #13
 8001482:	2124      	movs	r1, #36	; 0x24
 8001484:	2068      	movs	r0, #104	; 0x68
 8001486:	f7ff fe31 	bl	80010ec <writeByte>

/* get the magnetometer calibration */

// set AK8963 to Power Down
  writeByte(AK8963_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS); // Enable I2c slaver
 800148a:	220c      	movs	r2, #12
 800148c:	2125      	movs	r1, #37	; 0x25
 800148e:	200c      	movs	r0, #12
 8001490:	f7ff fe2c 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_REG, AK8963_CNTL1); // Assign slaver register
 8001494:	220a      	movs	r2, #10
 8001496:	2126      	movs	r1, #38	; 0x26
 8001498:	200c      	movs	r0, #12
 800149a:	f7ff fe27 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_DO, PWR_DOWN); //
 800149e:	2200      	movs	r2, #0
 80014a0:	2163      	movs	r1, #99	; 0x63
 80014a2:	200c      	movs	r0, #12
 80014a4:	f7ff fe22 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_CTRL, 0x81); //
 80014a8:	2281      	movs	r2, #129	; 0x81
 80014aa:	2127      	movs	r1, #39	; 0x27
 80014ac:	200c      	movs	r0, #12
 80014ae:	f7ff fe1d 	bl	80010ec <writeByte>
// long wait between AK8963 mode changes
  HAL_Delay(100);
 80014b2:	2064      	movs	r0, #100	; 0x64
 80014b4:	f002 ff82 	bl	80043bc <HAL_Delay>

// set AK8963 to FUSE ROM access
  writeByte(AK8963_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS); // Enable I2c slaver
 80014b8:	220c      	movs	r2, #12
 80014ba:	2125      	movs	r1, #37	; 0x25
 80014bc:	200c      	movs	r0, #12
 80014be:	f7ff fe15 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_REG, AK8963_CNTL1); // Assign slaver register
 80014c2:	220a      	movs	r2, #10
 80014c4:	2126      	movs	r1, #38	; 0x26
 80014c6:	200c      	movs	r0, #12
 80014c8:	f7ff fe10 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_DO, 0x0F); //
 80014cc:	220f      	movs	r2, #15
 80014ce:	2163      	movs	r1, #99	; 0x63
 80014d0:	200c      	movs	r0, #12
 80014d2:	f7ff fe0b 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_CTRL, 0x81); //
 80014d6:	2281      	movs	r2, #129	; 0x81
 80014d8:	2127      	movs	r1, #39	; 0x27
 80014da:	200c      	movs	r0, #12
 80014dc:	f7ff fe06 	bl	80010ec <writeByte>

// set AK8963 to 16 bit resolution, 100 Hz update rate
  writeByte(AK8963_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS); // Enable I2c slaver
 80014e0:	220c      	movs	r2, #12
 80014e2:	2125      	movs	r1, #37	; 0x25
 80014e4:	200c      	movs	r0, #12
 80014e6:	f7ff fe01 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_REG, AK8963_CNTL1); // Assign slaver register
 80014ea:	220a      	movs	r2, #10
 80014ec:	2126      	movs	r1, #38	; 0x26
 80014ee:	200c      	movs	r0, #12
 80014f0:	f7ff fdfc 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_DO, Mscale << 4 | Mmode); //
 80014f4:	2216      	movs	r2, #22
 80014f6:	2163      	movs	r1, #99	; 0x63
 80014f8:	200c      	movs	r0, #12
 80014fa:	f7ff fdf7 	bl	80010ec <writeByte>
  writeByte(AK8963_ADDRESS, I2C_SLV0_CTRL, 0x81); //
 80014fe:	2281      	movs	r2, #129	; 0x81
 8001500:	2127      	movs	r1, #39	; 0x27
 8001502:	200c      	movs	r0, #12
 8001504:	f7ff fdf2 	bl	80010ec <writeByte>

  HAL_Delay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150c:	f002 ff56 	bl	80043bc <HAL_Delay>

// read the AK8963 ASA registers and compute magnetometer scale factors
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, rawData);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2203      	movs	r2, #3
 8001516:	2110      	movs	r1, #16
 8001518:	200c      	movs	r0, #12
 800151a:	f7ff fe81 	bl	8001220 <readBytes>
  destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	3b80      	subs	r3, #128	; 0x80
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb92 	bl	8000c4c <__aeabi_i2f>
 8001528:	4603      	mov	r3, r0
 800152a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc94 	bl	8000e5c <__aeabi_fdiv>
 8001534:	4603      	mov	r3, r0
 8001536:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fad2 	bl	8000ae4 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001548:	7b7b      	ldrb	r3, [r7, #13]
 800154a:	3b80      	subs	r3, #128	; 0x80
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fb7d 	bl	8000c4c <__aeabi_i2f>
 8001552:	4603      	mov	r3, r0
 8001554:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fc7f 	bl	8000e5c <__aeabi_fdiv>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1d1c      	adds	r4, r3, #4
 8001566:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff faba 	bl	8000ae4 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	3b80      	subs	r3, #128	; 0x80
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fb67 	bl	8000c4c <__aeabi_i2f>
 800157e:	4603      	mov	r3, r0
 8001580:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc69 	bl	8000e5c <__aeabi_fdiv>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f103 0408 	add.w	r4, r3, #8
 8001594:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff faa3 	bl	8000ae4 <__addsf3>
 800159e:	4603      	mov	r3, r0
 80015a0:	6023      	str	r3, [r4, #0]
  HAL_Delay(500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f002 ff09 	bl	80043bc <HAL_Delay>

#endif
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08009470 	.word	0x08009470

080015b8 <initMPU9250>:

void initMPU9250()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80015be:	2200      	movs	r2, #0
 80015c0:	216b      	movs	r1, #107	; 0x6b
 80015c2:	2068      	movs	r0, #104	; 0x68
 80015c4:	f7ff fd92 	bl	80010ec <writeByte>
  HAL_Delay(100);          // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f002 fef7 	bl	80043bc <HAL_Delay>

 // get stable time source
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80015ce:	2201      	movs	r2, #1
 80015d0:	216b      	movs	r1, #107	; 0x6b
 80015d2:	2068      	movs	r0, #104	; 0x68
 80015d4:	f7ff fd8a 	bl	80010ec <writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80015d8:	2203      	movs	r2, #3
 80015da:	211a      	movs	r1, #26
 80015dc:	2068      	movs	r0, #104	; 0x68
 80015de:	f7ff fd85 	bl	80010ec <writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80015e2:	2204      	movs	r2, #4
 80015e4:	2119      	movs	r1, #25
 80015e6:	2068      	movs	r0, #104	; 0x68
 80015e8:	f7ff fd80 	bl	80010ec <writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 80015ec:	211b      	movs	r1, #27
 80015ee:	2068      	movs	r0, #104	; 0x68
 80015f0:	f7ff fdae 	bl	8001150 <readByte>
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	211b      	movs	r1, #27
 8001604:	2068      	movs	r0, #104	; 0x68
 8001606:	f7ff fd71 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f023 0318 	bic.w	r3, r3, #24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	211b      	movs	r1, #27
 8001616:	2068      	movs	r0, #104	; 0x68
 8001618:	f7ff fd68 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	461a      	mov	r2, r3
 8001620:	211b      	movs	r1, #27
 8001622:	2068      	movs	r0, #104	; 0x68
 8001624:	f7ff fd62 	bl	80010ec <writeByte>

 // Set accelerometer configuration
  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 8001628:	211c      	movs	r1, #28
 800162a:	2068      	movs	r0, #104	; 0x68
 800162c:	f7ff fd90 	bl	8001150 <readByte>
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	211c      	movs	r1, #28
 8001640:	2068      	movs	r0, #104	; 0x68
 8001642:	f7ff fd53 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f023 0318 	bic.w	r3, r3, #24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	211c      	movs	r1, #28
 8001652:	2068      	movs	r0, #104	; 0x68
 8001654:	f7ff fd4a 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f043 0318 	orr.w	r3, r3, #24
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	211c      	movs	r1, #28
 8001664:	2068      	movs	r0, #104	; 0x68
 8001666:	f7ff fd41 	bl	80010ec <writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 800166a:	211d      	movs	r1, #29
 800166c:	2068      	movs	r0, #104	; 0x68
 800166e:	f7ff fd6f 	bl	8001150 <readByte>
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f023 030f 	bic.w	r3, r3, #15
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	211d      	movs	r1, #29
 8001682:	2068      	movs	r0, #104	; 0x68
 8001684:	f7ff fd32 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f043 0303 	orr.w	r3, r3, #3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	211d      	movs	r1, #29
 8001694:	2068      	movs	r0, #104	; 0x68
 8001696:	f7ff fd29 	bl	80010ec <writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
 800169a:	2212      	movs	r2, #18
 800169c:	2137      	movs	r1, #55	; 0x37
 800169e:	2068      	movs	r0, #104	; 0x68
 80016a0:	f7ff fd24 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80016a4:	2201      	movs	r2, #1
 80016a6:	2138      	movs	r1, #56	; 0x38
 80016a8:	2068      	movs	r0, #104	; 0x68
 80016aa:	f7ff fd1f 	bl	80010ec <writeByte>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b098      	sub	sp, #96	; 0x60
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ca:	2300      	movs	r3, #0
 80016cc:	643b      	str	r3, [r7, #64]	; 0x40
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34

// reset device, reset all registers, clear gyro and accelerometer bias registers
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	216b      	movs	r1, #107	; 0x6b
 80016de:	2068      	movs	r0, #104	; 0x68
 80016e0:	f7ff fd04 	bl	80010ec <writeByte>
  HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	; 0x64
 80016e6:	f002 fe69 	bl	80043bc <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80016ea:	2201      	movs	r2, #1
 80016ec:	216b      	movs	r1, #107	; 0x6b
 80016ee:	2068      	movs	r0, #104	; 0x68
 80016f0:	f7ff fcfc 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80016f4:	2200      	movs	r2, #0
 80016f6:	216c      	movs	r1, #108	; 0x6c
 80016f8:	2068      	movs	r0, #104	; 0x68
 80016fa:	f7ff fcf7 	bl	80010ec <writeByte>
  HAL_Delay(100);
 80016fe:	2064      	movs	r0, #100	; 0x64
 8001700:	f002 fe5c 	bl	80043bc <HAL_Delay>

// Configure device for bias calculation
  writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001704:	2200      	movs	r2, #0
 8001706:	2138      	movs	r1, #56	; 0x38
 8001708:	2068      	movs	r0, #104	; 0x68
 800170a:	f7ff fcef 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 800170e:	2200      	movs	r2, #0
 8001710:	2123      	movs	r1, #35	; 0x23
 8001712:	2068      	movs	r0, #104	; 0x68
 8001714:	f7ff fcea 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001718:	2200      	movs	r2, #0
 800171a:	216b      	movs	r1, #107	; 0x6b
 800171c:	2068      	movs	r0, #104	; 0x68
 800171e:	f7ff fce5 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001722:	2200      	movs	r2, #0
 8001724:	2124      	movs	r1, #36	; 0x24
 8001726:	2068      	movs	r0, #104	; 0x68
 8001728:	f7ff fce0 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800172c:	2200      	movs	r2, #0
 800172e:	216a      	movs	r1, #106	; 0x6a
 8001730:	2068      	movs	r0, #104	; 0x68
 8001732:	f7ff fcdb 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001736:	220c      	movs	r2, #12
 8001738:	216a      	movs	r1, #106	; 0x6a
 800173a:	2068      	movs	r0, #104	; 0x68
 800173c:	f7ff fcd6 	bl	80010ec <writeByte>
  HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f002 fe3b 	bl	80043bc <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001746:	2201      	movs	r2, #1
 8001748:	211a      	movs	r1, #26
 800174a:	2068      	movs	r0, #104	; 0x68
 800174c:	f7ff fcce 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001750:	2200      	movs	r2, #0
 8001752:	2119      	movs	r1, #25
 8001754:	2068      	movs	r0, #104	; 0x68
 8001756:	f7ff fcc9 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800175a:	2200      	movs	r2, #0
 800175c:	211b      	movs	r1, #27
 800175e:	2068      	movs	r0, #104	; 0x68
 8001760:	f7ff fcc4 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001764:	2200      	movs	r2, #0
 8001766:	211c      	movs	r1, #28
 8001768:	2068      	movs	r0, #104	; 0x68
 800176a:	f7ff fcbf 	bl	80010ec <writeByte>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 800176e:	2383      	movs	r3, #131	; 0x83
 8001770:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001778:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	216a      	movs	r1, #106	; 0x6a
 8001780:	2068      	movs	r0, #104	; 0x68
 8001782:	f7ff fcb3 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001786:	2278      	movs	r2, #120	; 0x78
 8001788:	2123      	movs	r1, #35	; 0x23
 800178a:	2068      	movs	r0, #104	; 0x68
 800178c:	f7ff fcae 	bl	80010ec <writeByte>
  HAL_Delay(100); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f002 fe13 	bl	80043bc <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001796:	2200      	movs	r2, #0
 8001798:	2123      	movs	r1, #35	; 0x23
 800179a:	2068      	movs	r0, #104	; 0x68
 800179c:	f7ff fca6 	bl	80010ec <writeByte>
  readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80017a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017a4:	2202      	movs	r2, #2
 80017a6:	2172      	movs	r1, #114	; 0x72
 80017a8:	2068      	movs	r0, #104	; 0x68
 80017aa:	f7ff fd39 	bl	8001220 <readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80017ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b21b      	sxth	r3, r3
 80017c0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80017c4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80017c8:	4ab5      	ldr	r2, [pc, #724]	; (8001aa0 <calibrateMPU9250+0x3e8>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80017da:	e071      	b.n	80018c0 <calibrateMPU9250+0x208>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80017dc:	2300      	movs	r3, #0
 80017de:	82bb      	strh	r3, [r7, #20]
 80017e0:	2300      	movs	r3, #0
 80017e2:	82fb      	strh	r3, [r7, #22]
 80017e4:	2300      	movs	r3, #0
 80017e6:	833b      	strh	r3, [r7, #24]
 80017e8:	2300      	movs	r3, #0
 80017ea:	81bb      	strh	r3, [r7, #12]
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	2300      	movs	r3, #0
 80017f2:	823b      	strh	r3, [r7, #16]
    readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80017f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f8:	220c      	movs	r2, #12
 80017fa:	2174      	movs	r1, #116	; 0x74
 80017fc:	2068      	movs	r0, #104	; 0x68
 80017fe:	f7ff fd0f 	bl	8001220 <readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001802:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21b      	sxth	r3, r3
 8001814:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001816:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21b      	sxth	r3, r3
 8001828:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800182a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800183e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001852:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21b      	sxth	r3, r3
 8001864:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001866:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001872:	b21b      	sxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b21b      	sxth	r3, r3
 8001878:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001880:	4413      	add	r3, r2
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800188a:	4413      	add	r3, r2
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001894:	4413      	add	r3, r2
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80018a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018a8:	4413      	add	r3, r2
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80018ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80018b2:	4413      	add	r3, r2
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 80018b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80018ba:	3301      	adds	r3, #1
 80018bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80018c0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80018c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d387      	bcc.n	80017dc <calibrateMPU9250+0x124>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80018d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018de:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80018e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80018f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80018f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80018fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001902:	fb92 f3f3 	sdiv	r3, r2, r3
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 8001908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800190a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800190e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001912:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	dd05      	ble.n	8001926 <calibrateMPU9250+0x26e>
 800191a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800191c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
 8001924:	e004      	b.n	8001930 <calibrateMPU9250+0x278>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001928:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800192c:	4413      	add	r3, r2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001932:	425b      	negs	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	da00      	bge.n	800193a <calibrateMPU9250+0x282>
 8001938:	3303      	adds	r3, #3
 800193a:	109b      	asrs	r3, r3, #2
 800193c:	121b      	asrs	r3, r3, #8
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001946:	425b      	negs	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	da00      	bge.n	800194e <calibrateMPU9250+0x296>
 800194c:	3303      	adds	r3, #3
 800194e:	109b      	asrs	r3, r3, #2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001958:	425b      	negs	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	da00      	bge.n	8001960 <calibrateMPU9250+0x2a8>
 800195e:	3303      	adds	r3, #3
 8001960:	109b      	asrs	r3, r3, #2
 8001962:	121b      	asrs	r3, r3, #8
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196c:	425b      	negs	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <calibrateMPU9250+0x2bc>
 8001972:	3303      	adds	r3, #3
 8001974:	109b      	asrs	r3, r3, #2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800197c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197e:	425b      	negs	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	da00      	bge.n	8001986 <calibrateMPU9250+0x2ce>
 8001984:	3303      	adds	r3, #3
 8001986:	109b      	asrs	r3, r3, #2
 8001988:	121b      	asrs	r3, r3, #8
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001992:	425b      	negs	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	da00      	bge.n	800199a <calibrateMPU9250+0x2e2>
 8001998:	3303      	adds	r3, #3
 800199a:	109b      	asrs	r3, r3, #2
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
*/
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f951 	bl	8000c4c <__aeabi_i2f>
 80019aa:	4604      	mov	r4, r0
 80019ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f947 	bl	8000c44 <__aeabi_ui2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff fa4e 	bl	8000e5c <__aeabi_fdiv>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	601a      	str	r2, [r3, #0]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80019c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f93e 	bl	8000c4c <__aeabi_i2f>
 80019d0:	4605      	mov	r5, r0
 80019d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f934 	bl	8000c44 <__aeabi_ui2f>
 80019dc:	4602      	mov	r2, r0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1d1c      	adds	r4, r3, #4
 80019e2:	4611      	mov	r1, r2
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff fa39 	bl	8000e5c <__aeabi_fdiv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6023      	str	r3, [r4, #0]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f92b 	bl	8000c4c <__aeabi_i2f>
 80019f6:	4605      	mov	r5, r0
 80019f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f921 	bl	8000c44 <__aeabi_ui2f>
 8001a02:	4602      	mov	r2, r0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 0408 	add.w	r4, r3, #8
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7ff fa25 	bl	8000e5c <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	6023      	str	r3, [r4, #0]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001a22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a26:	2202      	movs	r2, #2
 8001a28:	2177      	movs	r1, #119	; 0x77
 8001a2a:	2068      	movs	r0, #104	; 0x68
 8001a2c:	f7ff fbf8 	bl	8001220 <readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a30:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	623b      	str	r3, [r7, #32]
  readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001a42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a46:	2202      	movs	r2, #2
 8001a48:	217a      	movs	r1, #122	; 0x7a
 8001a4a:	2068      	movs	r0, #104	; 0x68
 8001a4c:	f7ff fbe8 	bl	8001220 <readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a50:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a66:	2202      	movs	r2, #2
 8001a68:	217d      	movs	r1, #125	; 0x7d
 8001a6a:	2068      	movs	r0, #104	; 0x68
 8001a6c:	f7ff fbd8 	bl	8001220 <readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a70:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001a82:	2301      	movs	r3, #1
 8001a84:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <calibrateMPU9250+0x3ec>)
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	8019      	strh	r1, [r3, #0]
 8001a92:	3302      	adds	r3, #2
 8001a94:	0c12      	lsrs	r2, r2, #16
 8001a96:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001a9e:	e01b      	b.n	8001ad8 <calibrateMPU9250+0x420>
 8001aa0:	aaaaaaab 	.word	0xaaaaaaab
 8001aa4:	08009470 	.word	0x08009470
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001aa8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3360      	adds	r3, #96	; 0x60
 8001ab0:	443b      	add	r3, r7
 8001ab2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <calibrateMPU9250+0x416>
 8001ac0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ac4:	3360      	adds	r3, #96	; 0x60
 8001ac6:	443b      	add	r3, r7
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 8001ace:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ad8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d9e3      	bls.n	8001aa8 <calibrateMPU9250+0x3f0>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <calibrateMPU9250+0x432>
 8001ae8:	3307      	adds	r3, #7
 8001aea:	10db      	asrs	r3, r3, #3
 8001aec:	425b      	negs	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da00      	bge.n	8001afc <calibrateMPU9250+0x444>
 8001afa:	3307      	adds	r3, #7
 8001afc:	10db      	asrs	r3, r3, #3
 8001afe:	425b      	negs	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da00      	bge.n	8001b0e <calibrateMPU9250+0x456>
 8001b0c:	3307      	adds	r3, #7
 8001b0e:	10db      	asrs	r3, r3, #3
 8001b10:	425b      	negs	r3, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	121b      	asrs	r3, r3, #8
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b2c:	7f3b      	ldrb	r3, [r7, #28]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	121b      	asrs	r3, r3, #8
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b48:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001b4c:	7f7b      	ldrb	r3, [r7, #29]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	121b      	asrs	r3, r3, #8
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b68:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001b6c:	7fbb      	ldrb	r3, [r7, #30]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f867 	bl	8000c4c <__aeabi_i2f>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f85d 	bl	8000c44 <__aeabi_ui2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff f964 	bl	8000e5c <__aeabi_fdiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f854 	bl	8000c4c <__aeabi_i2f>
 8001ba4:	4605      	mov	r5, r0
 8001ba6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f84a 	bl	8000c44 <__aeabi_ui2f>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	1d1c      	adds	r4, r3, #4
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f7ff f94f 	bl	8000e5c <__aeabi_fdiv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6023      	str	r3, [r4, #0]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f841 	bl	8000c4c <__aeabi_i2f>
 8001bca:	4605      	mov	r5, r0
 8001bcc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f837 	bl	8000c44 <__aeabi_ui2f>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f103 0408 	add.w	r4, r3, #8
 8001bde:	4611      	mov	r1, r2
 8001be0:	4628      	mov	r0, r5
 8001be2:	f7ff f93b 	bl	8000e5c <__aeabi_fdiv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	6023      	str	r3, [r4, #0]
}
 8001bea:	bf00      	nop
 8001bec:	3760      	adds	r7, #96	; 0x60
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	0000      	movs	r0, r0
	...

08001bf8 <MPU9250SelfTest>:
}


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b09e      	sub	sp, #120	; 0x78
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
   uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8001c00:	4aa1      	ldr	r2, [pc, #644]	; (8001e88 <MPU9250SelfTest+0x290>)
 8001c02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c0a:	6018      	str	r0, [r3, #0]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	8019      	strh	r1, [r3, #0]
   uint8_t selfTest[6];
   int32_t gAvg[3] = {0, 0, 0}, aAvg[3] = {0, 0, 0}, aSTAvg[3] = {0, 0, 0}, gSTAvg[3] = {0, 0, 0};
 8001c10:	2300      	movs	r3, #0
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   float factoryTrim[6];
   uint8_t FS = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001c46:	2200      	movs	r2, #0
 8001c48:	2119      	movs	r1, #25
 8001c4a:	2068      	movs	r0, #104	; 0x68
 8001c4c:	f7ff fa4e 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001c50:	2202      	movs	r2, #2
 8001c52:	211a      	movs	r1, #26
 8001c54:	2068      	movs	r0, #104	; 0x68
 8001c56:	f7ff fa49 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS); // Set full scale range for the gyro to 250 dps
 8001c5a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c5e:	2201      	movs	r2, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	211b      	movs	r1, #27
 8001c6a:	2068      	movs	r0, #104	; 0x68
 8001c6c:	f7ff fa3e 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001c70:	2202      	movs	r2, #2
 8001c72:	211d      	movs	r1, #29
 8001c74:	2068      	movs	r0, #104	; 0x68
 8001c76:	f7ff fa39 	bl	80010ec <writeByte>
  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g
 8001c7a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c7e:	2201      	movs	r2, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	211c      	movs	r1, #28
 8001c8a:	2068      	movs	r0, #104	; 0x68
 8001c8c:	f7ff fa2e 	bl	80010ec <writeByte>

  for( int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001c90:	2300      	movs	r3, #0
 8001c92:	677b      	str	r3, [r7, #116]	; 0x74
 8001c94:	e058      	b.n	8001d48 <MPU9250SelfTest+0x150>

  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001c96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c9a:	2206      	movs	r2, #6
 8001c9c:	213b      	movs	r1, #59	; 0x3b
 8001c9e:	2068      	movs	r0, #104	; 0x68
 8001ca0:	f7ff fabe 	bl	8001220 <readBytes>
  aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	b211      	sxth	r1, r2
 8001cae:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001cb2:	b212      	sxth	r2, r2
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	b212      	sxth	r2, r2
 8001cb8:	4413      	add	r3, r2
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbe:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001cc2:	0212      	lsls	r2, r2, #8
 8001cc4:	b211      	sxth	r1, r2
 8001cc6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001cca:	b212      	sxth	r2, r2
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	b212      	sxth	r2, r2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001cda:	0212      	lsls	r2, r2, #8
 8001cdc:	b211      	sxth	r1, r2
 8001cde:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001ce2:	b212      	sxth	r2, r2
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	b212      	sxth	r2, r2
 8001ce8:	4413      	add	r3, r2
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44

    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001cec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf0:	2206      	movs	r2, #6
 8001cf2:	2143      	movs	r1, #67	; 0x43
 8001cf4:	2068      	movs	r0, #104	; 0x68
 8001cf6:	f7ff fa93 	bl	8001220 <readBytes>
  gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cfc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001d00:	0212      	lsls	r2, r2, #8
 8001d02:	b211      	sxth	r1, r2
 8001d04:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001d08:	b212      	sxth	r2, r2
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	b212      	sxth	r2, r2
 8001d0e:	4413      	add	r3, r2
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d14:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001d18:	0212      	lsls	r2, r2, #8
 8001d1a:	b211      	sxth	r1, r2
 8001d1c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001d20:	b212      	sxth	r2, r2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	b212      	sxth	r2, r2
 8001d26:	4413      	add	r3, r2
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001d30:	0212      	lsls	r2, r2, #8
 8001d32:	b211      	sxth	r1, r2
 8001d34:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001d38:	b212      	sxth	r2, r2
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	b212      	sxth	r2, r2
 8001d3e:	4413      	add	r3, r2
 8001d40:	653b      	str	r3, [r7, #80]	; 0x50
  for( int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	3301      	adds	r3, #1
 8001d46:	677b      	str	r3, [r7, #116]	; 0x74
 8001d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4a:	2bc7      	cmp	r3, #199	; 0xc7
 8001d4c:	dda3      	ble.n	8001c96 <MPU9250SelfTest+0x9e>
  }

  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001d4e:	2300      	movs	r3, #0
 8001d50:	673b      	str	r3, [r7, #112]	; 0x70
 8001d52:	e026      	b.n	8001da2 <MPU9250SelfTest+0x1aa>
  aAvg[ii] /= 200;
 8001d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3378      	adds	r3, #120	; 0x78
 8001d5a:	443b      	add	r3, r7
 8001d5c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <MPU9250SelfTest+0x294>)
 8001d62:	fb82 1203 	smull	r1, r2, r2, r3
 8001d66:	1192      	asrs	r2, r2, #6
 8001d68:	17db      	asrs	r3, r3, #31
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	3378      	adds	r3, #120	; 0x78
 8001d72:	443b      	add	r3, r7
 8001d74:	f843 2c3c 	str.w	r2, [r3, #-60]
  gAvg[ii] /= 200;
 8001d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	3378      	adds	r3, #120	; 0x78
 8001d7e:	443b      	add	r3, r7
 8001d80:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001d84:	4a41      	ldr	r2, [pc, #260]	; (8001e8c <MPU9250SelfTest+0x294>)
 8001d86:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8a:	1192      	asrs	r2, r2, #6
 8001d8c:	17db      	asrs	r3, r3, #31
 8001d8e:	1ad2      	subs	r2, r2, r3
 8001d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	3378      	adds	r3, #120	; 0x78
 8001d96:	443b      	add	r3, r7
 8001d98:	f843 2c30 	str.w	r2, [r3, #-48]
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9e:	3301      	adds	r3, #1
 8001da0:	673b      	str	r3, [r7, #112]	; 0x70
 8001da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	ddd5      	ble.n	8001d54 <MPU9250SelfTest+0x15c>
  }

// Configure the accelerometer for self-test
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001da8:	22e0      	movs	r2, #224	; 0xe0
 8001daa:	211c      	movs	r1, #28
 8001dac:	2068      	movs	r0, #104	; 0x68
 8001dae:	f7ff f99d 	bl	80010ec <writeByte>
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001db2:	22e0      	movs	r2, #224	; 0xe0
 8001db4:	211b      	movs	r1, #27
 8001db6:	2068      	movs	r0, #104	; 0x68
 8001db8:	f7ff f998 	bl	80010ec <writeByte>
   HAL_Delay(250); // Delay a while to let the device stabilize
 8001dbc:	20fa      	movs	r0, #250	; 0xfa
 8001dbe:	f002 fafd 	bl	80043bc <HAL_Delay>

  for( int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dc6:	e058      	b.n	8001e7a <MPU9250SelfTest+0x282>

  readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001dc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dcc:	2206      	movs	r2, #6
 8001dce:	213b      	movs	r1, #59	; 0x3b
 8001dd0:	2068      	movs	r0, #104	; 0x68
 8001dd2:	f7ff fa25 	bl	8001220 <readBytes>
  aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001ddc:	0212      	lsls	r2, r2, #8
 8001dde:	b211      	sxth	r1, r2
 8001de0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001de4:	b212      	sxth	r2, r2
 8001de6:	430a      	orrs	r2, r1
 8001de8:	b212      	sxth	r2, r2
 8001dea:	4413      	add	r3, r2
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
  aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001df4:	0212      	lsls	r2, r2, #8
 8001df6:	b211      	sxth	r1, r2
 8001df8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001dfc:	b212      	sxth	r2, r2
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	b212      	sxth	r2, r2
 8001e02:	4413      	add	r3, r2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e08:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001e0c:	0212      	lsls	r2, r2, #8
 8001e0e:	b211      	sxth	r1, r2
 8001e10:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001e14:	b212      	sxth	r2, r2
 8001e16:	430a      	orrs	r2, r1
 8001e18:	b212      	sxth	r2, r2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38

    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001e1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e22:	2206      	movs	r2, #6
 8001e24:	2143      	movs	r1, #67	; 0x43
 8001e26:	2068      	movs	r0, #104	; 0x68
 8001e28:	f7ff f9fa 	bl	8001220 <readBytes>
  gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	b211      	sxth	r1, r2
 8001e36:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	b212      	sxth	r2, r2
 8001e40:	4413      	add	r3, r2
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	b211      	sxth	r1, r2
 8001e4e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001e52:	b212      	sxth	r2, r2
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b212      	sxth	r2, r2
 8001e58:	4413      	add	r3, r2
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001e62:	0212      	lsls	r2, r2, #8
 8001e64:	b211      	sxth	r1, r2
 8001e66:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001e6a:	b212      	sxth	r2, r2
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	b212      	sxth	r2, r2
 8001e70:	4413      	add	r3, r2
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  for( int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	3301      	adds	r3, #1
 8001e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7c:	2bc7      	cmp	r3, #199	; 0xc7
 8001e7e:	dda3      	ble.n	8001dc8 <MPU9250SelfTest+0x1d0>
  }

  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001e80:	2300      	movs	r3, #0
 8001e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e84:	e02b      	b.n	8001ede <MPU9250SelfTest+0x2e6>
 8001e86:	bf00      	nop
 8001e88:	08009484 	.word	0x08009484
 8001e8c:	51eb851f 	.word	0x51eb851f
  aSTAvg[ii] /= 200;
 8001e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3378      	adds	r3, #120	; 0x78
 8001e96:	443b      	add	r3, r7
 8001e98:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001e9c:	4ac6      	ldr	r2, [pc, #792]	; (80021b8 <MPU9250SelfTest+0x5c0>)
 8001e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea2:	1192      	asrs	r2, r2, #6
 8001ea4:	17db      	asrs	r3, r3, #31
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3378      	adds	r3, #120	; 0x78
 8001eae:	443b      	add	r3, r7
 8001eb0:	f843 2c48 	str.w	r2, [r3, #-72]
  gSTAvg[ii] /= 200;
 8001eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	3378      	adds	r3, #120	; 0x78
 8001eba:	443b      	add	r3, r7
 8001ebc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001ec0:	4abd      	ldr	r2, [pc, #756]	; (80021b8 <MPU9250SelfTest+0x5c0>)
 8001ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec6:	1192      	asrs	r2, r2, #6
 8001ec8:	17db      	asrs	r3, r3, #31
 8001eca:	1ad2      	subs	r2, r2, r3
 8001ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3378      	adds	r3, #120	; 0x78
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f843 2c54 	str.w	r2, [r3, #-84]
  for (int ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eda:	3301      	adds	r3, #1
 8001edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	ddd5      	ble.n	8001e90 <MPU9250SelfTest+0x298>
  }

 // Configure the gyro and accelerometer for normal operation
   writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	211c      	movs	r1, #28
 8001ee8:	2068      	movs	r0, #104	; 0x68
 8001eea:	f7ff f8ff 	bl	80010ec <writeByte>
   writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	211b      	movs	r1, #27
 8001ef2:	2068      	movs	r0, #104	; 0x68
 8001ef4:	f7ff f8fa 	bl	80010ec <writeByte>
   HAL_Delay(250); // Delay a while to let the device stabilize
 8001ef8:	20fa      	movs	r0, #250	; 0xfa
 8001efa:	f002 fa5f 	bl	80043bc <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   selfTest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8001efe:	210d      	movs	r1, #13
 8001f00:	2068      	movs	r0, #104	; 0x68
 8001f02:	f7ff f925 	bl	8001150 <readByte>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
   selfTest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001f0c:	210e      	movs	r1, #14
 8001f0e:	2068      	movs	r0, #104	; 0x68
 8001f10:	f7ff f91e 	bl	8001150 <readByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
   selfTest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	2068      	movs	r0, #104	; 0x68
 8001f1e:	f7ff f917 	bl	8001150 <readByte>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   selfTest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2068      	movs	r0, #104	; 0x68
 8001f2c:	f7ff f910 	bl	8001150 <readByte>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   selfTest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8001f36:	2101      	movs	r1, #1
 8001f38:	2068      	movs	r0, #104	; 0x68
 8001f3a:	f7ff f909 	bl	8001150 <readByte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
   selfTest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8001f44:	2102      	movs	r1, #2
 8001f46:	2068      	movs	r0, #104	; 0x68
 8001f48:	f7ff f902 	bl	8001150 <readByte>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8001f52:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001f56:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fe74 	bl	8000c4c <__aeabi_i2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa5e 	bl	8000428 <__aeabi_f2d>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460d      	mov	r5, r1
 8001f70:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fe65 	bl	8000c44 <__aeabi_ui2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa53 	bl	8000428 <__aeabi_f2d>
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <MPU9250SelfTest+0x5c4>)
 8001f88:	f7fe f8ee 	bl	8000168 <__aeabi_dsub>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	a187      	add	r1, pc, #540	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 8001f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f96:	f005 fa01 	bl	800739c <pow>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	f7fe fa99 	bl	80004d8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fd43 	bl	8000a38 <__aeabi_d2f>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60fb      	str	r3, [r7, #12]
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8001fb6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001fba:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fe42 	bl	8000c4c <__aeabi_i2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa2c 	bl	8000428 <__aeabi_f2d>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe33 	bl	8000c44 <__aeabi_ui2f>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa21 	bl	8000428 <__aeabi_f2d>
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b74      	ldr	r3, [pc, #464]	; (80021bc <MPU9250SelfTest+0x5c4>)
 8001fec:	f7fe f8bc 	bl	8000168 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	a16e      	add	r1, pc, #440	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 8001ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ffa:	f005 f9cf 	bl	800739c <pow>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fa67 	bl	80004d8 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fd11 	bl	8000a38 <__aeabi_d2f>
 8002016:	4603      	mov	r3, r0
 8002018:	613b      	str	r3, [r7, #16]
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 800201a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800201e:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fe10 	bl	8000c4c <__aeabi_i2f>
 800202c:	4603      	mov	r3, r0
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f9fa 	bl	8000428 <__aeabi_f2d>
 8002034:	4604      	mov	r4, r0
 8002036:	460d      	mov	r5, r1
 8002038:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe01 	bl	8000c44 <__aeabi_ui2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f9ef 	bl	8000428 <__aeabi_f2d>
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <MPU9250SelfTest+0x5c4>)
 8002050:	f7fe f88a 	bl	8000168 <__aeabi_dsub>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	a155      	add	r1, pc, #340	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 800205a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800205e:	f005 f99d 	bl	800739c <pow>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4620      	mov	r0, r4
 8002068:	4629      	mov	r1, r5
 800206a:	f7fe fa35 	bl	80004d8 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fcdf 	bl	8000a38 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	617b      	str	r3, [r7, #20]
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800207e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002082:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fdde 	bl	8000c4c <__aeabi_i2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fdcf 	bl	8000c44 <__aeabi_ui2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f9bd 	bl	8000428 <__aeabi_f2d>
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <MPU9250SelfTest+0x5c4>)
 80020b4:	f7fe f858 	bl	8000168 <__aeabi_dsub>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	a13c      	add	r1, pc, #240	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 80020be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020c2:	f005 f96b 	bl	800739c <pow>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe fa03 	bl	80004d8 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fcad 	bl	8000a38 <__aeabi_d2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80020e2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80020e6:	f640 223c 	movw	r2, #2620	; 0xa3c
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fdac 	bl	8000c4c <__aeabi_i2f>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f996 	bl	8000428 <__aeabi_f2d>
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fd9d 	bl	8000c44 <__aeabi_ui2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f98b 	bl	8000428 <__aeabi_f2d>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <MPU9250SelfTest+0x5c4>)
 8002118:	f7fe f826 	bl	8000168 <__aeabi_dsub>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	a123      	add	r1, pc, #140	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 8002122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002126:	f005 f939 	bl	800739c <pow>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f9d1 	bl	80004d8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fc7b 	bl	8000a38 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	61fb      	str	r3, [r7, #28]
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8002146:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800214a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fd7a 	bl	8000c4c <__aeabi_i2f>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	4604      	mov	r4, r0
 8002162:	460d      	mov	r5, r1
 8002164:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fd6b 	bl	8000c44 <__aeabi_ui2f>
 800216e:	4603      	mov	r3, r0
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f959 	bl	8000428 <__aeabi_f2d>
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MPU9250SelfTest+0x5c4>)
 800217c:	f7fd fff4 	bl	8000168 <__aeabi_dsub>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	a10a      	add	r1, pc, #40	; (adr r1, 80021b0 <MPU9250SelfTest+0x5b8>)
 8002186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800218a:	f005 f907 	bl	800739c <pow>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe f99f 	bl	80004d8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fc49 	bl	8000a38 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	623b      	str	r3, [r7, #32]

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (int i = 0; i < 3; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
 80021ae:	e064      	b.n	800227a <MPU9250SelfTest+0x682>
 80021b0:	c28f5c29 	.word	0xc28f5c29
 80021b4:	3ff028f5 	.word	0x3ff028f5
 80021b8:	51eb851f 	.word	0x51eb851f
 80021bc:	3ff00000 	.word	0x3ff00000
     destination[i] = 100.0f*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0f; // Report percent differences
 80021c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3378      	adds	r3, #120	; 0x78
 80021c6:	443b      	add	r3, r7
 80021c8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80021cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3378      	adds	r3, #120	; 0x78
 80021d2:	443b      	add	r3, r7
 80021d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd36 	bl	8000c4c <__aeabi_i2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	492a      	ldr	r1, [pc, #168]	; (800228c <MPU9250SelfTest+0x694>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd85 	bl	8000cf4 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	3378      	adds	r3, #120	; 0x78
 80021f4:	443b      	add	r3, r7
 80021f6:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f7fe fe2d 	bl	8000e5c <__aeabi_fdiv>
 8002202:	4603      	mov	r3, r0
 8002204:	4618      	mov	r0, r3
 8002206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	18d4      	adds	r4, r2, r3
 800220e:	491f      	ldr	r1, [pc, #124]	; (800228c <MPU9250SelfTest+0x694>)
 8002210:	f7fe fc66 	bl	8000ae0 <__aeabi_fsub>
 8002214:	4603      	mov	r3, r0
 8002216:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0f*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0f; // Report percent differences
 8002218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3378      	adds	r3, #120	; 0x78
 800221e:	443b      	add	r3, r7
 8002220:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	3378      	adds	r3, #120	; 0x78
 800222a:	443b      	add	r3, r7
 800222c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd0a 	bl	8000c4c <__aeabi_i2f>
 8002238:	4603      	mov	r3, r0
 800223a:	4914      	ldr	r1, [pc, #80]	; (800228c <MPU9250SelfTest+0x694>)
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fd59 	bl	8000cf4 <__aeabi_fmul>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002248:	3303      	adds	r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3378      	adds	r3, #120	; 0x78
 800224e:	443b      	add	r3, r7
 8002250:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7fe fe00 	bl	8000e5c <__aeabi_fdiv>
 800225c:	4603      	mov	r3, r0
 800225e:	4618      	mov	r0, r3
 8002260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002262:	3303      	adds	r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	18d4      	adds	r4, r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <MPU9250SelfTest+0x694>)
 800226c:	f7fe fc38 	bl	8000ae0 <__aeabi_fsub>
 8002270:	4603      	mov	r3, r0
 8002272:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8002274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002276:	3301      	adds	r3, #1
 8002278:	667b      	str	r3, [r7, #100]	; 0x64
 800227a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800227c:	2b02      	cmp	r3, #2
 800227e:	dd9f      	ble.n	80021c0 <MPU9250SelfTest+0x5c8>
   }

}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3778      	adds	r7, #120	; 0x78
 8002286:	46bd      	mov	sp, r7
 8002288:	bdb0      	pop	{r4, r5, r7, pc}
 800228a:	bf00      	nop
 800228c:	42c80000 	.word	0x42c80000

08002290 <MadgwickQuaternionUpdate>:
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
//void MadgwickQuaternionUpdate(MPU9250_t * MPU)
       void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float * q, float deltat)
        {
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	b0ad      	sub	sp, #180	; 0xb4
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
           float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 800229e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80022bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
           float _2q1my;
           float _2q1mz;
           float _2q2mx;
           float _4bx;
           float _4bz;
           float _2q1 = 2.0f * q1;
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ca:	4619      	mov	r1, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fc09 	bl	8000ae4 <__addsf3>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
           float _2q2 = 2.0f * q2;
 80022d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022dc:	4619      	mov	r1, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fc00 	bl	8000ae4 <__addsf3>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
           float _2q3 = 2.0f * q3;
 80022ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fbf7 	bl	8000ae4 <__addsf3>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
           float _2q4 = 2.0f * q4;
 80022fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002300:	4619      	mov	r1, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fbee 	bl	8000ae4 <__addsf3>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
           float _2q1q3 = 2.0f * q1 * q3;
 800230e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002312:	4619      	mov	r1, r3
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fbe5 	bl	8000ae4 <__addsf3>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002322:	f7fe fce7 	bl	8000cf4 <__aeabi_fmul>
 8002326:	4603      	mov	r3, r0
 8002328:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
           float _2q3q4 = 2.0f * q3 * q4;
 800232c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002330:	4619      	mov	r1, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fbd6 	bl	8000ae4 <__addsf3>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002340:	f7fe fcd8 	bl	8000cf4 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
           float q1q1 = q1 * q1;
 800234a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800234e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002352:	f7fe fccf 	bl	8000cf4 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
           float q1q2 = q1 * q2;
 800235c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002360:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002364:	f7fe fcc6 	bl	8000cf4 <__aeabi_fmul>
 8002368:	4603      	mov	r3, r0
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
           float q1q3 = q1 * q3;
 800236e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002372:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002376:	f7fe fcbd 	bl	8000cf4 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	67fb      	str	r3, [r7, #124]	; 0x7c
           float q1q4 = q1 * q4;
 800237e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002382:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002386:	f7fe fcb5 	bl	8000cf4 <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	67bb      	str	r3, [r7, #120]	; 0x78
           float q2q2 = q2 * q2;
 800238e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002392:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002396:	f7fe fcad 	bl	8000cf4 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	677b      	str	r3, [r7, #116]	; 0x74
           float q2q3 = q2 * q3;
 800239e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023a2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80023a6:	f7fe fca5 	bl	8000cf4 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	673b      	str	r3, [r7, #112]	; 0x70
           float q2q4 = q2 * q4;
 80023ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80023b2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80023b6:	f7fe fc9d 	bl	8000cf4 <__aeabi_fmul>
 80023ba:	4603      	mov	r3, r0
 80023bc:	66fb      	str	r3, [r7, #108]	; 0x6c
           float q3q3 = q3 * q3;
 80023be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023c2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80023c6:	f7fe fc95 	bl	8000cf4 <__aeabi_fmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	66bb      	str	r3, [r7, #104]	; 0x68
           float q3q4 = q3 * q4;
 80023ce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80023d2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80023d6:	f7fe fc8d 	bl	8000cf4 <__aeabi_fmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	667b      	str	r3, [r7, #100]	; 0x64
           float q4q4 = q4 * q4;
 80023de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80023e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80023e6:	f7fe fc85 	bl	8000cf4 <__aeabi_fmul>
 80023ea:	4603      	mov	r3, r0
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60

           // Normalise accelerometer measurement
           norm = sqrtf(ax * ax + ay * ay + az * az);
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7fe fc7f 	bl	8000cf4 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f7fe fc79 	bl	8000cf4 <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	4620      	mov	r0, r4
 8002408:	f7fe fb6c 	bl	8000ae4 <__addsf3>
 800240c:	4603      	mov	r3, r0
 800240e:	461c      	mov	r4, r3
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fc6e 	bl	8000cf4 <__aeabi_fmul>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe fb61 	bl	8000ae4 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	4618      	mov	r0, r3
 8002426:	f005 f821 	bl	800746c <sqrtf>
 800242a:	65f8      	str	r0, [r7, #92]	; 0x5c
           if (norm == 0.0f) return; // handle NaN
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002432:	f7fe fdf3 	bl	800101c <__aeabi_fcmpeq>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	f041 8015 	bne.w	8003468 <MadgwickQuaternionUpdate+0x11d8>
           norm = 1.0f/norm;
 800243e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002440:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002444:	f7fe fd0a 	bl	8000e5c <__aeabi_fdiv>
 8002448:	4603      	mov	r3, r0
 800244a:	65fb      	str	r3, [r7, #92]	; 0x5c
           ax *= norm;
 800244c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7fe fc50 	bl	8000cf4 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]
           ay *= norm;
 8002458:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800245a:	68b8      	ldr	r0, [r7, #8]
 800245c:	f7fe fc4a 	bl	8000cf4 <__aeabi_fmul>
 8002460:	4603      	mov	r3, r0
 8002462:	60bb      	str	r3, [r7, #8]
           az *= norm;
 8002464:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fc44 	bl	8000cf4 <__aeabi_fmul>
 800246c:	4603      	mov	r3, r0
 800246e:	607b      	str	r3, [r7, #4]

           // Normalise magnetometer measurement
           norm = sqrtf(mx * mx + my * my + mz * mz);
 8002470:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002474:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002478:	f7fe fc3c 	bl	8000cf4 <__aeabi_fmul>
 800247c:	4603      	mov	r3, r0
 800247e:	461c      	mov	r4, r3
 8002480:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002484:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002488:	f7fe fc34 	bl	8000cf4 <__aeabi_fmul>
 800248c:	4603      	mov	r3, r0
 800248e:	4619      	mov	r1, r3
 8002490:	4620      	mov	r0, r4
 8002492:	f7fe fb27 	bl	8000ae4 <__addsf3>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800249e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80024a2:	f7fe fc27 	bl	8000cf4 <__aeabi_fmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7fe fb1a 	bl	8000ae4 <__addsf3>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 ffda 	bl	800746c <sqrtf>
 80024b8:	65f8      	str	r0, [r7, #92]	; 0x5c
           if (norm == 0.0f) return; // handle NaN
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80024c0:	f7fe fdac 	bl	800101c <__aeabi_fcmpeq>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 87d0 	bne.w	800346c <MadgwickQuaternionUpdate+0x11dc>
           norm = 1.0f/norm;
 80024cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80024d2:	f7fe fcc3 	bl	8000e5c <__aeabi_fdiv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	65fb      	str	r3, [r7, #92]	; 0x5c
           mx *= norm;
 80024da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024dc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80024e0:	f7fe fc08 	bl	8000cf4 <__aeabi_fmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
           my *= norm;
 80024ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024ec:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80024f0:	f7fe fc00 	bl	8000cf4 <__aeabi_fmul>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
           mz *= norm;
 80024fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024fc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002500:	f7fe fbf8 	bl	8000cf4 <__aeabi_fmul>
 8002504:	4603      	mov	r3, r0
 8002506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

           // Reference direction of Earth's magnetic field
           _2q1mx = 2.0f * q1 * mx;
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800250e:	4619      	mov	r1, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fae7 	bl	8000ae4 <__addsf3>
 8002516:	4603      	mov	r3, r0
 8002518:	4619      	mov	r1, r3
 800251a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800251e:	f7fe fbe9 	bl	8000cf4 <__aeabi_fmul>
 8002522:	4603      	mov	r3, r0
 8002524:	65bb      	str	r3, [r7, #88]	; 0x58
           _2q1my = 2.0f * q1 * my;
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	4619      	mov	r1, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fad9 	bl	8000ae4 <__addsf3>
 8002532:	4603      	mov	r3, r0
 8002534:	4619      	mov	r1, r3
 8002536:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800253a:	f7fe fbdb 	bl	8000cf4 <__aeabi_fmul>
 800253e:	4603      	mov	r3, r0
 8002540:	657b      	str	r3, [r7, #84]	; 0x54
           _2q1mz = 2.0f * q1 * mz;
 8002542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002546:	4619      	mov	r1, r3
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe facb 	bl	8000ae4 <__addsf3>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002556:	f7fe fbcd 	bl	8000cf4 <__aeabi_fmul>
 800255a:	4603      	mov	r3, r0
 800255c:	653b      	str	r3, [r7, #80]	; 0x50
           _2q2mx = 2.0f * q2 * mx;
 800255e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002562:	4619      	mov	r1, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fabd 	bl	8000ae4 <__addsf3>
 800256a:	4603      	mov	r3, r0
 800256c:	4619      	mov	r1, r3
 800256e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002572:	f7fe fbbf 	bl	8000cf4 <__aeabi_fmul>
 8002576:	4603      	mov	r3, r0
 8002578:	64fb      	str	r3, [r7, #76]	; 0x4c
           hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800257a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800257e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002582:	f7fe fbb7 	bl	8000cf4 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	461c      	mov	r4, r3
 800258a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800258e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002590:	f7fe fbb0 	bl	8000cf4 <__aeabi_fmul>
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f7fe faa1 	bl	8000ae0 <__aeabi_fsub>
 800259e:	4603      	mov	r3, r0
 80025a0:	461c      	mov	r4, r3
 80025a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025a8:	f7fe fba4 	bl	8000cf4 <__aeabi_fmul>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7fe fa97 	bl	8000ae4 <__addsf3>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461c      	mov	r4, r3
 80025ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80025bc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80025c0:	f7fe fb98 	bl	8000cf4 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7fe fa8b 	bl	8000ae4 <__addsf3>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461c      	mov	r4, r3
 80025d2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80025d6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80025da:	f7fe fb8b 	bl	8000cf4 <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb85 	bl	8000cf4 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7fe fa78 	bl	8000ae4 <__addsf3>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461c      	mov	r4, r3
 80025f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80025fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002600:	f7fe fb78 	bl	8000cf4 <__aeabi_fmul>
 8002604:	4603      	mov	r3, r0
 8002606:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fb72 	bl	8000cf4 <__aeabi_fmul>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	4620      	mov	r0, r4
 8002616:	f7fe fa65 	bl	8000ae4 <__addsf3>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002620:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002624:	f7fe fb66 	bl	8000cf4 <__aeabi_fmul>
 8002628:	4603      	mov	r3, r0
 800262a:	4619      	mov	r1, r3
 800262c:	4620      	mov	r0, r4
 800262e:	f7fe fa57 	bl	8000ae0 <__aeabi_fsub>
 8002632:	4603      	mov	r3, r0
 8002634:	461c      	mov	r4, r3
 8002636:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002638:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800263c:	f7fe fb5a 	bl	8000cf4 <__aeabi_fmul>
 8002640:	4603      	mov	r3, r0
 8002642:	4619      	mov	r1, r3
 8002644:	4620      	mov	r0, r4
 8002646:	f7fe fa4b 	bl	8000ae0 <__aeabi_fsub>
 800264a:	4603      	mov	r3, r0
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
           hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 800264e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002652:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002654:	f7fe fb4e 	bl	8000cf4 <__aeabi_fmul>
 8002658:	4603      	mov	r3, r0
 800265a:	461c      	mov	r4, r3
 800265c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002660:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002664:	f7fe fb46 	bl	8000cf4 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	4620      	mov	r0, r4
 800266e:	f7fe fa39 	bl	8000ae4 <__addsf3>
 8002672:	4603      	mov	r3, r0
 8002674:	461c      	mov	r4, r3
 8002676:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800267a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800267c:	f7fe fb3a 	bl	8000cf4 <__aeabi_fmul>
 8002680:	4603      	mov	r3, r0
 8002682:	4619      	mov	r1, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f7fe fa2b 	bl	8000ae0 <__aeabi_fsub>
 800268a:	4603      	mov	r3, r0
 800268c:	461c      	mov	r4, r3
 800268e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002694:	f7fe fb2e 	bl	8000cf4 <__aeabi_fmul>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4620      	mov	r0, r4
 800269e:	f7fe fa21 	bl	8000ae4 <__addsf3>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461c      	mov	r4, r3
 80026a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80026a8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80026ac:	f7fe fb22 	bl	8000cf4 <__aeabi_fmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4619      	mov	r1, r3
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7fe fa13 	bl	8000ae0 <__aeabi_fsub>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461c      	mov	r4, r3
 80026be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026c0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80026c4:	f7fe fb16 	bl	8000cf4 <__aeabi_fmul>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7fe fa09 	bl	8000ae4 <__addsf3>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461c      	mov	r4, r3
 80026d6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80026da:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80026de:	f7fe fb09 	bl	8000cf4 <__aeabi_fmul>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fb03 	bl	8000cf4 <__aeabi_fmul>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7fe f9f6 	bl	8000ae4 <__addsf3>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461c      	mov	r4, r3
 80026fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026fe:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002702:	f7fe faf7 	bl	8000cf4 <__aeabi_fmul>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe f9e8 	bl	8000ae0 <__aeabi_fsub>
 8002710:	4603      	mov	r3, r0
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
           _2bx = sqrtf(hx * hx + hy * hy);
 8002714:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002716:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002718:	f7fe faec 	bl	8000cf4 <__aeabi_fmul>
 800271c:	4603      	mov	r3, r0
 800271e:	461c      	mov	r4, r3
 8002720:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002722:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002724:	f7fe fae6 	bl	8000cf4 <__aeabi_fmul>
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	4620      	mov	r0, r4
 800272e:	f7fe f9d9 	bl	8000ae4 <__addsf3>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f004 fe99 	bl	800746c <sqrtf>
 800273a:	6438      	str	r0, [r7, #64]	; 0x40
           _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fad4 	bl	8000cf4 <__aeabi_fmul>
 800274c:	4603      	mov	r3, r0
 800274e:	461c      	mov	r4, r3
 8002750:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002754:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002756:	f7fe facd 	bl	8000cf4 <__aeabi_fmul>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	4620      	mov	r0, r4
 8002760:	f7fe f9c0 	bl	8000ae4 <__addsf3>
 8002764:	4603      	mov	r3, r0
 8002766:	461c      	mov	r4, r3
 8002768:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800276c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002770:	f7fe fac0 	bl	8000cf4 <__aeabi_fmul>
 8002774:	4603      	mov	r3, r0
 8002776:	4619      	mov	r1, r3
 8002778:	4620      	mov	r0, r4
 800277a:	f7fe f9b3 	bl	8000ae4 <__addsf3>
 800277e:	4603      	mov	r3, r0
 8002780:	461c      	mov	r4, r3
 8002782:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002786:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002788:	f7fe fab4 	bl	8000cf4 <__aeabi_fmul>
 800278c:	4603      	mov	r3, r0
 800278e:	4619      	mov	r1, r3
 8002790:	4620      	mov	r0, r4
 8002792:	f7fe f9a7 	bl	8000ae4 <__addsf3>
 8002796:	4603      	mov	r3, r0
 8002798:	461c      	mov	r4, r3
 800279a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800279c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80027a0:	f7fe faa8 	bl	8000cf4 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe f999 	bl	8000ae0 <__aeabi_fsub>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461c      	mov	r4, r3
 80027b2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80027b6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80027ba:	f7fe fa9b 	bl	8000cf4 <__aeabi_fmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fa95 	bl	8000cf4 <__aeabi_fmul>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4619      	mov	r1, r3
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7fe f988 	bl	8000ae4 <__addsf3>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461c      	mov	r4, r3
 80027d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027da:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80027de:	f7fe fa89 	bl	8000cf4 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fe f97a 	bl	8000ae0 <__aeabi_fsub>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461c      	mov	r4, r3
 80027f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80027f2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80027f6:	f7fe fa7d 	bl	8000cf4 <__aeabi_fmul>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
 80027fe:	4620      	mov	r0, r4
 8002800:	f7fe f970 	bl	8000ae4 <__addsf3>
 8002804:	4603      	mov	r3, r0
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
           _4bx = 2.0f * _2bx;
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	4619      	mov	r1, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe f969 	bl	8000ae4 <__addsf3>
 8002812:	4603      	mov	r3, r0
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
           _4bz = 2.0f * _2bz;
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	4619      	mov	r1, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f962 	bl	8000ae4 <__addsf3>
 8002820:	4603      	mov	r3, r0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34

           // Gradient decent algorithm corrective step
           s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002828:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282e:	4619      	mov	r1, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f957 	bl	8000ae4 <__addsf3>
 8002836:	4603      	mov	r3, r0
 8002838:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f94f 	bl	8000ae0 <__aeabi_fsub>
 8002842:	4603      	mov	r3, r0
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe f94a 	bl	8000ae0 <__aeabi_fsub>
 800284c:	4603      	mov	r3, r0
 800284e:	4619      	mov	r1, r3
 8002850:	4620      	mov	r0, r4
 8002852:	f7fe fa4f 	bl	8000cf4 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	461c      	mov	r4, r3
 800285a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285e:	4619      	mov	r1, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe f93f 	bl	8000ae4 <__addsf3>
 8002866:	4603      	mov	r3, r0
 8002868:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe f939 	bl	8000ae4 <__addsf3>
 8002872:	4603      	mov	r3, r0
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f932 	bl	8000ae0 <__aeabi_fsub>
 800287c:	4603      	mov	r3, r0
 800287e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa36 	bl	8000cf4 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	4619      	mov	r1, r3
 800288c:	4620      	mov	r0, r4
 800288e:	f7fe f929 	bl	8000ae4 <__addsf3>
 8002892:	4603      	mov	r3, r0
 8002894:	461c      	mov	r4, r3
 8002896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800289a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800289c:	f7fe fa2a 	bl	8000cf4 <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461d      	mov	r5, r3
 80028a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80028aa:	f7fe f919 	bl	8000ae0 <__aeabi_fsub>
 80028ae:	4603      	mov	r3, r0
 80028b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f914 	bl	8000ae0 <__aeabi_fsub>
 80028b8:	4603      	mov	r3, r0
 80028ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fa19 	bl	8000cf4 <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461e      	mov	r6, r3
 80028c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80028ca:	f7fe f909 	bl	8000ae0 <__aeabi_fsub>
 80028ce:	4603      	mov	r3, r0
 80028d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fa0e 	bl	8000cf4 <__aeabi_fmul>
 80028d8:	4603      	mov	r3, r0
 80028da:	4619      	mov	r1, r3
 80028dc:	4630      	mov	r0, r6
 80028de:	f7fe f901 	bl	8000ae4 <__addsf3>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f8f9 	bl	8000ae0 <__aeabi_fsub>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4628      	mov	r0, r5
 80028f4:	f7fe f9fe 	bl	8000cf4 <__aeabi_fmul>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4619      	mov	r1, r3
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7fe f8ef 	bl	8000ae0 <__aeabi_fsub>
 8002902:	4603      	mov	r3, r0
 8002904:	461c      	mov	r4, r3
 8002906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800290c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f9ef 	bl	8000cf4 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	461d      	mov	r5, r3
 800291a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800291e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002920:	f7fe f9e8 	bl	8000cf4 <__aeabi_fmul>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	4628      	mov	r0, r5
 800292a:	f7fe f8db 	bl	8000ae4 <__addsf3>
 800292e:	4603      	mov	r3, r0
 8002930:	461d      	mov	r5, r3
 8002932:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002934:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002936:	f7fe f8d3 	bl	8000ae0 <__aeabi_fsub>
 800293a:	4603      	mov	r3, r0
 800293c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f9d8 	bl	8000cf4 <__aeabi_fmul>
 8002944:	4603      	mov	r3, r0
 8002946:	461e      	mov	r6, r3
 8002948:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800294a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800294e:	f7fe f8c9 	bl	8000ae4 <__addsf3>
 8002952:	4603      	mov	r3, r0
 8002954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f9cc 	bl	8000cf4 <__aeabi_fmul>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	4630      	mov	r0, r6
 8002962:	f7fe f8bf 	bl	8000ae4 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f8b7 	bl	8000ae0 <__aeabi_fsub>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	4628      	mov	r0, r5
 8002978:	f7fe f9bc 	bl	8000cf4 <__aeabi_fmul>
 800297c:	4603      	mov	r3, r0
 800297e:	4619      	mov	r1, r3
 8002980:	4620      	mov	r0, r4
 8002982:	f7fe f8af 	bl	8000ae4 <__addsf3>
 8002986:	4603      	mov	r3, r0
 8002988:	461c      	mov	r4, r3
 800298a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800298e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002990:	f7fe f9b0 	bl	8000cf4 <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	461d      	mov	r5, r3
 8002998:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800299a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800299c:	f7fe f8a2 	bl	8000ae4 <__addsf3>
 80029a0:	4603      	mov	r3, r0
 80029a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe f9a5 	bl	8000cf4 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461e      	mov	r6, r3
 80029ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80029b0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80029b4:	f7fe f894 	bl	8000ae0 <__aeabi_fsub>
 80029b8:	4603      	mov	r3, r0
 80029ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe f88f 	bl	8000ae0 <__aeabi_fsub>
 80029c2:	4603      	mov	r3, r0
 80029c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f994 	bl	8000cf4 <__aeabi_fmul>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4630      	mov	r0, r6
 80029d2:	f7fe f887 	bl	8000ae4 <__addsf3>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f87f 	bl	8000ae0 <__aeabi_fsub>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4628      	mov	r0, r5
 80029e8:	f7fe f984 	bl	8000cf4 <__aeabi_fmul>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4619      	mov	r1, r3
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7fe f877 	bl	8000ae4 <__addsf3>
 80029f6:	4603      	mov	r3, r0
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
           s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	4619      	mov	r1, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f870 	bl	8000ae4 <__addsf3>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f868 	bl	8000ae0 <__aeabi_fsub>
 8002a10:	4603      	mov	r3, r0
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe f863 	bl	8000ae0 <__aeabi_fsub>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f967 	bl	8000cf4 <__aeabi_fmul>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461c      	mov	r4, r3
 8002a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f857 	bl	8000ae4 <__addsf3>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe f851 	bl	8000ae4 <__addsf3>
 8002a42:	4603      	mov	r3, r0
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f84a 	bl	8000ae0 <__aeabi_fsub>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f94e 	bl	8000cf4 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7fe f841 	bl	8000ae4 <__addsf3>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461c      	mov	r4, r3
 8002a66:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a6a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002a6e:	f7fe f941 	bl	8000cf4 <__aeabi_fmul>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461d      	mov	r5, r3
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f832 	bl	8000ae4 <__addsf3>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4619      	mov	r1, r3
 8002a84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a88:	f7fe f82a 	bl	8000ae0 <__aeabi_fsub>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461e      	mov	r6, r3
 8002a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a92:	4619      	mov	r1, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f825 	bl	8000ae4 <__addsf3>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f7fe f81e 	bl	8000ae0 <__aeabi_fsub>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f819 	bl	8000ae0 <__aeabi_fsub>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7fe f91e 	bl	8000cf4 <__aeabi_fmul>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7fe f80f 	bl	8000ae0 <__aeabi_fsub>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002aca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002acc:	f7fe f912 	bl	8000cf4 <__aeabi_fmul>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ad6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002ada:	f7fe f801 	bl	8000ae0 <__aeabi_fsub>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fffc 	bl	8000ae0 <__aeabi_fsub>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe f901 	bl	8000cf4 <__aeabi_fmul>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461e      	mov	r6, r3
 8002af6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002af8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002afa:	f7fd fff1 	bl	8000ae0 <__aeabi_fsub>
 8002afe:	4603      	mov	r3, r0
 8002b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f8f6 	bl	8000cf4 <__aeabi_fmul>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	f7fd ffe9 	bl	8000ae4 <__addsf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd ffe1 	bl	8000ae0 <__aeabi_fsub>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4619      	mov	r1, r3
 8002b22:	4628      	mov	r0, r5
 8002b24:	f7fe f8e6 	bl	8000cf4 <__aeabi_fmul>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7fd ffd9 	bl	8000ae4 <__addsf3>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461c      	mov	r4, r3
 8002b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b3c:	f7fe f8da 	bl	8000cf4 <__aeabi_fmul>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461d      	mov	r5, r3
 8002b44:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002b48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b4a:	f7fe f8d3 	bl	8000cf4 <__aeabi_fmul>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4619      	mov	r1, r3
 8002b52:	4628      	mov	r0, r5
 8002b54:	f7fd ffc6 	bl	8000ae4 <__addsf3>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b5e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002b60:	f7fd ffbe 	bl	8000ae0 <__aeabi_fsub>
 8002b64:	4603      	mov	r3, r0
 8002b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f8c3 	bl	8000cf4 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461e      	mov	r6, r3
 8002b72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b74:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b78:	f7fd ffb4 	bl	8000ae4 <__addsf3>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f8b7 	bl	8000cf4 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f7fd ffaa 	bl	8000ae4 <__addsf3>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd ffa2 	bl	8000ae0 <__aeabi_fsub>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f7fe f8a7 	bl	8000cf4 <__aeabi_fmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fd ff9a 	bl	8000ae4 <__addsf3>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461c      	mov	r4, r3
 8002bb4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002bb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bba:	f7fe f89b 	bl	8000cf4 <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461d      	mov	r5, r3
 8002bc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002bc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc8:	f7fe f894 	bl	8000cf4 <__aeabi_fmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f7fd ff85 	bl	8000ae0 <__aeabi_fsub>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461d      	mov	r5, r3
 8002bda:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002bdc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002bde:	f7fd ff81 	bl	8000ae4 <__addsf3>
 8002be2:	4603      	mov	r3, r0
 8002be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f884 	bl	8000cf4 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461e      	mov	r6, r3
 8002bf0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002bf2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002bf6:	f7fd ff73 	bl	8000ae0 <__aeabi_fsub>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd ff6e 	bl	8000ae0 <__aeabi_fsub>
 8002c04:	4603      	mov	r3, r0
 8002c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe f873 	bl	8000cf4 <__aeabi_fmul>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4619      	mov	r1, r3
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7fd ff66 	bl	8000ae4 <__addsf3>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd ff5e 	bl	8000ae0 <__aeabi_fsub>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f7fe f863 	bl	8000cf4 <__aeabi_fmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4619      	mov	r1, r3
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7fd ff56 	bl	8000ae4 <__addsf3>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
           s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c40:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	4619      	mov	r1, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd ff4b 	bl	8000ae4 <__addsf3>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd ff43 	bl	8000ae0 <__aeabi_fsub>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd ff3e 	bl	8000ae0 <__aeabi_fsub>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4619      	mov	r1, r3
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7fe f843 	bl	8000cf4 <__aeabi_fmul>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461c      	mov	r4, r3
 8002c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c76:	4619      	mov	r1, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd ff33 	bl	8000ae4 <__addsf3>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd ff2d 	bl	8000ae4 <__addsf3>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd ff26 	bl	8000ae0 <__aeabi_fsub>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f82a 	bl	8000cf4 <__aeabi_fmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7fd ff1d 	bl	8000ae4 <__addsf3>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461c      	mov	r4, r3
 8002cae:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002cb2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002cb6:	f7fe f81d 	bl	8000cf4 <__aeabi_fmul>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd ff0e 	bl	8000ae4 <__addsf3>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002cd0:	f7fd ff06 	bl	8000ae0 <__aeabi_fsub>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461e      	mov	r6, r3
 8002cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd ff01 	bl	8000ae4 <__addsf3>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f7fd fefa 	bl	8000ae0 <__aeabi_fsub>
 8002cec:	4603      	mov	r3, r0
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fef5 	bl	8000ae0 <__aeabi_fsub>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f7fd fffa 	bl	8000cf4 <__aeabi_fmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4619      	mov	r1, r3
 8002d04:	4620      	mov	r0, r4
 8002d06:	f7fd feeb 	bl	8000ae0 <__aeabi_fsub>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ffeb 	bl	8000cf4 <__aeabi_fmul>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461d      	mov	r5, r3
 8002d22:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002d26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d28:	f7fd ffe4 	bl	8000cf4 <__aeabi_fmul>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7fd fed5 	bl	8000ae0 <__aeabi_fsub>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461d      	mov	r5, r3
 8002d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d3c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002d40:	f7fd fece 	bl	8000ae0 <__aeabi_fsub>
 8002d44:	4603      	mov	r3, r0
 8002d46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fec9 	bl	8000ae0 <__aeabi_fsub>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd ffce 	bl	8000cf4 <__aeabi_fmul>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461e      	mov	r6, r3
 8002d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d60:	f7fd febe 	bl	8000ae0 <__aeabi_fsub>
 8002d64:	4603      	mov	r3, r0
 8002d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd ffc3 	bl	8000cf4 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7fd feb6 	bl	8000ae4 <__addsf3>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd feae 	bl	8000ae0 <__aeabi_fsub>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7fd ffb3 	bl	8000cf4 <__aeabi_fmul>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7fd fea6 	bl	8000ae4 <__addsf3>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461c      	mov	r4, r3
 8002d9c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002da0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002da2:	f7fd ffa7 	bl	8000cf4 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461d      	mov	r5, r3
 8002daa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002dae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002db0:	f7fd ffa0 	bl	8000cf4 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	4628      	mov	r0, r5
 8002dba:	f7fd fe93 	bl	8000ae4 <__addsf3>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002dc4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002dc6:	f7fd fe8b 	bl	8000ae0 <__aeabi_fsub>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd ff90 	bl	8000cf4 <__aeabi_fmul>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461e      	mov	r6, r3
 8002dd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002dda:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002dde:	f7fd fe81 	bl	8000ae4 <__addsf3>
 8002de2:	4603      	mov	r3, r0
 8002de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd ff84 	bl	8000cf4 <__aeabi_fmul>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4619      	mov	r1, r3
 8002df0:	4630      	mov	r0, r6
 8002df2:	f7fd fe77 	bl	8000ae4 <__addsf3>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fe6f 	bl	8000ae0 <__aeabi_fsub>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd ff74 	bl	8000cf4 <__aeabi_fmul>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7fd fe67 	bl	8000ae4 <__addsf3>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461c      	mov	r4, r3
 8002e1a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002e1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e20:	f7fd ff68 	bl	8000cf4 <__aeabi_fmul>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461d      	mov	r5, r3
 8002e28:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e2e:	f7fd ff61 	bl	8000cf4 <__aeabi_fmul>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7fd fe52 	bl	8000ae0 <__aeabi_fsub>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461d      	mov	r5, r3
 8002e40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002e42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002e44:	f7fd fe4e 	bl	8000ae4 <__addsf3>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd ff51 	bl	8000cf4 <__aeabi_fmul>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461e      	mov	r6, r3
 8002e56:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e58:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002e5c:	f7fd fe40 	bl	8000ae0 <__aeabi_fsub>
 8002e60:	4603      	mov	r3, r0
 8002e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fe3b 	bl	8000ae0 <__aeabi_fsub>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd ff40 	bl	8000cf4 <__aeabi_fmul>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f7fd fe33 	bl	8000ae4 <__addsf3>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fe2b 	bl	8000ae0 <__aeabi_fsub>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7fd ff30 	bl	8000cf4 <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7fd fe23 	bl	8000ae4 <__addsf3>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
           s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fe1c 	bl	8000ae4 <__addsf3>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fe14 	bl	8000ae0 <__aeabi_fsub>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fe0f 	bl	8000ae0 <__aeabi_fsub>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ff13 	bl	8000cf4 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fe03 	bl	8000ae4 <__addsf3>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd fdfd 	bl	8000ae4 <__addsf3>
 8002eea:	4603      	mov	r3, r0
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fdf6 	bl	8000ae0 <__aeabi_fsub>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fefa 	bl	8000cf4 <__aeabi_fmul>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4619      	mov	r1, r3
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7fd fded 	bl	8000ae4 <__addsf3>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f14:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd feeb 	bl	8000cf4 <__aeabi_fmul>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461d      	mov	r5, r3
 8002f22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002f26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f28:	f7fd fee4 	bl	8000cf4 <__aeabi_fmul>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7fd fdd7 	bl	8000ae4 <__addsf3>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461d      	mov	r5, r3
 8002f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f3c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002f40:	f7fd fdce 	bl	8000ae0 <__aeabi_fsub>
 8002f44:	4603      	mov	r3, r0
 8002f46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fdc9 	bl	8000ae0 <__aeabi_fsub>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fece 	bl	8000cf4 <__aeabi_fmul>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461e      	mov	r6, r3
 8002f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f60:	f7fd fdbe 	bl	8000ae0 <__aeabi_fsub>
 8002f64:	4603      	mov	r3, r0
 8002f66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fec3 	bl	8000cf4 <__aeabi_fmul>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4619      	mov	r1, r3
 8002f72:	4630      	mov	r0, r6
 8002f74:	f7fd fdb6 	bl	8000ae4 <__addsf3>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fdae 	bl	8000ae0 <__aeabi_fsub>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f7fd feb3 	bl	8000cf4 <__aeabi_fmul>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4619      	mov	r1, r3
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7fd fda6 	bl	8000ae4 <__addsf3>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461c      	mov	r4, r3
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fa2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fea4 	bl	8000cf4 <__aeabi_fmul>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461d      	mov	r5, r3
 8002fb0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fb6:	f7fd fe9d 	bl	8000cf4 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f7fd fd90 	bl	8000ae4 <__addsf3>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002fca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fcc:	f7fd fd88 	bl	8000ae0 <__aeabi_fsub>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fe8d 	bl	8000cf4 <__aeabi_fmul>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461e      	mov	r6, r3
 8002fde:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002fe0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002fe4:	f7fd fd7e 	bl	8000ae4 <__addsf3>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fe81 	bl	8000cf4 <__aeabi_fmul>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f7fd fd74 	bl	8000ae4 <__addsf3>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fd6c 	bl	8000ae0 <__aeabi_fsub>
 8003008:	4603      	mov	r3, r0
 800300a:	4619      	mov	r1, r3
 800300c:	4628      	mov	r0, r5
 800300e:	f7fd fe71 	bl	8000cf4 <__aeabi_fmul>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	4620      	mov	r0, r4
 8003018:	f7fd fd64 	bl	8000ae4 <__addsf3>
 800301c:	4603      	mov	r3, r0
 800301e:	461c      	mov	r4, r3
 8003020:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003024:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003026:	f7fd fe65 	bl	8000cf4 <__aeabi_fmul>
 800302a:	4603      	mov	r3, r0
 800302c:	461d      	mov	r5, r3
 800302e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003030:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003032:	f7fd fd57 	bl	8000ae4 <__addsf3>
 8003036:	4603      	mov	r3, r0
 8003038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fe5a 	bl	8000cf4 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	461e      	mov	r6, r3
 8003044:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003046:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800304a:	f7fd fd49 	bl	8000ae0 <__aeabi_fsub>
 800304e:	4603      	mov	r3, r0
 8003050:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fd44 	bl	8000ae0 <__aeabi_fsub>
 8003058:	4603      	mov	r3, r0
 800305a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fe49 	bl	8000cf4 <__aeabi_fmul>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	4630      	mov	r0, r6
 8003068:	f7fd fd3c 	bl	8000ae4 <__addsf3>
 800306c:	4603      	mov	r3, r0
 800306e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fd34 	bl	8000ae0 <__aeabi_fsub>
 8003078:	4603      	mov	r3, r0
 800307a:	4619      	mov	r1, r3
 800307c:	4628      	mov	r0, r5
 800307e:	f7fd fe39 	bl	8000cf4 <__aeabi_fmul>
 8003082:	4603      	mov	r3, r0
 8003084:	4619      	mov	r1, r3
 8003086:	4620      	mov	r0, r4
 8003088:	f7fd fd2c 	bl	8000ae4 <__addsf3>
 800308c:	4603      	mov	r3, r0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
           norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8003090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003094:	f7fd fe2e 	bl	8000cf4 <__aeabi_fmul>
 8003098:	4603      	mov	r3, r0
 800309a:	461c      	mov	r4, r3
 800309c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800309e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a0:	f7fd fe28 	bl	8000cf4 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4619      	mov	r1, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7fd fd1b 	bl	8000ae4 <__addsf3>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461c      	mov	r4, r3
 80030b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b6:	f7fd fe1d 	bl	8000cf4 <__aeabi_fmul>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4619      	mov	r1, r3
 80030be:	4620      	mov	r0, r4
 80030c0:	f7fd fd10 	bl	8000ae4 <__addsf3>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461c      	mov	r4, r3
 80030c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030cc:	f7fd fe12 	bl	8000cf4 <__aeabi_fmul>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4619      	mov	r1, r3
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd fd05 	bl	8000ae4 <__addsf3>
 80030da:	4603      	mov	r3, r0
 80030dc:	4618      	mov	r0, r3
 80030de:	f004 f9c5 	bl	800746c <sqrtf>
 80030e2:	65f8      	str	r0, [r7, #92]	; 0x5c
           norm = 1.0f/norm;
 80030e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80030e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030ea:	f7fd feb7 	bl	8000e5c <__aeabi_fdiv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
           s1 *= norm;
 80030f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80030f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f6:	f7fd fdfd 	bl	8000cf4 <__aeabi_fmul>
 80030fa:	4603      	mov	r3, r0
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
           s2 *= norm;
 80030fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003102:	f7fd fdf7 	bl	8000cf4 <__aeabi_fmul>
 8003106:	4603      	mov	r3, r0
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
           s3 *= norm;
 800310a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800310c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310e:	f7fd fdf1 	bl	8000cf4 <__aeabi_fmul>
 8003112:	4603      	mov	r3, r0
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
           s4 *= norm;
 8003116:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800311a:	f7fd fdeb 	bl	8000cf4 <__aeabi_fmul>
 800311e:	4603      	mov	r3, r0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24

           // Compute rate of change of quaternion
           qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8003122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003126:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fde1 	bl	8000cf4 <__aeabi_fmul>
 8003132:	4603      	mov	r3, r0
 8003134:	461c      	mov	r4, r3
 8003136:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800313a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800313e:	f7fd fdd9 	bl	8000cf4 <__aeabi_fmul>
 8003142:	4603      	mov	r3, r0
 8003144:	4619      	mov	r1, r3
 8003146:	4620      	mov	r0, r4
 8003148:	f7fd fcca 	bl	8000ae0 <__aeabi_fsub>
 800314c:	4603      	mov	r3, r0
 800314e:	461c      	mov	r4, r3
 8003150:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8003154:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003158:	f7fd fdcc 	bl	8000cf4 <__aeabi_fmul>
 800315c:	4603      	mov	r3, r0
 800315e:	4619      	mov	r1, r3
 8003160:	4620      	mov	r0, r4
 8003162:	f7fd fcbd 	bl	8000ae0 <__aeabi_fsub>
 8003166:	4603      	mov	r3, r0
 8003168:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fdc1 	bl	8000cf4 <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f957 	bl	8000428 <__aeabi_f2d>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003180:	f7fd f952 	bl	8000428 <__aeabi_f2d>
 8003184:	a3bc      	add	r3, pc, #752	; (adr r3, 8003478 <MadgwickQuaternionUpdate+0x11e8>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd f9a5 	bl	80004d8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	f7fc ffe7 	bl	8000168 <__aeabi_dsub>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f7fd fc49 	bl	8000a38 <__aeabi_d2f>
 80031a6:	4603      	mov	r3, r0
 80031a8:	623b      	str	r3, [r7, #32]
           qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80031b0:	f7fd fda0 	bl	8000cf4 <__aeabi_fmul>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461c      	mov	r4, r3
 80031b8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80031bc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80031c0:	f7fd fd98 	bl	8000cf4 <__aeabi_fmul>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4619      	mov	r1, r3
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7fd fc8b 	bl	8000ae4 <__addsf3>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461c      	mov	r4, r3
 80031d2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80031d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80031da:	f7fd fd8b 	bl	8000cf4 <__aeabi_fmul>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7fd fc7c 	bl	8000ae0 <__aeabi_fsub>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fd80 	bl	8000cf4 <__aeabi_fmul>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f916 	bl	8000428 <__aeabi_f2d>
 80031fc:	4604      	mov	r4, r0
 80031fe:	460d      	mov	r5, r1
 8003200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003202:	f7fd f911 	bl	8000428 <__aeabi_f2d>
 8003206:	a39c      	add	r3, pc, #624	; (adr r3, 8003478 <MadgwickQuaternionUpdate+0x11e8>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f7fd f964 	bl	80004d8 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fc ffa6 	bl	8000168 <__aeabi_dsub>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fc08 	bl	8000a38 <__aeabi_d2f>
 8003228:	4603      	mov	r3, r0
 800322a:	61fb      	str	r3, [r7, #28]
           qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 800322c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8003230:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003234:	f7fd fd5e 	bl	8000cf4 <__aeabi_fmul>
 8003238:	4603      	mov	r3, r0
 800323a:	461c      	mov	r4, r3
 800323c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8003240:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003244:	f7fd fd56 	bl	8000cf4 <__aeabi_fmul>
 8003248:	4603      	mov	r3, r0
 800324a:	4619      	mov	r1, r3
 800324c:	4620      	mov	r0, r4
 800324e:	f7fd fc47 	bl	8000ae0 <__aeabi_fsub>
 8003252:	4603      	mov	r3, r0
 8003254:	461c      	mov	r4, r3
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800325c:	f7fd fd4a 	bl	8000cf4 <__aeabi_fmul>
 8003260:	4603      	mov	r3, r0
 8003262:	4619      	mov	r1, r3
 8003264:	4620      	mov	r0, r4
 8003266:	f7fd fc3d 	bl	8000ae4 <__addsf3>
 800326a:	4603      	mov	r3, r0
 800326c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd3f 	bl	8000cf4 <__aeabi_fmul>
 8003276:	4603      	mov	r3, r0
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f8d5 	bl	8000428 <__aeabi_f2d>
 800327e:	4604      	mov	r4, r0
 8003280:	460d      	mov	r5, r1
 8003282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003284:	f7fd f8d0 	bl	8000428 <__aeabi_f2d>
 8003288:	a37b      	add	r3, pc, #492	; (adr r3, 8003478 <MadgwickQuaternionUpdate+0x11e8>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f923 	bl	80004d8 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f7fc ff65 	bl	8000168 <__aeabi_dsub>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fd fbc7 	bl	8000a38 <__aeabi_d2f>
 80032aa:	4603      	mov	r3, r0
 80032ac:	61bb      	str	r3, [r7, #24]
           qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 80032ae:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80032b2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80032b6:	f7fd fd1d 	bl	8000cf4 <__aeabi_fmul>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461c      	mov	r4, r3
 80032be:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80032c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80032c6:	f7fd fd15 	bl	8000cf4 <__aeabi_fmul>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4619      	mov	r1, r3
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7fd fc08 	bl	8000ae4 <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461c      	mov	r4, r3
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80032de:	f7fd fd09 	bl	8000cf4 <__aeabi_fmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7fd fbfa 	bl	8000ae0 <__aeabi_fsub>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd fcfe 	bl	8000cf4 <__aeabi_fmul>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f894 	bl	8000428 <__aeabi_f2d>
 8003300:	4604      	mov	r4, r0
 8003302:	460d      	mov	r5, r1
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f7fd f88f 	bl	8000428 <__aeabi_f2d>
 800330a:	a35b      	add	r3, pc, #364	; (adr r3, 8003478 <MadgwickQuaternionUpdate+0x11e8>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f8e2 	bl	80004d8 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fc ff24 	bl	8000168 <__aeabi_dsub>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fb86 	bl	8000a38 <__aeabi_d2f>
 800332c:	4603      	mov	r3, r0
 800332e:	617b      	str	r3, [r7, #20]

           // Integrate to yield quaternion
           q1 += qDot1 * deltat;
 8003330:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8003334:	6a38      	ldr	r0, [r7, #32]
 8003336:	f7fd fcdd 	bl	8000cf4 <__aeabi_fmul>
 800333a:	4603      	mov	r3, r0
 800333c:	4619      	mov	r1, r3
 800333e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003342:	f7fd fbcf 	bl	8000ae4 <__addsf3>
 8003346:	4603      	mov	r3, r0
 8003348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
           q2 += qDot2 * deltat;
 800334c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8003350:	69f8      	ldr	r0, [r7, #28]
 8003352:	f7fd fccf 	bl	8000cf4 <__aeabi_fmul>
 8003356:	4603      	mov	r3, r0
 8003358:	4619      	mov	r1, r3
 800335a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800335e:	f7fd fbc1 	bl	8000ae4 <__addsf3>
 8003362:	4603      	mov	r3, r0
 8003364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
           q3 += qDot3 * deltat;
 8003368:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800336c:	69b8      	ldr	r0, [r7, #24]
 800336e:	f7fd fcc1 	bl	8000cf4 <__aeabi_fmul>
 8003372:	4603      	mov	r3, r0
 8003374:	4619      	mov	r1, r3
 8003376:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800337a:	f7fd fbb3 	bl	8000ae4 <__addsf3>
 800337e:	4603      	mov	r3, r0
 8003380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
           q4 += qDot4 * deltat;
 8003384:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8003388:	6978      	ldr	r0, [r7, #20]
 800338a:	f7fd fcb3 	bl	8000cf4 <__aeabi_fmul>
 800338e:	4603      	mov	r3, r0
 8003390:	4619      	mov	r1, r3
 8003392:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003396:	f7fd fba5 	bl	8000ae4 <__addsf3>
 800339a:	4603      	mov	r3, r0
 800339c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
           norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80033a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80033a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80033a8:	f7fd fca4 	bl	8000cf4 <__aeabi_fmul>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461c      	mov	r4, r3
 80033b0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80033b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80033b8:	f7fd fc9c 	bl	8000cf4 <__aeabi_fmul>
 80033bc:	4603      	mov	r3, r0
 80033be:	4619      	mov	r1, r3
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7fd fb8f 	bl	8000ae4 <__addsf3>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461c      	mov	r4, r3
 80033ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80033d2:	f7fd fc8f 	bl	8000cf4 <__aeabi_fmul>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4619      	mov	r1, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f7fd fb82 	bl	8000ae4 <__addsf3>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461c      	mov	r4, r3
 80033e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80033e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80033ec:	f7fd fc82 	bl	8000cf4 <__aeabi_fmul>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4619      	mov	r1, r3
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7fd fb75 	bl	8000ae4 <__addsf3>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 f835 	bl	800746c <sqrtf>
 8003402:	65f8      	str	r0, [r7, #92]	; 0x5c
           norm = 1.0f/norm;
 8003404:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003406:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800340a:	f7fd fd27 	bl	8000e5c <__aeabi_fdiv>
 800340e:	4603      	mov	r3, r0
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
           q[0] = q1 * norm;
 8003412:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003414:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003418:	f7fd fc6c 	bl	8000cf4 <__aeabi_fmul>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003424:	601a      	str	r2, [r3, #0]
           q[1] = q2 * norm;
 8003426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800342a:	1d1c      	adds	r4, r3, #4
 800342c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800342e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003432:	f7fd fc5f 	bl	8000cf4 <__aeabi_fmul>
 8003436:	4603      	mov	r3, r0
 8003438:	6023      	str	r3, [r4, #0]
           q[2] = q3 * norm;
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800343e:	f103 0408 	add.w	r4, r3, #8
 8003442:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003444:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003448:	f7fd fc54 	bl	8000cf4 <__aeabi_fmul>
 800344c:	4603      	mov	r3, r0
 800344e:	6023      	str	r3, [r4, #0]
           q[3] = q4 * norm;
 8003450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003454:	f103 040c 	add.w	r4, r3, #12
 8003458:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800345a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800345e:	f7fd fc49 	bl	8000cf4 <__aeabi_fmul>
 8003462:	4603      	mov	r3, r0
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	e002      	b.n	800346e <MadgwickQuaternionUpdate+0x11de>
           if (norm == 0.0f) return; // handle NaN
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <MadgwickQuaternionUpdate+0x11de>
           if (norm == 0.0f) return; // handle NaN
 800346c:	bf00      	nop

        }
 800346e:	37b4      	adds	r7, #180	; 0xb4
 8003470:	46bd      	mov	sp, r7
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003474:	f3af 8000 	nop.w
 8003478:	2617c1be 	.word	0x2617c1be
 800347c:	3fed0553 	.word	0x3fed0553

08003480 <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char * string)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fc fe61 	bl	8000150 <strlen>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 1000);
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	b29a      	uxth	r2, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4803      	ldr	r0, [pc, #12]	; (80034ac <send_uart+0x2c>)
 800349e:	f003 f97f 	bl	80067a0 <HAL_UART_Transmit>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000178 	.word	0x20000178

080034b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	b0bf      	sub	sp, #252	; 0xfc
 80034b6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	char msg[90];
	float ax, ay, az, gx, gy, gz, mx, my, mz; // variables to hold latest sensor data values
	float yaw, pitch, roll;
	float Now = 0.0;
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	MPU9250_t MyMPU = { {1.0,0.0,0.0,0.0}, 0.0, {0.0,0.0,0.0}, 0 };
 80034c0:	f107 0310 	add.w	r3, r7, #16
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f005 fb41 	bl	8008b50 <memset>
 80034ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034d2:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034d4:	f000 ff10 	bl	80042f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034d8:	f000 fb9a 	bl	8003c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034dc:	f000 fc92 	bl	8003e04 <MX_GPIO_Init>
  MX_DMA_Init();
 80034e0:	f000 fc72 	bl	8003dc8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034e4:	f000 fc46 	bl	8003d74 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80034e8:	f000 fc0e 	bl	8003d08 <MX_SPI1_Init>
  MX_CAN_Init();
 80034ec:	f000 fbd6 	bl	8003c9c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80034f0:	2201      	movs	r2, #1
 80034f2:	2101      	movs	r1, #1
 80034f4:	481b      	ldr	r0, [pc, #108]	; (8003564 <main+0xb4>)
 80034f6:	f001 ff53 	bl	80053a0 <HAL_GPIO_WritePin>

    uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 80034fa:	2175      	movs	r1, #117	; 0x75
 80034fc:	2068      	movs	r0, #104	; 0x68
 80034fe:	f7fd fe27 	bl	8001150 <readByte>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    if(c == 0x71){
 8003508:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800350c:	2b71      	cmp	r3, #113	; 0x71
 800350e:	d135      	bne.n	800357c <main+0xcc>
  	  sprintf(msg, "MPU9250 start, Address = %x \r\n", c);
 8003510:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8003514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003518:	4913      	ldr	r1, [pc, #76]	; (8003568 <main+0xb8>)
 800351a:	4618      	mov	r0, r3
 800351c:	f005 fb20 	bl	8008b60 <siprintf>
  	  send_uart(msg);
 8003520:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ffab 	bl	8003480 <send_uart>

  	  MPU9250SelfTest(SelfTest);
 800352a:	4810      	ldr	r0, [pc, #64]	; (800356c <main+0xbc>)
 800352c:	f7fe fb64 	bl	8001bf8 <MPU9250SelfTest>
  	  HAL_Delay(1000);
 8003530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003534:	f000 ff42 	bl	80043bc <HAL_Delay>
  	  calibrateMPU9250(gyroBias, accelBias);
 8003538:	490d      	ldr	r1, [pc, #52]	; (8003570 <main+0xc0>)
 800353a:	480e      	ldr	r0, [pc, #56]	; (8003574 <main+0xc4>)
 800353c:	f7fe f8bc 	bl	80016b8 <calibrateMPU9250>
  	  HAL_Delay(1000);
 8003540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003544:	f000 ff3a 	bl	80043bc <HAL_Delay>
  	  initMPU9250();
 8003548:	f7fe f836 	bl	80015b8 <initMPU9250>
  	  HAL_Delay(1000);
 800354c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003550:	f000 ff34 	bl	80043bc <HAL_Delay>
  	  initAK8963(magCalibration);
 8003554:	4808      	ldr	r0, [pc, #32]	; (8003578 <main+0xc8>)
 8003556:	f7fd ff81 	bl	800145c <initAK8963>
  	  HAL_Delay(1000);
 800355a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800355e:	f000 ff2d 	bl	80043bc <HAL_Delay>
 8003562:	e016      	b.n	8003592 <main+0xe2>
 8003564:	40010c00 	.word	0x40010c00
 8003568:	0800948c 	.word	0x0800948c
 800356c:	200000e0 	.word	0x200000e0
 8003570:	200000c8 	.word	0x200000c8
 8003574:	200000bc 	.word	0x200000bc
 8003578:	200000a4 	.word	0x200000a4

    }else
    {
  	  sprintf(msg, "MPU9250 fail \r\n");
 800357c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003580:	49bb      	ldr	r1, [pc, #748]	; (8003870 <main+0x3c0>)
 8003582:	4618      	mov	r0, r3
 8003584:	f005 faec 	bl	8008b60 <siprintf>
  	  send_uart(msg);
 8003588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff77 	bl	8003480 <send_uart>
    }

    c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 8003592:	2100      	movs	r1, #0
 8003594:	200c      	movs	r0, #12
 8003596:	f7fd fddb 	bl	8001150 <readByte>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
     sprintf(msg, "AK8963 start, Address = %x \r\n", c);
 80035a0:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 80035a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035a8:	49b2      	ldr	r1, [pc, #712]	; (8003874 <main+0x3c4>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fad8 	bl	8008b60 <siprintf>
     send_uart(msg);
 80035b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff63 	bl	8003480 <send_uart>
     HAL_Delay(1000);
 80035ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035be:	f000 fefd 	bl	80043bc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint32_t time_u = 0;
  while (1)
  {
	  if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 80035c2:	213a      	movs	r1, #58	; 0x3a
 80035c4:	2068      	movs	r0, #104	; 0x68
 80035c6:	f7fd fdc3 	bl	8001150 <readByte>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f6      	beq.n	80035c2 <main+0x112>
	  		    readAccelData(accelCount);  // Read the x/y/z adc values
 80035d4:	48a8      	ldr	r0, [pc, #672]	; (8003878 <main+0x3c8>)
 80035d6:	f7fd feb5 	bl	8001344 <readAccelData>
	  		    getAres();
 80035da:	f7fd fea5 	bl	8001328 <getAres>

	  		    // Now we'll calculate the accleration value into actual g's
	  		    ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 80035de:	4ba6      	ldr	r3, [pc, #664]	; (8003878 <main+0x3c8>)
 80035e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fb31 	bl	8000c4c <__aeabi_i2f>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4ba3      	ldr	r3, [pc, #652]	; (800387c <main+0x3cc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7fd fb7e 	bl	8000cf4 <__aeabi_fmul>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  		    ay = (float)accelCount[1]*aRes; // - accelBias[1];
 80035fe:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <main+0x3c8>)
 8003600:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb21 	bl	8000c4c <__aeabi_i2f>
 800360a:	4602      	mov	r2, r0
 800360c:	4b9b      	ldr	r3, [pc, #620]	; (800387c <main+0x3cc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7fd fb6e 	bl	8000cf4 <__aeabi_fmul>
 8003618:	4603      	mov	r3, r0
 800361a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  		    az = (float)accelCount[2]*aRes; // - accelBias[2];
 800361e:	4b96      	ldr	r3, [pc, #600]	; (8003878 <main+0x3c8>)
 8003620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fb11 	bl	8000c4c <__aeabi_i2f>
 800362a:	4602      	mov	r2, r0
 800362c:	4b93      	ldr	r3, [pc, #588]	; (800387c <main+0x3cc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f7fd fb5e 	bl	8000cf4 <__aeabi_fmul>
 8003638:	4603      	mov	r3, r0
 800363a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	  		    readGyroData(gyroCount);  // Read the x/y/z adc values
 800363e:	4890      	ldr	r0, [pc, #576]	; (8003880 <main+0x3d0>)
 8003640:	f7fd feac 	bl	800139c <readGyroData>
	  		    getGres();
 8003644:	f7fd fe62 	bl	800130c <getGres>

	  		    // Calculate the gyro value into actual degrees per second
	  		    gx = (float)gyroCount[0]*gRes*PI/180.0;  // get actual gyro value, this depends on scale being set
 8003648:	4b8d      	ldr	r3, [pc, #564]	; (8003880 <main+0x3d0>)
 800364a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fafc 	bl	8000c4c <__aeabi_i2f>
 8003654:	4602      	mov	r2, r0
 8003656:	4b8b      	ldr	r3, [pc, #556]	; (8003884 <main+0x3d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7fd fb49 	bl	8000cf4 <__aeabi_fmul>
 8003662:	4603      	mov	r3, r0
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc fedf 	bl	8000428 <__aeabi_f2d>
 800366a:	a37d      	add	r3, pc, #500	; (adr r3, 8003860 <main+0x3b0>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fc ff32 	bl	80004d8 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4b81      	ldr	r3, [pc, #516]	; (8003888 <main+0x3d8>)
 8003682:	f7fd f853 	bl	800072c <__aeabi_ddiv>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd f9d3 	bl	8000a38 <__aeabi_d2f>
 8003692:	4603      	mov	r3, r0
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  		    gy = (float)gyroCount[1]*gRes*PI/180.0;
 8003698:	4b79      	ldr	r3, [pc, #484]	; (8003880 <main+0x3d0>)
 800369a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fad4 	bl	8000c4c <__aeabi_i2f>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b77      	ldr	r3, [pc, #476]	; (8003884 <main+0x3d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fd fb21 	bl	8000cf4 <__aeabi_fmul>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fc feb7 	bl	8000428 <__aeabi_f2d>
 80036ba:	a369      	add	r3, pc, #420	; (adr r3, 8003860 <main+0x3b0>)
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f7fc ff0a 	bl	80004d8 <__aeabi_dmul>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <main+0x3d8>)
 80036d2:	f7fd f82b 	bl	800072c <__aeabi_ddiv>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd f9ab 	bl	8000a38 <__aeabi_d2f>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  		    gz = (float)gyroCount[2]*gRes*PI/180.0;
 80036e8:	4b65      	ldr	r3, [pc, #404]	; (8003880 <main+0x3d0>)
 80036ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd faac 	bl	8000c4c <__aeabi_i2f>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b63      	ldr	r3, [pc, #396]	; (8003884 <main+0x3d4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fd faf9 	bl	8000cf4 <__aeabi_fmul>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc fe8f 	bl	8000428 <__aeabi_f2d>
 800370a:	a355      	add	r3, pc, #340	; (adr r3, 8003860 <main+0x3b0>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc fee2 	bl	80004d8 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <main+0x3d8>)
 8003722:	f7fd f803 	bl	800072c <__aeabi_ddiv>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7fd f983 	bl	8000a38 <__aeabi_d2f>
 8003732:	4603      	mov	r3, r0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	  		    readMagData(magCount);  // Read the x/y/z adc values
 8003738:	4854      	ldr	r0, [pc, #336]	; (800388c <main+0x3dc>)
 800373a:	f7fd fe5b 	bl	80013f4 <readMagData>
	  		    getMres();
 800373e:	f7fd fdd7 	bl	80012f0 <getMres>
	  		    magbias[0] = +491.;  // User environmental x-axis correction in milliGauss, should be automatically calculated
 8003742:	4b53      	ldr	r3, [pc, #332]	; (8003890 <main+0x3e0>)
 8003744:	4a53      	ldr	r2, [pc, #332]	; (8003894 <main+0x3e4>)
 8003746:	601a      	str	r2, [r3, #0]
	  		    magbias[1] = -495.;  // User environmental x-axis correction in milliGauss
 8003748:	4b51      	ldr	r3, [pc, #324]	; (8003890 <main+0x3e0>)
 800374a:	4a53      	ldr	r2, [pc, #332]	; (8003898 <main+0x3e8>)
 800374c:	605a      	str	r2, [r3, #4]
	  		    magbias[2] = -1015.;  // User environmental x-axis correction in milliGauss
 800374e:	4b50      	ldr	r3, [pc, #320]	; (8003890 <main+0x3e0>)
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <main+0x3ec>)
 8003752:	609a      	str	r2, [r3, #8]

	  		    // Calculate the magnetometer values in milliGauss
	  		    // Include factory calibration per data sheet and user environmental corrections
	  		    mx = (float)magCount[0]*mRes*magCalibration[0] - magbias[0];  // get actual magnetometer value, this depends on scale being set
 8003754:	4b4d      	ldr	r3, [pc, #308]	; (800388c <main+0x3dc>)
 8003756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fa76 	bl	8000c4c <__aeabi_i2f>
 8003760:	4602      	mov	r2, r0
 8003762:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <main+0x3f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fd fac3 	bl	8000cf4 <__aeabi_fmul>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <main+0x3f4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7fd fabb 	bl	8000cf4 <__aeabi_fmul>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <main+0x3e0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fd f9a9 	bl	8000ae0 <__aeabi_fsub>
 800378e:	4603      	mov	r3, r0
 8003790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  		    my = (float)magCount[1]*mRes*magCalibration[1] - magbias[1];
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <main+0x3dc>)
 8003796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fa56 	bl	8000c4c <__aeabi_i2f>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <main+0x3f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7fd faa3 	bl	8000cf4 <__aeabi_fmul>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b3c      	ldr	r3, [pc, #240]	; (80038a4 <main+0x3f4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fd fa9b 	bl	8000cf4 <__aeabi_fmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <main+0x3e0>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7fd f989 	bl	8000ae0 <__aeabi_fsub>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  		    mz = (float)magCount[2]*mRes*magCalibration[2] - magbias[2];
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <main+0x3dc>)
 80037d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fa36 	bl	8000c4c <__aeabi_i2f>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <main+0x3f0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7fd fa83 	bl	8000cf4 <__aeabi_fmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <main+0x3f4>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7fd fa7b 	bl	8000cf4 <__aeabi_fmul>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <main+0x3e0>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7fd f969 	bl	8000ae0 <__aeabi_fsub>
 800380e:	4603      	mov	r3, r0
 8003810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	  		  Now = HAL_GetTick();
 8003814:	f000 fdc8 	bl	80043a8 <HAL_GetTick>
 8003818:	4603      	mov	r3, r0
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fa12 	bl	8000c44 <__aeabi_ui2f>
 8003820:	4603      	mov	r3, r0
 8003822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  		  MyMPU.deltat = ((Now - MyMPU.lastUpdate)*0.001); // set integration time by time elapsed since last filter update
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fa0b 	bl	8000c44 <__aeabi_ui2f>
 800382e:	4603      	mov	r3, r0
 8003830:	4619      	mov	r1, r3
 8003832:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003836:	f7fd f953 	bl	8000ae0 <__aeabi_fsub>
 800383a:	4603      	mov	r3, r0
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fdf3 	bl	8000428 <__aeabi_f2d>
 8003842:	a309      	add	r3, pc, #36	; (adr r3, 8003868 <main+0x3b8>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fe46 	bl	80004d8 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd f8f0 	bl	8000a38 <__aeabi_d2f>
 8003858:	e026      	b.n	80038a8 <main+0x3f8>
 800385a:	bf00      	nop
 800385c:	f3af 8000 	nop.w
 8003860:	4d12d84a 	.word	0x4d12d84a
 8003864:	400921fb 	.word	0x400921fb
 8003868:	d2f1a9fc 	.word	0xd2f1a9fc
 800386c:	3f50624d 	.word	0x3f50624d
 8003870:	080094ac 	.word	0x080094ac
 8003874:	080094bc 	.word	0x080094bc
 8003878:	2000008c 	.word	0x2000008c
 800387c:	200000d4 	.word	0x200000d4
 8003880:	20000094 	.word	0x20000094
 8003884:	200000d8 	.word	0x200000d8
 8003888:	40668000 	.word	0x40668000
 800388c:	2000009c 	.word	0x2000009c
 8003890:	200000b0 	.word	0x200000b0
 8003894:	43f58000 	.word	0x43f58000
 8003898:	c3f78000 	.word	0xc3f78000
 800389c:	c47dc000 	.word	0xc47dc000
 80038a0:	200000dc 	.word	0x200000dc
 80038a4:	200000a4 	.word	0x200000a4
 80038a8:	4603      	mov	r3, r0
 80038aa:	623b      	str	r3, [r7, #32]
	  		  MyMPU.lastUpdate = Now;
 80038ac:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80038b0:	f7fd fbfc 	bl	80010ac <__aeabi_f2uiz>
 80038b4:	4603      	mov	r3, r0
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
	  		  // We have to make some allowance for this orientationmis match in feeding the output to the quaternion filter.
	  		  // For the MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward along the x-axis just like
	  		  // in the LSM9DS0 sensor. This rotation can be modified to allow any convenient orientation convention.
	  		  // This is ok by aircraft orientation standards!
	  		  // Pass gyro rate as rad/s
	  		  MadgwickQuaternionUpdate(ax, ay, az, gx, gy, gz, my, mx, mz, MyMPU.q, MyMPU.deltat);
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	9306      	str	r3, [sp, #24]
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038cc:	9303      	str	r3, [sp, #12]
 80038ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038e8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80038ec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80038f0:	f7fe fcce 	bl	8002290 <MadgwickQuaternionUpdate>
	  		  // Roll is angle between sensor y-axis and Earth ground plane, y-axis up is positive roll.
	  		  // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	  		  // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	  		  // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	  		  // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	  		  yaw = atan2(2.0f * (MyMPU.q[1] * MyMPU.q[2] + MyMPU.q[0] * MyMPU.q[3]), MyMPU.q[0] * MyMPU.q[0] + MyMPU.q[1] * MyMPU.q[1] - MyMPU.q[2] * MyMPU.q[2] - MyMPU.q[3] * MyMPU.q[3]);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd f9fa 	bl	8000cf4 <__aeabi_fmul>
 8003900:	4603      	mov	r3, r0
 8003902:	461c      	mov	r4, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f9f2 	bl	8000cf4 <__aeabi_fmul>
 8003910:	4603      	mov	r3, r0
 8003912:	4619      	mov	r1, r3
 8003914:	4620      	mov	r0, r4
 8003916:	f7fd f8e5 	bl	8000ae4 <__addsf3>
 800391a:	4603      	mov	r3, r0
 800391c:	4619      	mov	r1, r3
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd f8e0 	bl	8000ae4 <__addsf3>
 8003924:	4603      	mov	r3, r0
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fd7e 	bl	8000428 <__aeabi_f2d>
 800392c:	4604      	mov	r4, r0
 800392e:	460d      	mov	r5, r1
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f9dc 	bl	8000cf4 <__aeabi_fmul>
 800393c:	4603      	mov	r3, r0
 800393e:	461e      	mov	r6, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd f9d4 	bl	8000cf4 <__aeabi_fmul>
 800394c:	4603      	mov	r3, r0
 800394e:	4619      	mov	r1, r3
 8003950:	4630      	mov	r0, r6
 8003952:	f7fd f8c7 	bl	8000ae4 <__addsf3>
 8003956:	4603      	mov	r3, r0
 8003958:	461e      	mov	r6, r3
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd f9c7 	bl	8000cf4 <__aeabi_fmul>
 8003966:	4603      	mov	r3, r0
 8003968:	4619      	mov	r1, r3
 800396a:	4630      	mov	r0, r6
 800396c:	f7fd f8b8 	bl	8000ae0 <__aeabi_fsub>
 8003970:	4603      	mov	r3, r0
 8003972:	461e      	mov	r6, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd f9ba 	bl	8000cf4 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	4619      	mov	r1, r3
 8003984:	4630      	mov	r0, r6
 8003986:	f7fd f8ab 	bl	8000ae0 <__aeabi_fsub>
 800398a:	4603      	mov	r3, r0
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fd4b 	bl	8000428 <__aeabi_f2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f003 fcfd 	bl	8007398 <atan2>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7fd f847 	bl	8000a38 <__aeabi_d2f>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	  		  pitch = -asin(2.0f * (MyMPU.q[1] * MyMPU.q[3] - MyMPU.q[0] * MyMPU.q[2]));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f99c 	bl	8000cf4 <__aeabi_fmul>
 80039bc:	4603      	mov	r3, r0
 80039be:	461c      	mov	r4, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f994 	bl	8000cf4 <__aeabi_fmul>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4619      	mov	r1, r3
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7fd f885 	bl	8000ae0 <__aeabi_fsub>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4619      	mov	r1, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd f882 	bl	8000ae4 <__addsf3>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fd20 	bl	8000428 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	f003 fcaa 	bl	8007348 <asin>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7fd f81c 	bl	8000a38 <__aeabi_d2f>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  		  roll = atan2(2.0f * (MyMPU.q[0] * MyMPU.q[1] + MyMPU.q[2] * MyMPU.q[3]), MyMPU.q[0] * MyMPU.q[0] - MyMPU.q[1] * MyMPU.q[1] - MyMPU.q[2] * MyMPU.q[2] + MyMPU.q[3] * MyMPU.q[3]);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd f96f 	bl	8000cf4 <__aeabi_fmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461c      	mov	r4, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd f967 	bl	8000cf4 <__aeabi_fmul>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7fd f85a 	bl	8000ae4 <__addsf3>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4619      	mov	r1, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd f855 	bl	8000ae4 <__addsf3>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fcf3 	bl	8000428 <__aeabi_f2d>
 8003a42:	4604      	mov	r4, r0
 8003a44:	460d      	mov	r5, r1
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd f951 	bl	8000cf4 <__aeabi_fmul>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461e      	mov	r6, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd f949 	bl	8000cf4 <__aeabi_fmul>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7fd f83a 	bl	8000ae0 <__aeabi_fsub>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461e      	mov	r6, r3
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd f93c 	bl	8000cf4 <__aeabi_fmul>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4630      	mov	r0, r6
 8003a82:	f7fd f82d 	bl	8000ae0 <__aeabi_fsub>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461e      	mov	r6, r3
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd f92f 	bl	8000cf4 <__aeabi_fmul>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7fd f822 	bl	8000ae4 <__addsf3>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fcc0 	bl	8000428 <__aeabi_f2d>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f003 fc72 	bl	8007398 <atan2>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fc ffbc 	bl	8000a38 <__aeabi_d2f>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  		  pitch *= 180.0f / PI;
 8003ac6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003aca:	f7fc fcad 	bl	8000428 <__aeabi_f2d>
 8003ace:	a34a      	add	r3, pc, #296	; (adr r3, 8003bf8 <main+0x748>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc fd00 	bl	80004d8 <__aeabi_dmul>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f7fc ffaa 	bl	8000a38 <__aeabi_d2f>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  		  yaw *= 180.0f / PI;
 8003aea:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003aee:	f7fc fc9b 	bl	8000428 <__aeabi_f2d>
 8003af2:	a341      	add	r3, pc, #260	; (adr r3, 8003bf8 <main+0x748>)
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f7fc fcee 	bl	80004d8 <__aeabi_dmul>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7fc ff98 	bl	8000a38 <__aeabi_d2f>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  		  yaw -= 13.8; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
 8003b0e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003b12:	f7fc fc89 	bl	8000428 <__aeabi_f2d>
 8003b16:	a33a      	add	r3, pc, #232	; (adr r3, 8003c00 <main+0x750>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fb24 	bl	8000168 <__aeabi_dsub>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f7fc ff86 	bl	8000a38 <__aeabi_d2f>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  		  roll *= 180.0f / PI;
 8003b32:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003b36:	f7fc fc77 	bl	8000428 <__aeabi_f2d>
 8003b3a:	a32f      	add	r3, pc, #188	; (adr r3, 8003bf8 <main+0x748>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fcca 	bl	80004d8 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fc ff74 	bl	8000a38 <__aeabi_d2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	  	    sprintf(msg, "%7ld,yaw=%7.2f,pitch=%7.2f,roll=%7.2f,mx=%7.2f,my=%7.2f,mz=%7.2f\r\n", HAL_GetTick(), yaw, pitch, roll, mx, my, mz);
 8003b56:	f000 fc27 	bl	80043a8 <HAL_GetTick>
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003b60:	f7fc fc62 	bl	8000428 <__aeabi_f2d>
 8003b64:	4604      	mov	r4, r0
 8003b66:	460d      	mov	r5, r1
 8003b68:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003b6c:	f7fc fc5c 	bl	8000428 <__aeabi_f2d>
 8003b70:	4680      	mov	r8, r0
 8003b72:	4689      	mov	r9, r1
 8003b74:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003b78:	f7fc fc56 	bl	8000428 <__aeabi_f2d>
 8003b7c:	4682      	mov	sl, r0
 8003b7e:	468b      	mov	fp, r1
 8003b80:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b84:	f7fc fc50 	bl	8000428 <__aeabi_f2d>
 8003b88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003b8c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003b90:	f7fc fc4a 	bl	8000428 <__aeabi_f2d>
 8003b94:	e9c7 0100 	strd	r0, r1, [r7]
 8003b98:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003b9c:	f7fc fc44 	bl	8000428 <__aeabi_f2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003bbc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003bc0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003bc4:	e9cd 4500 	strd	r4, r5, [sp]
 8003bc8:	4632      	mov	r2, r6
 8003bca:	490f      	ldr	r1, [pc, #60]	; (8003c08 <main+0x758>)
 8003bcc:	f004 ffc8 	bl	8008b60 <siprintf>
	  	    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8003bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fabb 	bl	8000150 <strlen>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003be2:	2364      	movs	r3, #100	; 0x64
 8003be4:	4809      	ldr	r0, [pc, #36]	; (8003c0c <main+0x75c>)
 8003be6:	f002 fddb 	bl	80067a0 <HAL_UART_Transmit>
	  	    HAL_Delay(100);
 8003bea:	2064      	movs	r0, #100	; 0x64
 8003bec:	f000 fbe6 	bl	80043bc <HAL_Delay>
	  if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8003bf0:	e4e7      	b.n	80035c2 <main+0x112>
 8003bf2:	bf00      	nop
 8003bf4:	f3af 8000 	nop.w
 8003bf8:	22969faa 	.word	0x22969faa
 8003bfc:	404ca5dc 	.word	0x404ca5dc
 8003c00:	9999999a 	.word	0x9999999a
 8003c04:	402b9999 	.word	0x402b9999
 8003c08:	080094dc 	.word	0x080094dc
 8003c0c:	20000178 	.word	0x20000178

08003c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b090      	sub	sp, #64	; 0x40
 8003c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c16:	f107 0318 	add.w	r3, r7, #24
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 ff96 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c40:	2301      	movs	r3, #1
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c44:	2302      	movs	r3, #2
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c54:	f107 0318 	add.w	r3, r7, #24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fbb9 	bl	80053d0 <HAL_RCC_OscConfig>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003c64:	f000 f93a 	bl	8003edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c68:	230f      	movs	r3, #15
 8003c6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fe26 	bl	80058d4 <HAL_RCC_ClockConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003c8e:	f000 f925 	bl	8003edc <Error_Handler>
  }
}
 8003c92:	bf00      	nop
 8003c94:	3740      	adds	r7, #64	; 0x40
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <MX_CAN_Init+0x64>)
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <MX_CAN_Init+0x68>)
 8003ca4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <MX_CAN_Init+0x64>)
 8003ca8:	2204      	movs	r2, #4
 8003caa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003cbe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cc6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <MX_CAN_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <MX_CAN_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003cec:	4804      	ldr	r0, [pc, #16]	; (8003d00 <MX_CAN_Init+0x64>)
 8003cee:	f000 fb89 	bl	8004404 <HAL_CAN_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003cf8:	f000 f8f0 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200000f8 	.word	0x200000f8
 8003d04:	40006400 	.word	0x40006400

08003d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <MX_SPI1_Init+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d3c:	2230      	movs	r2, #48	; 0x30
 8003d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d54:	220a      	movs	r2, #10
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d58:	4804      	ldr	r0, [pc, #16]	; (8003d6c <MX_SPI1_Init+0x64>)
 8003d5a:	f001 ff49 	bl	8005bf0 <HAL_SPI_Init>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d64:	f000 f8ba 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000120 	.word	0x20000120
 8003d70:	40013000 	.word	0x40013000

08003d74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <MX_USART1_UART_Init+0x50>)
 8003d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003daa:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_USART1_UART_Init+0x4c>)
 8003dac:	f002 fca8 	bl	8006700 <HAL_UART_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003db6:	f000 f891 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000178 	.word	0x20000178
 8003dc4:	40013800 	.word	0x40013800

08003dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_DMA_Init+0x38>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <MX_DMA_Init+0x38>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6153      	str	r3, [r2, #20]
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_DMA_Init+0x38>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	200f      	movs	r0, #15
 8003dec:	f000 ff09 	bl	8004c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003df0:	200f      	movs	r0, #15
 8003df2:	f000 ff22 	bl	8004c3a <HAL_NVIC_EnableIRQ>

}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000

08003e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6193      	str	r3, [r2, #24]
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	6193      	str	r3, [r2, #24]
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	6193      	str	r3, [r2, #24]
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6193      	str	r3, [r2, #24]
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <MX_GPIO_Init+0xcc>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e7e:	4815      	ldr	r0, [pc, #84]	; (8003ed4 <MX_GPIO_Init+0xd0>)
 8003e80:	f001 fa8e 	bl	80053a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_RESET);
 8003e84:	2200      	movs	r2, #0
 8003e86:	2101      	movs	r1, #1
 8003e88:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <MX_GPIO_Init+0xd4>)
 8003e8a:	f001 fa89 	bl	80053a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	480b      	ldr	r0, [pc, #44]	; (8003ed4 <MX_GPIO_Init+0xd0>)
 8003ea8:	f001 f8f6 	bl	8005098 <HAL_GPIO_Init>

  /*Configure GPIO pin : GY_CS_Pin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8003ebc:	f107 0310 	add.w	r3, r7, #16
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <MX_GPIO_Init+0xd4>)
 8003ec4:	f001 f8e8 	bl	8005098 <HAL_GPIO_Init>

}
 8003ec8:	bf00      	nop
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40011000 	.word	0x40011000
 8003ed8:	40010c00 	.word	0x40010c00

08003edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <Error_Handler+0x8>
	...

08003ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_MspInit+0x5c>)
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_MspInit+0x5c>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6193      	str	r3, [r2, #24]
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_MspInit+0x5c>)
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_MspInit+0x5c>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_MspInit+0x5c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_MspInit+0x5c>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_MspInit+0x60>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_MspInit+0x60>)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40010000 	.word	0x40010000

08003f4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 0310 	add.w	r3, r7, #16
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <HAL_CAN_MspInit+0xac>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d141      	bne.n	8003ff0 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f76:	61d3      	str	r3, [r2, #28]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	6193      	str	r3, [r2, #24]
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_CAN_MspInit+0xb0>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4813      	ldr	r0, [pc, #76]	; (8004000 <HAL_CAN_MspInit+0xb4>)
 8003fb2:	f001 f871 	bl	8005098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <HAL_CAN_MspInit+0xb4>)
 8003fcc:	f001 f864 	bl	8005098 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2014      	movs	r0, #20
 8003fd6:	f000 fe14 	bl	8004c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003fda:	2014      	movs	r0, #20
 8003fdc:	f000 fe2d 	bl	8004c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2016      	movs	r0, #22
 8003fe6:	f000 fe0c 	bl	8004c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003fea:	2016      	movs	r0, #22
 8003fec:	f000 fe25 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40006400 	.word	0x40006400
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010800 	.word	0x40010800

08004004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0310 	add.w	r3, r7, #16
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_SPI_MspInit+0x88>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d12f      	bne.n	8004084 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 800402a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800402e:	6193      	str	r3, [r2, #24]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6193      	str	r3, [r2, #24]
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_SPI_MspInit+0x8c>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004054:	23a0      	movs	r3, #160	; 0xa0
 8004056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800405c:	2303      	movs	r3, #3
 800405e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	4619      	mov	r1, r3
 8004066:	480b      	ldr	r0, [pc, #44]	; (8004094 <HAL_SPI_MspInit+0x90>)
 8004068:	f001 f816 	bl	8005098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004078:	f107 0310 	add.w	r3, r7, #16
 800407c:	4619      	mov	r1, r3
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <HAL_SPI_MspInit+0x90>)
 8004080:	f001 f80a 	bl	8005098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004084:	bf00      	nop
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40013000 	.word	0x40013000
 8004090:	40021000 	.word	0x40021000
 8004094:	40010800 	.word	0x40010800

08004098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a33      	ldr	r2, [pc, #204]	; (8004180 <HAL_UART_MspInit+0xe8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d15f      	bne.n	8004178 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4a31      	ldr	r2, [pc, #196]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c2:	6193      	str	r3, [r2, #24]
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	6193      	str	r3, [r2, #24]
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_UART_MspInit+0xec>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	f107 0310 	add.w	r3, r7, #16
 80040fa:	4619      	mov	r1, r3
 80040fc:	4822      	ldr	r0, [pc, #136]	; (8004188 <HAL_UART_MspInit+0xf0>)
 80040fe:	f000 ffcb 	bl	8005098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	4619      	mov	r1, r3
 8004116:	481c      	ldr	r0, [pc, #112]	; (8004188 <HAL_UART_MspInit+0xf0>)
 8004118:	f000 ffbe 	bl	8005098 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_UART_MspInit+0xf4>)
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_UART_MspInit+0xf8>)
 8004120:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_UART_MspInit+0xf4>)
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_UART_MspInit+0xf4>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004148:	2200      	movs	r2, #0
 800414a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800414c:	480f      	ldr	r0, [pc, #60]	; (800418c <HAL_UART_MspInit+0xf4>)
 800414e:	f000 fd8f 	bl	8004c70 <HAL_DMA_Init>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004158:	f7ff fec0 	bl	8003edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_UART_MspInit+0xf4>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004168:	2200      	movs	r2, #0
 800416a:	2100      	movs	r1, #0
 800416c:	2025      	movs	r0, #37	; 0x25
 800416e:	f000 fd48 	bl	8004c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004172:	2025      	movs	r0, #37	; 0x25
 8004174:	f000 fd61 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013800 	.word	0x40013800
 8004184:	40021000 	.word	0x40021000
 8004188:	40010800 	.word	0x40010800
 800418c:	200001c0 	.word	0x200001c0
 8004190:	40020058 	.word	0x40020058

08004194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <NMI_Handler+0x4>

0800419a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <HardFault_Handler+0x4>

080041a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <MemManage_Handler+0x4>

080041a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041aa:	e7fe      	b.n	80041aa <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041da:	f000 f8d3 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <DMA1_Channel5_IRQHandler+0x10>)
 80041ea:	f000 fe4f 	bl	8004e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200001c0 	.word	0x200001c0

080041f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80041fe:	f000 f9fc 	bl	80045fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200000f8 	.word	0x200000f8

0800420c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <CAN1_SCE_IRQHandler+0x10>)
 8004212:	f000 f9f2 	bl	80045fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200000f8 	.word	0x200000f8

08004220 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <USART1_IRQHandler+0x10>)
 8004226:	f002 fb3f 	bl	80068a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000178 	.word	0x20000178

08004234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <_sbrk+0x5c>)
 800423e:	4b15      	ldr	r3, [pc, #84]	; (8004294 <_sbrk+0x60>)
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <_sbrk+0x64>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <_sbrk+0x64>)
 8004252:	4a12      	ldr	r2, [pc, #72]	; (800429c <_sbrk+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d207      	bcs.n	8004274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004264:	f004 fc4a 	bl	8008afc <__errno>
 8004268:	4603      	mov	r3, r0
 800426a:	220c      	movs	r2, #12
 800426c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	e009      	b.n	8004288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_sbrk+0x64>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <_sbrk+0x64>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <_sbrk+0x64>)
 8004284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20005000 	.word	0x20005000
 8004294:	00000400 	.word	0x00000400
 8004298:	20000204 	.word	0x20000204
 800429c:	20000220 	.word	0x20000220

080042a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042ac:	f7ff fff8 	bl	80042a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b0:	480b      	ldr	r0, [pc, #44]	; (80042e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80042b2:	490c      	ldr	r1, [pc, #48]	; (80042e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b8:	e002      	b.n	80042c0 <LoopCopyDataInit>

080042ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042be:	3304      	adds	r3, #4

080042c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c4:	d3f9      	bcc.n	80042ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80042c8:	4c09      	ldr	r4, [pc, #36]	; (80042f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042cc:	e001      	b.n	80042d2 <LoopFillZerobss>

080042ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d0:	3204      	adds	r2, #4

080042d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d4:	d3fb      	bcc.n	80042ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042d6:	f004 fc17 	bl	8008b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042da:	f7ff f8e9 	bl	80034b0 <main>
  bx lr
 80042de:	4770      	bx	lr
  ldr r0, =_sdata
 80042e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80042e8:	0800962c 	.word	0x0800962c
  ldr r2, =_sbss
 80042ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80042f0:	2000021c 	.word	0x2000021c

080042f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042f4:	e7fe      	b.n	80042f4 <ADC1_2_IRQHandler>
	...

080042f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x28>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x28>)
 8004302:	f043 0310 	orr.w	r3, r3, #16
 8004306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 fc6f 	bl	8004bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f000 f808 	bl	8004324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff fde8 	bl	8003ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40022000 	.word	0x40022000

08004324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x54>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_InitTick+0x58>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433a:	fbb3 f3f1 	udiv	r3, r3, r1
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fc87 	bl	8004c56 <HAL_SYSTICK_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00e      	b.n	8004370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d80a      	bhi.n	800436e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004358:	2200      	movs	r2, #0
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f000 fc4f 	bl	8004c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <HAL_InitTick+0x5c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000000 	.word	0x20000000
 800437c:	20000008 	.word	0x20000008
 8004380:	20000004 	.word	0x20000004

08004384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_IncTick+0x1c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_IncTick+0x20>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4413      	add	r3, r2
 8004394:	4a03      	ldr	r2, [pc, #12]	; (80043a4 <HAL_IncTick+0x20>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	20000008 	.word	0x20000008
 80043a4:	20000208 	.word	0x20000208

080043a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return uwTick;
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <HAL_GetTick+0x10>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	20000208 	.word	0x20000208

080043bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_GetTick>
 80043c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d005      	beq.n	80043e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_Delay+0x44>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043e2:	bf00      	nop
 80043e4:	f7ff ffe0 	bl	80043a8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d8f7      	bhi.n	80043e4 <HAL_Delay+0x28>
  {
  }
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000008 	.word	0x20000008

08004404 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0ed      	b.n	80045f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff fd92 	bl	8003f4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004438:	f7ff ffb6 	bl	80043a8 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800443e:	e012      	b.n	8004466 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004440:	f7ff ffb2 	bl	80043a8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b0a      	cmp	r3, #10
 800444c:	d90b      	bls.n	8004466 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2205      	movs	r2, #5
 800445e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0c5      	b.n	80045f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0e5      	beq.n	8004440 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0202 	bic.w	r2, r2, #2
 8004482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7ff ff90 	bl	80043a8 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800448a:	e012      	b.n	80044b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800448c:	f7ff ff8c 	bl	80043a8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d90b      	bls.n	80044b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2205      	movs	r2, #5
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e09f      	b.n	80045f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7e1b      	ldrb	r3, [r3, #24]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d108      	bne.n	80044da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e007      	b.n	80044ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7e5b      	ldrb	r3, [r3, #25]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d108      	bne.n	8004504 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e007      	b.n	8004514 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7e9b      	ldrb	r3, [r3, #26]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d108      	bne.n	800452e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0220 	orr.w	r2, r2, #32
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e007      	b.n	800453e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0220 	bic.w	r2, r2, #32
 800453c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7edb      	ldrb	r3, [r3, #27]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d108      	bne.n	8004558 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0210 	bic.w	r2, r2, #16
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e007      	b.n	8004568 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0210 	orr.w	r2, r2, #16
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7f1b      	ldrb	r3, [r3, #28]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d108      	bne.n	8004582 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0208 	orr.w	r2, r2, #8
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e007      	b.n	8004592 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0208 	bic.w	r2, r2, #8
 8004590:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7f5b      	ldrb	r3, [r3, #29]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d108      	bne.n	80045ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0204 	orr.w	r2, r2, #4
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e007      	b.n	80045bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	ea42 0103 	orr.w	r1, r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	1e5a      	subs	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08a      	sub	sp, #40	; 0x28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d07c      	beq.n	800473a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d023      	beq.n	8004692 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f983 	bl	8004968 <HAL_CAN_TxMailbox0CompleteCallback>
 8004662:	e016      	b.n	8004692 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e00c      	b.n	8004692 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
 800468a:	e002      	b.n	8004692 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f986 	bl	800499e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d024      	beq.n	80046e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f962 	bl	800497a <HAL_CAN_TxMailbox1CompleteCallback>
 80046b6:	e016      	b.n	80046e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e00c      	b.n	80046e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	e002      	b.n	80046e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f965 	bl	80049b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d024      	beq.n	800473a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f941 	bl	800498c <HAL_CAN_TxMailbox2CompleteCallback>
 800470a:	e016      	b.n	800473a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	e00c      	b.n	800473a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e002      	b.n	800473a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f944 	bl	80049c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004754:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2210      	movs	r2, #16
 800475c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2208      	movs	r2, #8
 8004778:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f933 	bl	80049e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f91b 	bl	80049d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2210      	movs	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2208      	movs	r2, #8
 80047dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f913 	bl	8004a0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8fb 	bl	80049f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8fc 	bl	8004a1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2208      	movs	r2, #8
 800483e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8f4 	bl	8004a2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d07b      	beq.n	8004948 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d072      	beq.n	8004940 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d043      	beq.n	8004940 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03e      	beq.n	8004940 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d02b      	beq.n	8004924 <HAL_CAN_IRQHandler+0x32a>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d82e      	bhi.n	800492e <HAL_CAN_IRQHandler+0x334>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d022      	beq.n	800491a <HAL_CAN_IRQHandler+0x320>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d82a      	bhi.n	800492e <HAL_CAN_IRQHandler+0x334>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d019      	beq.n	8004910 <HAL_CAN_IRQHandler+0x316>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d826      	bhi.n	800492e <HAL_CAN_IRQHandler+0x334>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d010      	beq.n	8004906 <HAL_CAN_IRQHandler+0x30c>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d822      	bhi.n	800492e <HAL_CAN_IRQHandler+0x334>
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d002      	beq.n	80048f2 <HAL_CAN_IRQHandler+0x2f8>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d005      	beq.n	80048fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80048f0:	e01d      	b.n	800492e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f043 0308 	orr.w	r3, r3, #8
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048fa:	e019      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f043 0310 	orr.w	r3, r3, #16
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004904:	e014      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800490e:	e00f      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004918:	e00a      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004922:	e005      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800492c:	e000      	b.n	8004930 <HAL_CAN_IRQHandler+0x336>
            break;
 800492e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800493e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2204      	movs	r2, #4
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f870 	bl	8004a40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004960:	bf00      	nop
 8004962:	3728      	adds	r7, #40	; 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
	...

08004a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a86:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	60d3      	str	r3, [r2, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 0307 	and.w	r3, r3, #7
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	db0b      	blt.n	8004ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	f003 021f 	and.w	r2, r3, #31
 8004ad0:	4906      	ldr	r1, [pc, #24]	; (8004aec <__NVIC_EnableIRQ+0x34>)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2001      	movs	r0, #1
 8004ada:	fa00 f202 	lsl.w	r2, r0, r2
 8004ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db0a      	blt.n	8004b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	490c      	ldr	r1, [pc, #48]	; (8004b3c <__NVIC_SetPriority+0x4c>)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	440b      	add	r3, r1
 8004b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b18:	e00a      	b.n	8004b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4908      	ldr	r1, [pc, #32]	; (8004b40 <__NVIC_SetPriority+0x50>)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3b04      	subs	r3, #4
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	761a      	strb	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000e100 	.word	0xe000e100
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf28      	it	cs
 8004b62:	2304      	movcs	r3, #4
 8004b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d902      	bls.n	8004b74 <NVIC_EncodePriority+0x30>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3b03      	subs	r3, #3
 8004b72:	e000      	b.n	8004b76 <NVIC_EncodePriority+0x32>
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	401a      	ands	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43d9      	mvns	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	4313      	orrs	r3, r2
         );
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3724      	adds	r7, #36	; 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb8:	d301      	bcc.n	8004bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00f      	b.n	8004bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <SysTick_Config+0x40>)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc6:	210f      	movs	r1, #15
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	f7ff ff90 	bl	8004af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <SysTick_Config+0x40>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <SysTick_Config+0x40>)
 8004bd8:	2207      	movs	r2, #7
 8004bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000e010 	.word	0xe000e010

08004bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff2d 	bl	8004a54 <__NVIC_SetPriorityGrouping>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c14:	f7ff ff42 	bl	8004a9c <__NVIC_GetPriorityGrouping>
 8004c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff90 	bl	8004b44 <NVIC_EncodePriority>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff5f 	bl	8004af0 <__NVIC_SetPriority>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff35 	bl	8004ab8 <__NVIC_EnableIRQ>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffa2 	bl	8004ba8 <SysTick_Config>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e043      	b.n	8004d0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_DMA_Init+0xa8>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <HAL_DMA_Init+0xac>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	009a      	lsls	r2, r3, #2
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_DMA_Init+0xb0>)
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004cbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	bffdfff8 	.word	0xbffdfff8
 8004d1c:	cccccccd 	.word	0xcccccccd
 8004d20:	40020000 	.word	0x40020000

08004d24 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d008      	beq.n	8004d4e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e020      	b.n	8004d90 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 020e 	bic.w	r2, r2, #14
 8004d5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	2101      	movs	r1, #1
 8004d78:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d005      	beq.n	8004dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2204      	movs	r2, #4
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	e051      	b.n	8004e64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020e 	bic.w	r2, r2, #14
 8004dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <HAL_DMA_Abort_IT+0xd4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d029      	beq.n	8004e3e <HAL_DMA_Abort_IT+0xa2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <HAL_DMA_Abort_IT+0xd8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_Abort_IT+0x9e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <HAL_DMA_Abort_IT+0xdc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01a      	beq.n	8004e34 <HAL_DMA_Abort_IT+0x98>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <HAL_DMA_Abort_IT+0xe0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d012      	beq.n	8004e2e <HAL_DMA_Abort_IT+0x92>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_DMA_Abort_IT+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00a      	beq.n	8004e28 <HAL_DMA_Abort_IT+0x8c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <HAL_DMA_Abort_IT+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d102      	bne.n	8004e22 <HAL_DMA_Abort_IT+0x86>
 8004e1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e20:	e00e      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e26:	e00b      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e2c:	e008      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e32:	e005      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e38:	e002      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	e000      	b.n	8004e40 <HAL_DMA_Abort_IT+0xa4>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <HAL_DMA_Abort_IT+0xec>)
 8004e42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
    } 
  }
  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40020008 	.word	0x40020008
 8004e74:	4002001c 	.word	0x4002001c
 8004e78:	40020030 	.word	0x40020030
 8004e7c:	40020044 	.word	0x40020044
 8004e80:	40020058 	.word	0x40020058
 8004e84:	4002006c 	.word	0x4002006c
 8004e88:	40020000 	.word	0x40020000

08004e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d04f      	beq.n	8004f54 <HAL_DMA_IRQHandler+0xc8>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d04a      	beq.n	8004f54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a66      	ldr	r2, [pc, #408]	; (800507c <HAL_DMA_IRQHandler+0x1f0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d029      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xae>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a65      	ldr	r2, [pc, #404]	; (8005080 <HAL_DMA_IRQHandler+0x1f4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xaa>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a63      	ldr	r2, [pc, #396]	; (8005084 <HAL_DMA_IRQHandler+0x1f8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01a      	beq.n	8004f30 <HAL_DMA_IRQHandler+0xa4>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a62      	ldr	r2, [pc, #392]	; (8005088 <HAL_DMA_IRQHandler+0x1fc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d012      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x9e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a60      	ldr	r2, [pc, #384]	; (800508c <HAL_DMA_IRQHandler+0x200>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00a      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x98>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5f      	ldr	r2, [pc, #380]	; (8005090 <HAL_DMA_IRQHandler+0x204>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d102      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x92>
 8004f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f1c:	e00e      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f22:	e00b      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f28:	e008      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f2e:	e005      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	e002      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	e000      	b.n	8004f3c <HAL_DMA_IRQHandler+0xb0>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	4a55      	ldr	r2, [pc, #340]	; (8005094 <HAL_DMA_IRQHandler+0x208>)
 8004f3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8094 	beq.w	8005072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f52:	e08e      	b.n	8005072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	2202      	movs	r2, #2
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d056      	beq.n	8005012 <HAL_DMA_IRQHandler+0x186>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d051      	beq.n	8005012 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 020a 	bic.w	r2, r2, #10
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a38      	ldr	r2, [pc, #224]	; (800507c <HAL_DMA_IRQHandler+0x1f0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d029      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x166>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a37      	ldr	r2, [pc, #220]	; (8005080 <HAL_DMA_IRQHandler+0x1f4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_DMA_IRQHandler+0x162>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a35      	ldr	r2, [pc, #212]	; (8005084 <HAL_DMA_IRQHandler+0x1f8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01a      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x15c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a34      	ldr	r2, [pc, #208]	; (8005088 <HAL_DMA_IRQHandler+0x1fc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d012      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x156>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a32      	ldr	r2, [pc, #200]	; (800508c <HAL_DMA_IRQHandler+0x200>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x150>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a31      	ldr	r2, [pc, #196]	; (8005090 <HAL_DMA_IRQHandler+0x204>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d102      	bne.n	8004fd6 <HAL_DMA_IRQHandler+0x14a>
 8004fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fd4:	e00e      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fda:	e00b      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe0:	e008      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fe6:	e005      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fec:	e002      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004fee:	2320      	movs	r3, #32
 8004ff0:	e000      	b.n	8004ff4 <HAL_DMA_IRQHandler+0x168>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_DMA_IRQHandler+0x208>)
 8004ff6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d034      	beq.n	8005072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005010:	e02f      	b.n	8005072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2208      	movs	r2, #8
 8005018:	409a      	lsls	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d028      	beq.n	8005074 <HAL_DMA_IRQHandler+0x1e8>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d023      	beq.n	8005074 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 020e 	bic.w	r2, r2, #14
 800503a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f202 	lsl.w	r2, r1, r2
 800504a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    }
  }
  return;
 8005072:	bf00      	nop
 8005074:	bf00      	nop
}
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40020008 	.word	0x40020008
 8005080:	4002001c 	.word	0x4002001c
 8005084:	40020030 	.word	0x40020030
 8005088:	40020044 	.word	0x40020044
 800508c:	40020058 	.word	0x40020058
 8005090:	4002006c 	.word	0x4002006c
 8005094:	40020000 	.word	0x40020000

08005098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005098:	b480      	push	{r7}
 800509a:	b08b      	sub	sp, #44	; 0x2c
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050aa:	e169      	b.n	8005380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050ac:	2201      	movs	r2, #1
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 8158 	bne.w	800537a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4a9a      	ldr	r2, [pc, #616]	; (8005338 <HAL_GPIO_Init+0x2a0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d05e      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
 80050d4:	4a98      	ldr	r2, [pc, #608]	; (8005338 <HAL_GPIO_Init+0x2a0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d875      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 80050da:	4a98      	ldr	r2, [pc, #608]	; (800533c <HAL_GPIO_Init+0x2a4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d058      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
 80050e0:	4a96      	ldr	r2, [pc, #600]	; (800533c <HAL_GPIO_Init+0x2a4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d86f      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 80050e6:	4a96      	ldr	r2, [pc, #600]	; (8005340 <HAL_GPIO_Init+0x2a8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d052      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
 80050ec:	4a94      	ldr	r2, [pc, #592]	; (8005340 <HAL_GPIO_Init+0x2a8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d869      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 80050f2:	4a94      	ldr	r2, [pc, #592]	; (8005344 <HAL_GPIO_Init+0x2ac>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04c      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
 80050f8:	4a92      	ldr	r2, [pc, #584]	; (8005344 <HAL_GPIO_Init+0x2ac>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d863      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 80050fe:	4a92      	ldr	r2, [pc, #584]	; (8005348 <HAL_GPIO_Init+0x2b0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d046      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
 8005104:	4a90      	ldr	r2, [pc, #576]	; (8005348 <HAL_GPIO_Init+0x2b0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d85d      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 800510a:	2b12      	cmp	r3, #18
 800510c:	d82a      	bhi.n	8005164 <HAL_GPIO_Init+0xcc>
 800510e:	2b12      	cmp	r3, #18
 8005110:	d859      	bhi.n	80051c6 <HAL_GPIO_Init+0x12e>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_GPIO_Init+0x80>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005193 	.word	0x08005193
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800517f 	.word	0x0800517f
 8005124:	080051c1 	.word	0x080051c1
 8005128:	080051c7 	.word	0x080051c7
 800512c:	080051c7 	.word	0x080051c7
 8005130:	080051c7 	.word	0x080051c7
 8005134:	080051c7 	.word	0x080051c7
 8005138:	080051c7 	.word	0x080051c7
 800513c:	080051c7 	.word	0x080051c7
 8005140:	080051c7 	.word	0x080051c7
 8005144:	080051c7 	.word	0x080051c7
 8005148:	080051c7 	.word	0x080051c7
 800514c:	080051c7 	.word	0x080051c7
 8005150:	080051c7 	.word	0x080051c7
 8005154:	080051c7 	.word	0x080051c7
 8005158:	080051c7 	.word	0x080051c7
 800515c:	08005175 	.word	0x08005175
 8005160:	08005189 	.word	0x08005189
 8005164:	4a79      	ldr	r2, [pc, #484]	; (800534c <HAL_GPIO_Init+0x2b4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800516a:	e02c      	b.n	80051c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	623b      	str	r3, [r7, #32]
          break;
 8005172:	e029      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	3304      	adds	r3, #4
 800517a:	623b      	str	r3, [r7, #32]
          break;
 800517c:	e024      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	3308      	adds	r3, #8
 8005184:	623b      	str	r3, [r7, #32]
          break;
 8005186:	e01f      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	330c      	adds	r3, #12
 800518e:	623b      	str	r3, [r7, #32]
          break;
 8005190:	e01a      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800519a:	2304      	movs	r3, #4
 800519c:	623b      	str	r3, [r7, #32]
          break;
 800519e:	e013      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051a8:	2308      	movs	r3, #8
 80051aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	611a      	str	r2, [r3, #16]
          break;
 80051b2:	e009      	b.n	80051c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051b4:	2308      	movs	r3, #8
 80051b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	615a      	str	r2, [r3, #20]
          break;
 80051be:	e003      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
          break;
 80051c4:	e000      	b.n	80051c8 <HAL_GPIO_Init+0x130>
          break;
 80051c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2bff      	cmp	r3, #255	; 0xff
 80051cc:	d801      	bhi.n	80051d2 <HAL_GPIO_Init+0x13a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	e001      	b.n	80051d6 <HAL_GPIO_Init+0x13e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2bff      	cmp	r3, #255	; 0xff
 80051dc:	d802      	bhi.n	80051e4 <HAL_GPIO_Init+0x14c>
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	e002      	b.n	80051ea <HAL_GPIO_Init+0x152>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	3b08      	subs	r3, #8
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	210f      	movs	r1, #15
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	6a39      	ldr	r1, [r7, #32]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	431a      	orrs	r2, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80b1 	beq.w	800537a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005218:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <HAL_GPIO_Init+0x2b8>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	4a4c      	ldr	r2, [pc, #304]	; (8005350 <HAL_GPIO_Init+0x2b8>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	6193      	str	r3, [r2, #24]
 8005224:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_GPIO_Init+0x2b8>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005230:	4a48      	ldr	r2, [pc, #288]	; (8005354 <HAL_GPIO_Init+0x2bc>)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	3302      	adds	r3, #2
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	220f      	movs	r2, #15
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a40      	ldr	r2, [pc, #256]	; (8005358 <HAL_GPIO_Init+0x2c0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_GPIO_Init+0x1ec>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3f      	ldr	r2, [pc, #252]	; (800535c <HAL_GPIO_Init+0x2c4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00d      	beq.n	8005280 <HAL_GPIO_Init+0x1e8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3e      	ldr	r2, [pc, #248]	; (8005360 <HAL_GPIO_Init+0x2c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <HAL_GPIO_Init+0x1e4>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <HAL_GPIO_Init+0x2cc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_GPIO_Init+0x1e0>
 8005274:	2303      	movs	r3, #3
 8005276:	e006      	b.n	8005286 <HAL_GPIO_Init+0x1ee>
 8005278:	2304      	movs	r3, #4
 800527a:	e004      	b.n	8005286 <HAL_GPIO_Init+0x1ee>
 800527c:	2302      	movs	r3, #2
 800527e:	e002      	b.n	8005286 <HAL_GPIO_Init+0x1ee>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_GPIO_Init+0x1ee>
 8005284:	2300      	movs	r3, #0
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	f002 0203 	and.w	r2, r2, #3
 800528c:	0092      	lsls	r2, r2, #2
 800528e:	4093      	lsls	r3, r2
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005296:	492f      	ldr	r1, [pc, #188]	; (8005354 <HAL_GPIO_Init+0x2bc>)
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	3302      	adds	r3, #2
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	492c      	ldr	r1, [pc, #176]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]
 80052bc:	e006      	b.n	80052cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052be:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	4928      	ldr	r1, [pc, #160]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	4922      	ldr	r1, [pc, #136]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60cb      	str	r3, [r1, #12]
 80052e4:	e006      	b.n	80052f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	491e      	ldr	r1, [pc, #120]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4918      	ldr	r1, [pc, #96]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
 800530c:	e006      	b.n	800531c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	43db      	mvns	r3, r3
 8005316:	4914      	ldr	r1, [pc, #80]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 8005318:	4013      	ands	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d021      	beq.n	800536c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	490e      	ldr	r1, [pc, #56]	; (8005368 <HAL_GPIO_Init+0x2d0>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
 8005334:	e021      	b.n	800537a <HAL_GPIO_Init+0x2e2>
 8005336:	bf00      	nop
 8005338:	10320000 	.word	0x10320000
 800533c:	10310000 	.word	0x10310000
 8005340:	10220000 	.word	0x10220000
 8005344:	10210000 	.word	0x10210000
 8005348:	10120000 	.word	0x10120000
 800534c:	10110000 	.word	0x10110000
 8005350:	40021000 	.word	0x40021000
 8005354:	40010000 	.word	0x40010000
 8005358:	40010800 	.word	0x40010800
 800535c:	40010c00 	.word	0x40010c00
 8005360:	40011000 	.word	0x40011000
 8005364:	40011400 	.word	0x40011400
 8005368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_GPIO_Init+0x304>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	43db      	mvns	r3, r3
 8005374:	4909      	ldr	r1, [pc, #36]	; (800539c <HAL_GPIO_Init+0x304>)
 8005376:	4013      	ands	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	3301      	adds	r3, #1
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	fa22 f303 	lsr.w	r3, r2, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f47f ae8e 	bne.w	80050ac <HAL_GPIO_Init+0x14>
  }
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	372c      	adds	r7, #44	; 0x2c
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	40010400 	.word	0x40010400

080053a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	807b      	strh	r3, [r7, #2]
 80053ac:	4613      	mov	r3, r2
 80053ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053b0:	787b      	ldrb	r3, [r7, #1]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053bc:	e003      	b.n	80053c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053be:	887b      	ldrh	r3, [r7, #2]
 80053c0:	041a      	lsls	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	611a      	str	r2, [r3, #16]
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e272      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f0:	4b92      	ldr	r3, [pc, #584]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 030c 	and.w	r3, r3, #12
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d00c      	beq.n	8005416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053fc:	4b8f      	ldr	r3, [pc, #572]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d112      	bne.n	800542e <HAL_RCC_OscConfig+0x5e>
 8005408:	4b8c      	ldr	r3, [pc, #560]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005414:	d10b      	bne.n	800542e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005416:	4b89      	ldr	r3, [pc, #548]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d06c      	beq.n	80054fc <HAL_RCC_OscConfig+0x12c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d168      	bne.n	80054fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e24c      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005436:	d106      	bne.n	8005446 <HAL_RCC_OscConfig+0x76>
 8005438:	4b80      	ldr	r3, [pc, #512]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a7f      	ldr	r2, [pc, #508]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800543e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e02e      	b.n	80054a4 <HAL_RCC_OscConfig+0xd4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0x98>
 800544e:	4b7b      	ldr	r3, [pc, #492]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a7a      	ldr	r2, [pc, #488]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b78      	ldr	r3, [pc, #480]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a77      	ldr	r2, [pc, #476]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e01d      	b.n	80054a4 <HAL_RCC_OscConfig+0xd4>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0xbc>
 8005472:	4b72      	ldr	r3, [pc, #456]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a71      	ldr	r2, [pc, #452]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b6f      	ldr	r3, [pc, #444]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a6e      	ldr	r2, [pc, #440]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0xd4>
 800548c:	4b6b      	ldr	r3, [pc, #428]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6a      	ldr	r2, [pc, #424]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b68      	ldr	r3, [pc, #416]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a67      	ldr	r2, [pc, #412]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fe ff7c 	bl	80043a8 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fe ff78 	bl	80043a8 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e200      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b5d      	ldr	r3, [pc, #372]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0xe4>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fe ff68 	bl	80043a8 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fe ff64 	bl	80043a8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e1ec      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	4b53      	ldr	r3, [pc, #332]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x10c>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d063      	beq.n	80055d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800550a:	4b4c      	ldr	r3, [pc, #304]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005516:	4b49      	ldr	r3, [pc, #292]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b08      	cmp	r3, #8
 8005520:	d11c      	bne.n	800555c <HAL_RCC_OscConfig+0x18c>
 8005522:	4b46      	ldr	r3, [pc, #280]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x176>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e1c0      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	4b3d      	ldr	r3, [pc, #244]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4939      	ldr	r1, [pc, #228]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555a:	e03a      	b.n	80055d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005564:	4b36      	ldr	r3, [pc, #216]	; (8005640 <HAL_RCC_OscConfig+0x270>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fe ff1d 	bl	80043a8 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005572:	f7fe ff19 	bl	80043a8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e1a1      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005584:	4b2d      	ldr	r3, [pc, #180]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005590:	4b2a      	ldr	r3, [pc, #168]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4927      	ldr	r1, [pc, #156]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]
 80055a4:	e015      	b.n	80055d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <HAL_RCC_OscConfig+0x270>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fe fefc 	bl	80043a8 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b4:	f7fe fef8 	bl	80043a8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e180      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03a      	beq.n	8005654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d019      	beq.n	800561a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <HAL_RCC_OscConfig+0x274>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ec:	f7fe fedc 	bl	80043a8 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f4:	f7fe fed8 	bl	80043a8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e160      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HAL_RCC_OscConfig+0x26c>)
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005612:	2001      	movs	r0, #1
 8005614:	f000 face 	bl	8005bb4 <RCC_Delay>
 8005618:	e01c      	b.n	8005654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_RCC_OscConfig+0x274>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005620:	f7fe fec2 	bl	80043a8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005626:	e00f      	b.n	8005648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005628:	f7fe febe 	bl	80043a8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d908      	bls.n	8005648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e146      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	42420000 	.word	0x42420000
 8005644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005648:	4b92      	ldr	r3, [pc, #584]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e9      	bne.n	8005628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a6 	beq.w	80057ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005666:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10d      	bne.n	800568e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005672:	4b88      	ldr	r3, [pc, #544]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	4a87      	ldr	r2, [pc, #540]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567c:	61d3      	str	r3, [r2, #28]
 800567e:	4b85      	ldr	r3, [pc, #532]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568e:	4b82      	ldr	r3, [pc, #520]	; (8005898 <HAL_RCC_OscConfig+0x4c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d118      	bne.n	80056cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569a:	4b7f      	ldr	r3, [pc, #508]	; (8005898 <HAL_RCC_OscConfig+0x4c8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a7e      	ldr	r2, [pc, #504]	; (8005898 <HAL_RCC_OscConfig+0x4c8>)
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a6:	f7fe fe7f 	bl	80043a8 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ae:	f7fe fe7b 	bl	80043a8 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b64      	cmp	r3, #100	; 0x64
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e103      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c0:	4b75      	ldr	r3, [pc, #468]	; (8005898 <HAL_RCC_OscConfig+0x4c8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d106      	bne.n	80056e2 <HAL_RCC_OscConfig+0x312>
 80056d4:	4b6f      	ldr	r3, [pc, #444]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6213      	str	r3, [r2, #32]
 80056e0:	e02d      	b.n	800573e <HAL_RCC_OscConfig+0x36e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0x334>
 80056ea:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	4a69      	ldr	r2, [pc, #420]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	6213      	str	r3, [r2, #32]
 80056f6:	4b67      	ldr	r3, [pc, #412]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	4a66      	ldr	r2, [pc, #408]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	6213      	str	r3, [r2, #32]
 8005702:	e01c      	b.n	800573e <HAL_RCC_OscConfig+0x36e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b05      	cmp	r3, #5
 800570a:	d10c      	bne.n	8005726 <HAL_RCC_OscConfig+0x356>
 800570c:	4b61      	ldr	r3, [pc, #388]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	4a60      	ldr	r2, [pc, #384]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	6213      	str	r3, [r2, #32]
 8005718:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4a5d      	ldr	r2, [pc, #372]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6213      	str	r3, [r2, #32]
 8005724:	e00b      	b.n	800573e <HAL_RCC_OscConfig+0x36e>
 8005726:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	4a5a      	ldr	r2, [pc, #360]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6213      	str	r3, [r2, #32]
 8005732:	4b58      	ldr	r3, [pc, #352]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4a57      	ldr	r2, [pc, #348]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d015      	beq.n	8005772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005746:	f7fe fe2f 	bl	80043a8 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fe fe2b 	bl	80043a8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0b1      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ee      	beq.n	800574e <HAL_RCC_OscConfig+0x37e>
 8005770:	e014      	b.n	800579c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005772:	f7fe fe19 	bl	80043a8 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fe fe15 	bl	80043a8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e09b      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005790:	4b40      	ldr	r3, [pc, #256]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ee      	bne.n	800577a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a2:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8087 	beq.w	80058c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b8:	4b36      	ldr	r3, [pc, #216]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d061      	beq.n	8005888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d146      	bne.n	800585a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057cc:	4b33      	ldr	r3, [pc, #204]	; (800589c <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fe fde9 	bl	80043a8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057da:	f7fe fde5 	bl	80043a8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e06d      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ec:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d108      	bne.n	8005814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4921      	ldr	r1, [pc, #132]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a19      	ldr	r1, [r3, #32]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	430b      	orrs	r3, r1
 8005826:	491b      	ldr	r1, [pc, #108]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_RCC_OscConfig+0x4cc>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005832:	f7fe fdb9 	bl	80043a8 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583a:	f7fe fdb5 	bl	80043a8 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e03d      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x46a>
 8005858:	e035      	b.n	80058c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCC_OscConfig+0x4cc>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fe fda2 	bl	80043a8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7fe fd9e 	bl	80043a8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e026      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCC_OscConfig+0x4c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x498>
 8005886:	e01e      	b.n	80058c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e019      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_OscConfig+0x500>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d106      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d001      	beq.n	80058c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000

080058d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0d0      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b6a      	ldr	r3, [pc, #424]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d910      	bls.n	8005918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b67      	ldr	r3, [pc, #412]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 0207 	bic.w	r2, r3, #7
 80058fe:	4965      	ldr	r1, [pc, #404]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0b8      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d020      	beq.n	8005966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005930:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a58      	ldr	r2, [pc, #352]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800593a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005948:	4b53      	ldr	r3, [pc, #332]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005954:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	494d      	ldr	r1, [pc, #308]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005962:	4313      	orrs	r3, r2
 8005964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d040      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	4b47      	ldr	r3, [pc, #284]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d115      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e07f      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d109      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e073      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e06b      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b2:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4936      	ldr	r1, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c4:	f7fe fcf0 	bl	80043a8 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059cc:	f7fe fcec 	bl	80043a8 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e053      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 020c 	and.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1eb      	bne.n	80059cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d210      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 0207 	bic.w	r2, r3, #7
 8005a0a:	4922      	ldr	r1, [pc, #136]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e032      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4916      	ldr	r1, [pc, #88]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	490e      	ldr	r1, [pc, #56]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a62:	f000 f821 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a66:	4602      	mov	r2, r0
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	490a      	ldr	r1, [pc, #40]	; (8005a9c <HAL_RCC_ClockConfig+0x1c8>)
 8005a74:	5ccb      	ldrb	r3, [r1, r3]
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8005a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fc4e 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	08009520 	.word	0x08009520
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	20000004 	.word	0x20000004

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x30>
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x36>
 8005ad6:	e027      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ada:	613b      	str	r3, [r7, #16]
      break;
 8005adc:	e027      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0c9b      	lsrs	r3, r3, #18
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ae8:	5cd3      	ldrb	r3, [r2, r3]
 8005aea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d010      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	0c5b      	lsrs	r3, r3, #17
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b02:	5cd3      	ldrb	r3, [r2, r3]
 8005b04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b0a:	fb03 f202 	mul.w	r2, r3, r2
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e004      	b.n	8005b22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	613b      	str	r3, [r7, #16]
      break;
 8005b26:	e002      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b2a:	613b      	str	r3, [r7, #16]
      break;
 8005b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2e:	693b      	ldr	r3, [r7, #16]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	007a1200 	.word	0x007a1200
 8005b44:	08009538 	.word	0x08009538
 8005b48:	08009548 	.word	0x08009548
 8005b4c:	003d0900 	.word	0x003d0900

08005b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	20000000 	.word	0x20000000

08005b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b68:	f7ff fff2 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4903      	ldr	r1, [pc, #12]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	08009530 	.word	0x08009530

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b90:	f7ff ffde 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	08009530 	.word	0x08009530

08005bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <RCC_Delay+0x34>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <RCC_Delay+0x38>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0a5b      	lsrs	r3, r3, #9
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bd0:	bf00      	nop
  }
  while (Delay --);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1e5a      	subs	r2, r3, #1
 8005bd6:	60fa      	str	r2, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f9      	bne.n	8005bd0 <RCC_Delay+0x1c>
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr
 8005be8:	20000000 	.word	0x20000000
 8005bec:	10624dd3 	.word	0x10624dd3

08005bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e076      	b.n	8005cf0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c12:	d009      	beq.n	8005c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	e005      	b.n	8005c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fe f9de 	bl	8004004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	ea42 0103 	orr.w	r1, r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	0c1a      	lsrs	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f002 0204 	and.w	r2, r2, #4
 8005cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_SPI_Transmit+0x22>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e12d      	b.n	8005f76 <HAL_SPI_Transmit+0x27e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d22:	f7fe fb41 	bl	80043a8 <HAL_GetTick>
 8005d26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d002      	beq.n	8005d3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d3c:	e116      	b.n	8005f6c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_SPI_Transmit+0x52>
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d4e:	e10d      	b.n	8005f6c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2203      	movs	r2, #3
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d96:	d10f      	bne.n	8005db8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d007      	beq.n	8005dd6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dde:	d14f      	bne.n	8005e80 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_Transmit+0xf6>
 8005de8:	8afb      	ldrh	r3, [r7, #22]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d142      	bne.n	8005e74 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	881a      	ldrh	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	1c9a      	adds	r2, r3, #2
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e12:	e02f      	b.n	8005e74 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d112      	bne.n	8005e48 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	881a      	ldrh	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	1c9a      	adds	r2, r3, #2
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e46:	e015      	b.n	8005e74 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e48:	f7fe faae 	bl	80043a8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d803      	bhi.n	8005e60 <HAL_SPI_Transmit+0x168>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d102      	bne.n	8005e66 <HAL_SPI_Transmit+0x16e>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e72:	e07b      	b.n	8005f6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1ca      	bne.n	8005e14 <HAL_SPI_Transmit+0x11c>
 8005e7e:	e050      	b.n	8005f22 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_SPI_Transmit+0x196>
 8005e88:	8afb      	ldrh	r3, [r7, #22]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d144      	bne.n	8005f18 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eb4:	e030      	b.n	8005f18 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d113      	bne.n	8005eec <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eea:	e015      	b.n	8005f18 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eec:	f7fe fa5c 	bl	80043a8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d803      	bhi.n	8005f04 <HAL_SPI_Transmit+0x20c>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d102      	bne.n	8005f0a <HAL_SPI_Transmit+0x212>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f16:	e029      	b.n	8005f6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1c9      	bne.n	8005eb6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fbcc 	bl	80066c4 <SPI_EndRxTxTransaction>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e003      	b.n	8005f6c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b088      	sub	sp, #32
 8005f82:	af02      	add	r7, sp, #8
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fa2:	e0fb      	b.n	800619c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fac:	d112      	bne.n	8005fd4 <HAL_SPI_Receive+0x56>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f8ef 	bl	80061ae <HAL_SPI_TransmitReceive>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	e0e8      	b.n	80061a6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SPI_Receive+0x64>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e0e1      	b.n	80061a6 <HAL_SPI_Receive+0x228>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fea:	f7fe f9dd 	bl	80043a8 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Receive+0x7e>
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006000:	e0cc      	b.n	800619c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2204      	movs	r2, #4
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	d10f      	bne.n	800606a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d007      	beq.n	8006088 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d16a      	bne.n	8006166 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006090:	e032      	b.n	80060f8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d115      	bne.n	80060cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f103 020c 	add.w	r2, r3, #12
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ca:	e015      	b.n	80060f8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060cc:	f7fe f96c 	bl	80043a8 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d803      	bhi.n	80060e4 <HAL_SPI_Receive+0x166>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Receive+0x16c>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80060f6:	e051      	b.n	800619c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c7      	bne.n	8006092 <HAL_SPI_Receive+0x114>
 8006102:	e035      	b.n	8006170 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d113      	bne.n	800613a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	b292      	uxth	r2, r2
 800611e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006138:	e015      	b.n	8006166 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613a:	f7fe f935 	bl	80043a8 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d803      	bhi.n	8006152 <HAL_SPI_Receive+0x1d4>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d102      	bne.n	8006158 <HAL_SPI_Receive+0x1da>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006164:	e01a      	b.n	800619c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1c9      	bne.n	8006104 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fa53 	bl	8006620 <SPI_EndRxTransaction>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
 8006192:	e003      	b.n	800619c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b08c      	sub	sp, #48	; 0x30
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x26>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e198      	b.n	8006506 <HAL_SPI_TransmitReceive+0x358>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061dc:	f7fe f8e4 	bl	80043a8 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061f2:	887b      	ldrh	r3, [r7, #2]
 80061f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d00f      	beq.n	800621e <HAL_SPI_TransmitReceive+0x70>
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006204:	d107      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x68>
 800620e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006212:	2b04      	cmp	r3, #4
 8006214:	d003      	beq.n	800621e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006216:	2302      	movs	r3, #2
 8006218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800621c:	e16d      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x82>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x82>
 800622a:	887b      	ldrh	r3, [r7, #2]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006236:	e160      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b04      	cmp	r3, #4
 8006242:	d003      	beq.n	800624c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2205      	movs	r2, #5
 8006248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	887a      	ldrh	r2, [r7, #2]
 800625c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	887a      	ldrh	r2, [r7, #2]
 800626e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d007      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a8:	d17c      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x10a>
 80062b2:	8b7b      	ldrh	r3, [r7, #26]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d16a      	bne.n	800638e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	1c9a      	adds	r2, r3, #2
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062dc:	e057      	b.n	800638e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d11b      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x176>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d016      	beq.n	8006324 <HAL_SPI_TransmitReceive+0x176>
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d113      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	1c9a      	adds	r2, r3, #2
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d119      	bne.n	8006366 <HAL_SPI_TransmitReceive+0x1b8>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d014      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	b292      	uxth	r2, r2
 8006348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006362:	2301      	movs	r3, #1
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006366:	f7fe f81f 	bl	80043a8 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006372:	429a      	cmp	r2, r3
 8006374:	d80b      	bhi.n	800638e <HAL_SPI_TransmitReceive+0x1e0>
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d007      	beq.n	800638e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800638c:	e0b5      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1a2      	bne.n	80062de <HAL_SPI_TransmitReceive+0x130>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d19d      	bne.n	80062de <HAL_SPI_TransmitReceive+0x130>
 80063a2:	e080      	b.n	80064a6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0x204>
 80063ac:	8b7b      	ldrh	r3, [r7, #26]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d16f      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	7812      	ldrb	r2, [r2, #0]
 80063be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d8:	e05b      	b.n	8006492 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d11c      	bne.n	8006422 <HAL_SPI_TransmitReceive+0x274>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d017      	beq.n	8006422 <HAL_SPI_TransmitReceive+0x274>
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d114      	bne.n	8006422 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d119      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x2b6>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d014      	beq.n	8006464 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006460:	2301      	movs	r3, #1
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006464:	f7fd ffa0 	bl	80043a8 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006470:	429a      	cmp	r2, r3
 8006472:	d803      	bhi.n	800647c <HAL_SPI_TransmitReceive+0x2ce>
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x2d4>
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006490:	e033      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d19e      	bne.n	80063da <HAL_SPI_TransmitReceive+0x22c>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d199      	bne.n	80063da <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f90a 	bl	80066c4 <SPI_EndRxTxTransaction>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d006      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064c2:	e01a      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f0:	e003      	b.n	80064fa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006506:	4618      	mov	r0, r3
 8006508:	3730      	adds	r7, #48	; 0x30
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006520:	f7fd ff42 	bl	80043a8 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	4413      	add	r3, r2
 800652e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006530:	f7fd ff3a 	bl	80043a8 <HAL_GetTick>
 8006534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006536:	4b39      	ldr	r3, [pc, #228]	; (800661c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	015b      	lsls	r3, r3, #5
 800653c:	0d1b      	lsrs	r3, r3, #20
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	fb02 f303 	mul.w	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006546:	e054      	b.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d050      	beq.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006550:	f7fd ff2a 	bl	80043a8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	429a      	cmp	r2, r3
 800655e:	d902      	bls.n	8006566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d13d      	bne.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657e:	d111      	bne.n	80065a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006588:	d004      	beq.n	8006594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d107      	bne.n	80065a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d10f      	bne.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e017      	b.n	8006612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d19b      	bne.n	8006548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3720      	adds	r7, #32
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000000 	.word	0x20000000

08006620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006634:	d111      	bne.n	800665a <SPI_EndRxTransaction+0x3a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663e:	d004      	beq.n	800664a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006648:	d107      	bne.n	800665a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006658:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d117      	bne.n	8006694 <SPI_EndRxTransaction+0x74>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666c:	d112      	bne.n	8006694 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	2101      	movs	r1, #1
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ff49 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01a      	beq.n	80066ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e013      	b.n	80066bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ff36 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e000      	b.n	80066bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2180      	movs	r1, #128	; 0x80
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff ff18 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e000      	b.n	80066f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e042      	b.n	8006798 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fd fcb6 	bl	8004098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2224      	movs	r2, #36	; 0x24
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fd71 	bl	800722c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d16d      	bne.n	800689c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Transmit+0x2c>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e066      	b.n	800689e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2221      	movs	r2, #33	; 0x21
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067de:	f7fd fde3 	bl	80043a8 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f8:	d108      	bne.n	800680c <HAL_UART_Transmit+0x6c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	e003      	b.n	8006814 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006814:	e02a      	b.n	800686c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2200      	movs	r2, #0
 800681e:	2180      	movs	r1, #128	; 0x80
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 faf9 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e036      	b.n	800689e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	3302      	adds	r3, #2
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e007      	b.n	800685e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1cf      	bne.n	8006816 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2200      	movs	r2, #0
 800687e:	2140      	movs	r1, #64	; 0x40
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fac9 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b0ba      	sub	sp, #232	; 0xe8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_UART_IRQHandler+0x66>
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fbd1 	bl	80070ae <UART_Receive_IT>
      return;
 800690c:	e25b      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800690e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80de 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x22c>
 8006918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80d1 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_UART_IRQHandler+0xae>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f043 0201 	orr.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_UART_IRQHandler+0xd2>
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_UART_IRQHandler+0xf6>
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d011      	beq.n	80069ce <HAL_UART_IRQHandler+0x126>
 80069aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c6:	f043 0208 	orr.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 81f2 	beq.w	8006dbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_UART_IRQHandler+0x14e>
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fb5c 	bl	80070ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <HAL_UART_IRQHandler+0x17a>
 8006a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d04f      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa66 	bl	8006ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d041      	beq.n	8006aba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3314      	adds	r3, #20
 8006a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1d9      	bne.n	8006a36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	4a7e      	ldr	r2, [pc, #504]	; (8006c88 <HAL_UART_IRQHandler+0x3e0>)
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe f980 	bl	8004d9c <HAL_DMA_Abort_IT>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	e00e      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f99c 	bl	8006df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	e00a      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f998 	bl	8006df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f994 	bl	8006df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ace:	e175      	b.n	8006dbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	bf00      	nop
    return;
 8006ad2:	e173      	b.n	8006dbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 814f 	bne.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8148 	beq.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8141 	beq.w	8006d7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80b6 	beq.w	8006c8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8145 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	f080 813e 	bcs.w	8006dc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	f000 8088 	beq.w	8006c68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1d9      	bne.n	8006b58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e1      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e3      	bne.n	8006be0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c38:	f023 0310 	bic.w	r3, r3, #16
 8006c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e3      	bne.n	8006c26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f85e 	bl	8004d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8bf 	bl	8006e02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c84:	e09c      	b.n	8006dc0 <HAL_UART_IRQHandler+0x518>
 8006c86:	bf00      	nop
 8006c88:	08006fb9 	.word	0x08006fb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 808e 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8089 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e3      	bne.n	8006cea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	69b9      	ldr	r1, [r7, #24]
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	617b      	str	r3, [r7, #20]
   return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e3      	bne.n	8006d30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f844 	bl	8006e02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d7a:	e023      	b.n	8006dc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_UART_IRQHandler+0x4f4>
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f923 	bl	8006fe0 <UART_Transmit_IT>
    return;
 8006d9a:	e014      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f962 	bl	800707e <UART_EndTransmit_IT>
    return;
 8006dba:	e004      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dc4:	bf00      	nop
  }
}
 8006dc6:	37e8      	adds	r7, #232	; 0xe8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b090      	sub	sp, #64	; 0x40
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e28:	e050      	b.n	8006ecc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d04c      	beq.n	8006ecc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e38:	f7fd fab6 	bl	80043a8 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d241      	bcs.n	8006ecc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e68:	637a      	str	r2, [r7, #52]	; 0x34
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e9c:	623a      	str	r2, [r7, #32]
 8006e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	6a3a      	ldr	r2, [r7, #32]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e00f      	b.n	8006eec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d09f      	beq.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3740      	adds	r7, #64	; 0x40
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b095      	sub	sp, #84	; 0x54
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e5      	bne.n	8006f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d119      	bne.n	8006fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	647b      	str	r3, [r7, #68]	; 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f8c:	61ba      	str	r2, [r7, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	613b      	str	r3, [r7, #16]
   return(result);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fae:	bf00      	nop
 8006fb0:	3754      	adds	r7, #84	; 0x54
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff ff0c 	bl	8006df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b21      	cmp	r3, #33	; 0x21
 8006ff2:	d13e      	bne.n	8007072 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d114      	bne.n	8007028 <UART_Transmit_IT+0x48>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d110      	bne.n	8007028 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	1c9a      	adds	r2, r3, #2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]
 8007026:	e008      	b.n	800703a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	1c59      	adds	r1, r3, #1
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6211      	str	r1, [r2, #32]
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	84d1      	strh	r1, [r2, #38]	; 0x26
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fe94 	bl	8006dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b08c      	sub	sp, #48	; 0x30
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	f040 80ae 	bne.w	8007220 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d117      	bne.n	80070fe <UART_Receive_IT+0x50>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d113      	bne.n	80070fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	1c9a      	adds	r2, r3, #2
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
 80070fc:	e026      	b.n	800714c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d007      	beq.n	8007122 <UART_Receive_IT+0x74>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <UART_Receive_IT+0x82>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e008      	b.n	8007142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713c:	b2da      	uxtb	r2, r3
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29b      	uxth	r3, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4619      	mov	r1, r3
 800715a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800715c:	2b00      	cmp	r3, #0
 800715e:	d15d      	bne.n	800721c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0220 	bic.w	r2, r2, #32
 800716e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d135      	bne.n	8007212 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	613b      	str	r3, [r7, #16]
   return(result);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	623a      	str	r2, [r7, #32]
 80071ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	69f9      	ldr	r1, [r7, #28]
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d10a      	bne.n	8007204 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fdf9 	bl	8006e02 <HAL_UARTEx_RxEventCallback>
 8007210:	e002      	b.n	8007218 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fde3 	bl	8006dde <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e002      	b.n	8007222 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3730      	adds	r7, #48	; 0x30
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007266:	f023 030c 	bic.w	r3, r3, #12
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	430b      	orrs	r3, r1
 8007272:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <UART_SetConfig+0x114>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d103      	bne.n	800729c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007294:	f7fe fc7a 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	e002      	b.n	80072a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fe fc62 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 80072a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009a      	lsls	r2, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <UART_SetConfig+0x118>)
 80072ba:	fba2 2303 	umull	r2, r3, r2, r3
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	0119      	lsls	r1, r3, #4
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009a      	lsls	r2, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <UART_SetConfig+0x118>)
 80072da:	fba3 0302 	umull	r0, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	2064      	movs	r0, #100	; 0x64
 80072e2:	fb00 f303 	mul.w	r3, r0, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	3332      	adds	r3, #50	; 0x32
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <UART_SetConfig+0x118>)
 80072ee:	fba2 2303 	umull	r2, r3, r2, r3
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f8:	4419      	add	r1, r3
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009a      	lsls	r2, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <UART_SetConfig+0x118>)
 8007312:	fba3 0302 	umull	r0, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	2064      	movs	r0, #100	; 0x64
 800731a:	fb00 f303 	mul.w	r3, r0, r3
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	3332      	adds	r3, #50	; 0x32
 8007324:	4a07      	ldr	r2, [pc, #28]	; (8007344 <UART_SetConfig+0x118>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	440a      	add	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40013800 	.word	0x40013800
 8007344:	51eb851f 	.word	0x51eb851f

08007348 <asin>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	460d      	mov	r5, r1
 800734e:	f000 f8a7 	bl	80074a0 <__ieee754_asin>
 8007352:	4622      	mov	r2, r4
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	462b      	mov	r3, r5
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f9 fb55 	bl	8000a0c <__aeabi_dcmpun>
 8007362:	b988      	cbnz	r0, 8007388 <asin+0x40>
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f001 fb38 	bl	80089dc <fabs>
 800736c:	2200      	movs	r2, #0
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <asin+0x48>)
 8007370:	f7f9 fb42 	bl	80009f8 <__aeabi_dcmpgt>
 8007374:	b140      	cbz	r0, 8007388 <asin+0x40>
 8007376:	f001 fbc1 	bl	8008afc <__errno>
 800737a:	2321      	movs	r3, #33	; 0x21
 800737c:	6003      	str	r3, [r0, #0]
 800737e:	4805      	ldr	r0, [pc, #20]	; (8007394 <asin+0x4c>)
 8007380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007384:	f001 bb34 	b.w	80089f0 <nan>
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738e:	bf00      	nop
 8007390:	3ff00000 	.word	0x3ff00000
 8007394:	080095f5 	.word	0x080095f5

08007398 <atan2>:
 8007398:	f000 ba7e 	b.w	8007898 <__ieee754_atan2>

0800739c <pow>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4614      	mov	r4, r2
 80073a2:	461d      	mov	r5, r3
 80073a4:	4680      	mov	r8, r0
 80073a6:	4689      	mov	r9, r1
 80073a8:	f000 fb4a 	bl	8007a40 <__ieee754_pow>
 80073ac:	4622      	mov	r2, r4
 80073ae:	4606      	mov	r6, r0
 80073b0:	460f      	mov	r7, r1
 80073b2:	462b      	mov	r3, r5
 80073b4:	4620      	mov	r0, r4
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7f9 fb28 	bl	8000a0c <__aeabi_dcmpun>
 80073bc:	bbc8      	cbnz	r0, 8007432 <pow+0x96>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4640      	mov	r0, r8
 80073c4:	4649      	mov	r1, r9
 80073c6:	f7f9 faef 	bl	80009a8 <__aeabi_dcmpeq>
 80073ca:	b1b8      	cbz	r0, 80073fc <pow+0x60>
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f9 fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d141      	bne.n	8007460 <pow+0xc4>
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f001 faff 	bl	80089e2 <finite>
 80073e4:	b328      	cbz	r0, 8007432 <pow+0x96>
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f9 fae5 	bl	80009bc <__aeabi_dcmplt>
 80073f2:	b1f0      	cbz	r0, 8007432 <pow+0x96>
 80073f4:	f001 fb82 	bl	8008afc <__errno>
 80073f8:	2322      	movs	r3, #34	; 0x22
 80073fa:	e019      	b.n	8007430 <pow+0x94>
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f001 faef 	bl	80089e2 <finite>
 8007404:	b9c8      	cbnz	r0, 800743a <pow+0x9e>
 8007406:	4640      	mov	r0, r8
 8007408:	4649      	mov	r1, r9
 800740a:	f001 faea 	bl	80089e2 <finite>
 800740e:	b1a0      	cbz	r0, 800743a <pow+0x9e>
 8007410:	4620      	mov	r0, r4
 8007412:	4629      	mov	r1, r5
 8007414:	f001 fae5 	bl	80089e2 <finite>
 8007418:	b178      	cbz	r0, 800743a <pow+0x9e>
 800741a:	4632      	mov	r2, r6
 800741c:	463b      	mov	r3, r7
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 faf3 	bl	8000a0c <__aeabi_dcmpun>
 8007426:	2800      	cmp	r0, #0
 8007428:	d0e4      	beq.n	80073f4 <pow+0x58>
 800742a:	f001 fb67 	bl	8008afc <__errno>
 800742e:	2321      	movs	r3, #33	; 0x21
 8007430:	6003      	str	r3, [r0, #0]
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	f7f9 fab1 	bl	80009a8 <__aeabi_dcmpeq>
 8007446:	2800      	cmp	r0, #0
 8007448:	d0f3      	beq.n	8007432 <pow+0x96>
 800744a:	4640      	mov	r0, r8
 800744c:	4649      	mov	r1, r9
 800744e:	f001 fac8 	bl	80089e2 <finite>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0ed      	beq.n	8007432 <pow+0x96>
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f001 fac2 	bl	80089e2 <finite>
 800745e:	e7c8      	b.n	80073f2 <pow+0x56>
 8007460:	2600      	movs	r6, #0
 8007462:	4f01      	ldr	r7, [pc, #4]	; (8007468 <pow+0xcc>)
 8007464:	e7e5      	b.n	8007432 <pow+0x96>
 8007466:	bf00      	nop
 8007468:	3ff00000 	.word	0x3ff00000

0800746c <sqrtf>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4605      	mov	r5, r0
 8007470:	f001 f8ac 	bl	80085cc <__ieee754_sqrtf>
 8007474:	4629      	mov	r1, r5
 8007476:	4604      	mov	r4, r0
 8007478:	4628      	mov	r0, r5
 800747a:	f7f9 fe01 	bl	8001080 <__aeabi_fcmpun>
 800747e:	b968      	cbnz	r0, 800749c <sqrtf+0x30>
 8007480:	2100      	movs	r1, #0
 8007482:	4628      	mov	r0, r5
 8007484:	f7f9 fdd4 	bl	8001030 <__aeabi_fcmplt>
 8007488:	b140      	cbz	r0, 800749c <sqrtf+0x30>
 800748a:	f001 fb37 	bl	8008afc <__errno>
 800748e:	2321      	movs	r3, #33	; 0x21
 8007490:	2100      	movs	r1, #0
 8007492:	6003      	str	r3, [r0, #0]
 8007494:	4608      	mov	r0, r1
 8007496:	f7f9 fce1 	bl	8000e5c <__aeabi_fdiv>
 800749a:	4604      	mov	r4, r0
 800749c:	4620      	mov	r0, r4
 800749e:	bd38      	pop	{r3, r4, r5, pc}

080074a0 <__ieee754_asin>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	4bc4      	ldr	r3, [pc, #784]	; (80077b8 <__ieee754_asin+0x318>)
 80074a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80074aa:	b087      	sub	sp, #28
 80074ac:	429e      	cmp	r6, r3
 80074ae:	4602      	mov	r2, r0
 80074b0:	4604      	mov	r4, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	dd29      	ble.n	800750c <__ieee754_asin+0x6c>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80074be:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80074c2:	4333      	orrs	r3, r6
 80074c4:	d114      	bne.n	80074f0 <__ieee754_asin+0x50>
 80074c6:	a3a2      	add	r3, pc, #648	; (adr r3, 8007750 <__ieee754_asin+0x2b0>)
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f9 f804 	bl	80004d8 <__aeabi_dmul>
 80074d0:	a3a1      	add	r3, pc, #644	; (adr r3, 8007758 <__ieee754_asin+0x2b8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	f7f8 fffb 	bl	80004d8 <__aeabi_dmul>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4630      	mov	r0, r6
 80074e8:	4639      	mov	r1, r7
 80074ea:	f7f8 fe3f 	bl	800016c <__adddf3>
 80074ee:	e006      	b.n	80074fe <__ieee754_asin+0x5e>
 80074f0:	460b      	mov	r3, r1
 80074f2:	f7f8 fe39 	bl	8000168 <__aeabi_dsub>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	f7f9 f917 	bl	800072c <__aeabi_ddiv>
 80074fe:	4604      	mov	r4, r0
 8007500:	460d      	mov	r5, r1
 8007502:	4620      	mov	r0, r4
 8007504:	4629      	mov	r1, r5
 8007506:	b007      	add	sp, #28
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	4bab      	ldr	r3, [pc, #684]	; (80077bc <__ieee754_asin+0x31c>)
 800750e:	429e      	cmp	r6, r3
 8007510:	dc0e      	bgt.n	8007530 <__ieee754_asin+0x90>
 8007512:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007516:	f280 80ab 	bge.w	8007670 <__ieee754_asin+0x1d0>
 800751a:	a391      	add	r3, pc, #580	; (adr r3, 8007760 <__ieee754_asin+0x2c0>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 fe24 	bl	800016c <__adddf3>
 8007524:	2200      	movs	r2, #0
 8007526:	4ba6      	ldr	r3, [pc, #664]	; (80077c0 <__ieee754_asin+0x320>)
 8007528:	f7f9 fa66 	bl	80009f8 <__aeabi_dcmpgt>
 800752c:	2800      	cmp	r0, #0
 800752e:	d1e8      	bne.n	8007502 <__ieee754_asin+0x62>
 8007530:	4620      	mov	r0, r4
 8007532:	4629      	mov	r1, r5
 8007534:	f001 fa52 	bl	80089dc <fabs>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	2000      	movs	r0, #0
 800753e:	49a0      	ldr	r1, [pc, #640]	; (80077c0 <__ieee754_asin+0x320>)
 8007540:	f7f8 fe12 	bl	8000168 <__aeabi_dsub>
 8007544:	2200      	movs	r2, #0
 8007546:	4b9f      	ldr	r3, [pc, #636]	; (80077c4 <__ieee754_asin+0x324>)
 8007548:	f7f8 ffc6 	bl	80004d8 <__aeabi_dmul>
 800754c:	a386      	add	r3, pc, #536	; (adr r3, 8007768 <__ieee754_asin+0x2c8>)
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	4604      	mov	r4, r0
 8007554:	460d      	mov	r5, r1
 8007556:	f7f8 ffbf 	bl	80004d8 <__aeabi_dmul>
 800755a:	a385      	add	r3, pc, #532	; (adr r3, 8007770 <__ieee754_asin+0x2d0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fe04 	bl	800016c <__adddf3>
 8007564:	4622      	mov	r2, r4
 8007566:	462b      	mov	r3, r5
 8007568:	f7f8 ffb6 	bl	80004d8 <__aeabi_dmul>
 800756c:	a382      	add	r3, pc, #520	; (adr r3, 8007778 <__ieee754_asin+0x2d8>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fdf9 	bl	8000168 <__aeabi_dsub>
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	f7f8 ffad 	bl	80004d8 <__aeabi_dmul>
 800757e:	a380      	add	r3, pc, #512	; (adr r3, 8007780 <__ieee754_asin+0x2e0>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f8 fdf2 	bl	800016c <__adddf3>
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	f7f8 ffa4 	bl	80004d8 <__aeabi_dmul>
 8007590:	a37d      	add	r3, pc, #500	; (adr r3, 8007788 <__ieee754_asin+0x2e8>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f8 fde7 	bl	8000168 <__aeabi_dsub>
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	f7f8 ff9b 	bl	80004d8 <__aeabi_dmul>
 80075a2:	a37b      	add	r3, pc, #492	; (adr r3, 8007790 <__ieee754_asin+0x2f0>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f8 fde0 	bl	800016c <__adddf3>
 80075ac:	4622      	mov	r2, r4
 80075ae:	462b      	mov	r3, r5
 80075b0:	f7f8 ff92 	bl	80004d8 <__aeabi_dmul>
 80075b4:	a378      	add	r3, pc, #480	; (adr r3, 8007798 <__ieee754_asin+0x2f8>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	e9cd 0100 	strd	r0, r1, [sp]
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f8 ff89 	bl	80004d8 <__aeabi_dmul>
 80075c6:	a376      	add	r3, pc, #472	; (adr r3, 80077a0 <__ieee754_asin+0x300>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 fdcc 	bl	8000168 <__aeabi_dsub>
 80075d0:	4622      	mov	r2, r4
 80075d2:	462b      	mov	r3, r5
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	a373      	add	r3, pc, #460	; (adr r3, 80077a8 <__ieee754_asin+0x308>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f8 fdc5 	bl	800016c <__adddf3>
 80075e2:	4622      	mov	r2, r4
 80075e4:	462b      	mov	r3, r5
 80075e6:	f7f8 ff77 	bl	80004d8 <__aeabi_dmul>
 80075ea:	a371      	add	r3, pc, #452	; (adr r3, 80077b0 <__ieee754_asin+0x310>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f8 fdba 	bl	8000168 <__aeabi_dsub>
 80075f4:	4622      	mov	r2, r4
 80075f6:	462b      	mov	r3, r5
 80075f8:	f7f8 ff6e 	bl	80004d8 <__aeabi_dmul>
 80075fc:	4b70      	ldr	r3, [pc, #448]	; (80077c0 <__ieee754_asin+0x320>)
 80075fe:	2200      	movs	r2, #0
 8007600:	f7f8 fdb4 	bl	800016c <__adddf3>
 8007604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007608:	4620      	mov	r0, r4
 800760a:	4629      	mov	r1, r5
 800760c:	f000 ff2e 	bl	800846c <__ieee754_sqrt>
 8007610:	4b6d      	ldr	r3, [pc, #436]	; (80077c8 <__ieee754_asin+0x328>)
 8007612:	4682      	mov	sl, r0
 8007614:	429e      	cmp	r6, r3
 8007616:	468b      	mov	fp, r1
 8007618:	f340 80d8 	ble.w	80077cc <__ieee754_asin+0x32c>
 800761c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007624:	f7f9 f882 	bl	800072c <__aeabi_ddiv>
 8007628:	4652      	mov	r2, sl
 800762a:	465b      	mov	r3, fp
 800762c:	f7f8 ff54 	bl	80004d8 <__aeabi_dmul>
 8007630:	4652      	mov	r2, sl
 8007632:	465b      	mov	r3, fp
 8007634:	f7f8 fd9a 	bl	800016c <__adddf3>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	f7f8 fd96 	bl	800016c <__adddf3>
 8007640:	a345      	add	r3, pc, #276	; (adr r3, 8007758 <__ieee754_asin+0x2b8>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 fd8f 	bl	8000168 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	a140      	add	r1, pc, #256	; (adr r1, 8007750 <__ieee754_asin+0x2b0>)
 8007650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007654:	f7f8 fd88 	bl	8000168 <__aeabi_dsub>
 8007658:	9b05      	ldr	r3, [sp, #20]
 800765a:	4604      	mov	r4, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfdc      	itt	le
 8007660:	4602      	movle	r2, r0
 8007662:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007666:	460d      	mov	r5, r1
 8007668:	bfdc      	itt	le
 800766a:	4614      	movle	r4, r2
 800766c:	461d      	movle	r5, r3
 800766e:	e748      	b.n	8007502 <__ieee754_asin+0x62>
 8007670:	460b      	mov	r3, r1
 8007672:	f7f8 ff31 	bl	80004d8 <__aeabi_dmul>
 8007676:	a33c      	add	r3, pc, #240	; (adr r3, 8007768 <__ieee754_asin+0x2c8>)
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	a33a      	add	r3, pc, #232	; (adr r3, 8007770 <__ieee754_asin+0x2d0>)
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f7f8 fd6f 	bl	800016c <__adddf3>
 800768e:	4632      	mov	r2, r6
 8007690:	463b      	mov	r3, r7
 8007692:	f7f8 ff21 	bl	80004d8 <__aeabi_dmul>
 8007696:	a338      	add	r3, pc, #224	; (adr r3, 8007778 <__ieee754_asin+0x2d8>)
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f7f8 fd64 	bl	8000168 <__aeabi_dsub>
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	f7f8 ff18 	bl	80004d8 <__aeabi_dmul>
 80076a8:	a335      	add	r3, pc, #212	; (adr r3, 8007780 <__ieee754_asin+0x2e0>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f8 fd5d 	bl	800016c <__adddf3>
 80076b2:	4632      	mov	r2, r6
 80076b4:	463b      	mov	r3, r7
 80076b6:	f7f8 ff0f 	bl	80004d8 <__aeabi_dmul>
 80076ba:	a333      	add	r3, pc, #204	; (adr r3, 8007788 <__ieee754_asin+0x2e8>)
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f7f8 fd52 	bl	8000168 <__aeabi_dsub>
 80076c4:	4632      	mov	r2, r6
 80076c6:	463b      	mov	r3, r7
 80076c8:	f7f8 ff06 	bl	80004d8 <__aeabi_dmul>
 80076cc:	a330      	add	r3, pc, #192	; (adr r3, 8007790 <__ieee754_asin+0x2f0>)
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	f7f8 fd4b 	bl	800016c <__adddf3>
 80076d6:	4632      	mov	r2, r6
 80076d8:	463b      	mov	r3, r7
 80076da:	f7f8 fefd 	bl	80004d8 <__aeabi_dmul>
 80076de:	a32e      	add	r3, pc, #184	; (adr r3, 8007798 <__ieee754_asin+0x2f8>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	4680      	mov	r8, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f8 fef4 	bl	80004d8 <__aeabi_dmul>
 80076f0:	a32b      	add	r3, pc, #172	; (adr r3, 80077a0 <__ieee754_asin+0x300>)
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f7f8 fd37 	bl	8000168 <__aeabi_dsub>
 80076fa:	4632      	mov	r2, r6
 80076fc:	463b      	mov	r3, r7
 80076fe:	f7f8 feeb 	bl	80004d8 <__aeabi_dmul>
 8007702:	a329      	add	r3, pc, #164	; (adr r3, 80077a8 <__ieee754_asin+0x308>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f7f8 fd30 	bl	800016c <__adddf3>
 800770c:	4632      	mov	r2, r6
 800770e:	463b      	mov	r3, r7
 8007710:	f7f8 fee2 	bl	80004d8 <__aeabi_dmul>
 8007714:	a326      	add	r3, pc, #152	; (adr r3, 80077b0 <__ieee754_asin+0x310>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f7f8 fd25 	bl	8000168 <__aeabi_dsub>
 800771e:	4632      	mov	r2, r6
 8007720:	463b      	mov	r3, r7
 8007722:	f7f8 fed9 	bl	80004d8 <__aeabi_dmul>
 8007726:	2200      	movs	r2, #0
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <__ieee754_asin+0x320>)
 800772a:	f7f8 fd1f 	bl	800016c <__adddf3>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fff9 	bl	800072c <__aeabi_ddiv>
 800773a:	4622      	mov	r2, r4
 800773c:	462b      	mov	r3, r5
 800773e:	f7f8 fecb 	bl	80004d8 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	e6ce      	b.n	80074ea <__ieee754_asin+0x4a>
 800774c:	f3af 8000 	nop.w
 8007750:	54442d18 	.word	0x54442d18
 8007754:	3ff921fb 	.word	0x3ff921fb
 8007758:	33145c07 	.word	0x33145c07
 800775c:	3c91a626 	.word	0x3c91a626
 8007760:	8800759c 	.word	0x8800759c
 8007764:	7e37e43c 	.word	0x7e37e43c
 8007768:	0dfdf709 	.word	0x0dfdf709
 800776c:	3f023de1 	.word	0x3f023de1
 8007770:	7501b288 	.word	0x7501b288
 8007774:	3f49efe0 	.word	0x3f49efe0
 8007778:	b5688f3b 	.word	0xb5688f3b
 800777c:	3fa48228 	.word	0x3fa48228
 8007780:	0e884455 	.word	0x0e884455
 8007784:	3fc9c155 	.word	0x3fc9c155
 8007788:	03eb6f7d 	.word	0x03eb6f7d
 800778c:	3fd4d612 	.word	0x3fd4d612
 8007790:	55555555 	.word	0x55555555
 8007794:	3fc55555 	.word	0x3fc55555
 8007798:	b12e9282 	.word	0xb12e9282
 800779c:	3fb3b8c5 	.word	0x3fb3b8c5
 80077a0:	1b8d0159 	.word	0x1b8d0159
 80077a4:	3fe6066c 	.word	0x3fe6066c
 80077a8:	9c598ac8 	.word	0x9c598ac8
 80077ac:	40002ae5 	.word	0x40002ae5
 80077b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80077b4:	40033a27 	.word	0x40033a27
 80077b8:	3fefffff 	.word	0x3fefffff
 80077bc:	3fdfffff 	.word	0x3fdfffff
 80077c0:	3ff00000 	.word	0x3ff00000
 80077c4:	3fe00000 	.word	0x3fe00000
 80077c8:	3fef3332 	.word	0x3fef3332
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	f7f8 fccc 	bl	800016c <__adddf3>
 80077d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077d8:	4606      	mov	r6, r0
 80077da:	460f      	mov	r7, r1
 80077dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e0:	f7f8 ffa4 	bl	800072c <__aeabi_ddiv>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fe74 	bl	80004d8 <__aeabi_dmul>
 80077f0:	f04f 0800 	mov.w	r8, #0
 80077f4:	4606      	mov	r6, r0
 80077f6:	460f      	mov	r7, r1
 80077f8:	4642      	mov	r2, r8
 80077fa:	465b      	mov	r3, fp
 80077fc:	4640      	mov	r0, r8
 80077fe:	4659      	mov	r1, fp
 8007800:	f7f8 fe6a 	bl	80004d8 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4620      	mov	r0, r4
 800780a:	4629      	mov	r1, r5
 800780c:	f7f8 fcac 	bl	8000168 <__aeabi_dsub>
 8007810:	4642      	mov	r2, r8
 8007812:	4604      	mov	r4, r0
 8007814:	460d      	mov	r5, r1
 8007816:	465b      	mov	r3, fp
 8007818:	4650      	mov	r0, sl
 800781a:	4659      	mov	r1, fp
 800781c:	f7f8 fca6 	bl	800016c <__adddf3>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4620      	mov	r0, r4
 8007826:	4629      	mov	r1, r5
 8007828:	f7f8 ff80 	bl	800072c <__aeabi_ddiv>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	f7f8 fc9c 	bl	800016c <__adddf3>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	a113      	add	r1, pc, #76	; (adr r1, 8007888 <__ieee754_asin+0x3e8>)
 800783a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f8 fc8d 	bl	8000168 <__aeabi_dsub>
 800784e:	4642      	mov	r2, r8
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	465b      	mov	r3, fp
 8007856:	4640      	mov	r0, r8
 8007858:	4659      	mov	r1, fp
 800785a:	f7f8 fc87 	bl	800016c <__adddf3>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	a10b      	add	r1, pc, #44	; (adr r1, 8007890 <__ieee754_asin+0x3f0>)
 8007864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007868:	f7f8 fc7e 	bl	8000168 <__aeabi_dsub>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4620      	mov	r0, r4
 8007872:	4629      	mov	r1, r5
 8007874:	f7f8 fc78 	bl	8000168 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	a104      	add	r1, pc, #16	; (adr r1, 8007890 <__ieee754_asin+0x3f0>)
 800787e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007882:	e6e7      	b.n	8007654 <__ieee754_asin+0x1b4>
 8007884:	f3af 8000 	nop.w
 8007888:	33145c07 	.word	0x33145c07
 800788c:	3c91a626 	.word	0x3c91a626
 8007890:	54442d18 	.word	0x54442d18
 8007894:	3fe921fb 	.word	0x3fe921fb

08007898 <__ieee754_atan2>:
 8007898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	4692      	mov	sl, r2
 800789e:	4699      	mov	r9, r3
 80078a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078a4:	461f      	mov	r7, r3
 80078a6:	f1ca 0300 	rsb	r3, sl, #0
 80078aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007a30 <__ieee754_atan2+0x198>
 80078ae:	ea43 030a 	orr.w	r3, r3, sl
 80078b2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80078b6:	4573      	cmp	r3, lr
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	d808      	bhi.n	80078d0 <__ieee754_atan2+0x38>
 80078be:	4246      	negs	r6, r0
 80078c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078c4:	4306      	orrs	r6, r0
 80078c6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80078ca:	4576      	cmp	r6, lr
 80078cc:	468c      	mov	ip, r1
 80078ce:	d908      	bls.n	80078e2 <__ieee754_atan2+0x4a>
 80078d0:	4652      	mov	r2, sl
 80078d2:	464b      	mov	r3, r9
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fc48 	bl	800016c <__adddf3>
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	e019      	b.n	8007916 <__ieee754_atan2+0x7e>
 80078e2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80078e6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80078ea:	ea56 060a 	orrs.w	r6, r6, sl
 80078ee:	d103      	bne.n	80078f8 <__ieee754_atan2+0x60>
 80078f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	f000 bee8 	b.w	80086c8 <atan>
 80078f8:	17be      	asrs	r6, r7, #30
 80078fa:	f006 0602 	and.w	r6, r6, #2
 80078fe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007902:	ea53 0100 	orrs.w	r1, r3, r0
 8007906:	d10a      	bne.n	800791e <__ieee754_atan2+0x86>
 8007908:	2e02      	cmp	r6, #2
 800790a:	d067      	beq.n	80079dc <__ieee754_atan2+0x144>
 800790c:	2e03      	cmp	r6, #3
 800790e:	d102      	bne.n	8007916 <__ieee754_atan2+0x7e>
 8007910:	a53b      	add	r5, pc, #236	; (adr r5, 8007a00 <__ieee754_atan2+0x168>)
 8007912:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791e:	ea52 010a 	orrs.w	r1, r2, sl
 8007922:	d106      	bne.n	8007932 <__ieee754_atan2+0x9a>
 8007924:	f1bc 0f00 	cmp.w	ip, #0
 8007928:	da63      	bge.n	80079f2 <__ieee754_atan2+0x15a>
 800792a:	a537      	add	r5, pc, #220	; (adr r5, 8007a08 <__ieee754_atan2+0x170>)
 800792c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007930:	e7f1      	b.n	8007916 <__ieee754_atan2+0x7e>
 8007932:	4572      	cmp	r2, lr
 8007934:	d10f      	bne.n	8007956 <__ieee754_atan2+0xbe>
 8007936:	4293      	cmp	r3, r2
 8007938:	f106 36ff 	add.w	r6, r6, #4294967295
 800793c:	d107      	bne.n	800794e <__ieee754_atan2+0xb6>
 800793e:	2e02      	cmp	r6, #2
 8007940:	d850      	bhi.n	80079e4 <__ieee754_atan2+0x14c>
 8007942:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <__ieee754_atan2+0x19c>)
 8007944:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007948:	e9d6 4500 	ldrd	r4, r5, [r6]
 800794c:	e7e3      	b.n	8007916 <__ieee754_atan2+0x7e>
 800794e:	2e02      	cmp	r6, #2
 8007950:	d84c      	bhi.n	80079ec <__ieee754_atan2+0x154>
 8007952:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <__ieee754_atan2+0x1a0>)
 8007954:	e7f6      	b.n	8007944 <__ieee754_atan2+0xac>
 8007956:	4573      	cmp	r3, lr
 8007958:	d0e4      	beq.n	8007924 <__ieee754_atan2+0x8c>
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007960:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007964:	da20      	bge.n	80079a8 <__ieee754_atan2+0x110>
 8007966:	2f00      	cmp	r7, #0
 8007968:	da01      	bge.n	800796e <__ieee754_atan2+0xd6>
 800796a:	323c      	adds	r2, #60	; 0x3c
 800796c:	db20      	blt.n	80079b0 <__ieee754_atan2+0x118>
 800796e:	4652      	mov	r2, sl
 8007970:	464b      	mov	r3, r9
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f8 fed9 	bl	800072c <__aeabi_ddiv>
 800797a:	f001 f82f 	bl	80089dc <fabs>
 800797e:	f000 fea3 	bl	80086c8 <atan>
 8007982:	4604      	mov	r4, r0
 8007984:	460d      	mov	r5, r1
 8007986:	2e01      	cmp	r6, #1
 8007988:	d015      	beq.n	80079b6 <__ieee754_atan2+0x11e>
 800798a:	2e02      	cmp	r6, #2
 800798c:	d017      	beq.n	80079be <__ieee754_atan2+0x126>
 800798e:	2e00      	cmp	r6, #0
 8007990:	d0c1      	beq.n	8007916 <__ieee754_atan2+0x7e>
 8007992:	a31f      	add	r3, pc, #124	; (adr r3, 8007a10 <__ieee754_atan2+0x178>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fbe4 	bl	8000168 <__aeabi_dsub>
 80079a0:	a31d      	add	r3, pc, #116	; (adr r3, 8007a18 <__ieee754_atan2+0x180>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	e016      	b.n	80079d6 <__ieee754_atan2+0x13e>
 80079a8:	a51d      	add	r5, pc, #116	; (adr r5, 8007a20 <__ieee754_atan2+0x188>)
 80079aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079ae:	e7ea      	b.n	8007986 <__ieee754_atan2+0xee>
 80079b0:	2400      	movs	r4, #0
 80079b2:	2500      	movs	r5, #0
 80079b4:	e7e7      	b.n	8007986 <__ieee754_atan2+0xee>
 80079b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079ba:	461d      	mov	r5, r3
 80079bc:	e7ab      	b.n	8007916 <__ieee754_atan2+0x7e>
 80079be:	a314      	add	r3, pc, #80	; (adr r3, 8007a10 <__ieee754_atan2+0x178>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fbce 	bl	8000168 <__aeabi_dsub>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	a111      	add	r1, pc, #68	; (adr r1, 8007a18 <__ieee754_atan2+0x180>)
 80079d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d6:	f7f8 fbc7 	bl	8000168 <__aeabi_dsub>
 80079da:	e77f      	b.n	80078dc <__ieee754_atan2+0x44>
 80079dc:	a50e      	add	r5, pc, #56	; (adr r5, 8007a18 <__ieee754_atan2+0x180>)
 80079de:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079e2:	e798      	b.n	8007916 <__ieee754_atan2+0x7e>
 80079e4:	a510      	add	r5, pc, #64	; (adr r5, 8007a28 <__ieee754_atan2+0x190>)
 80079e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079ea:	e794      	b.n	8007916 <__ieee754_atan2+0x7e>
 80079ec:	2400      	movs	r4, #0
 80079ee:	2500      	movs	r5, #0
 80079f0:	e791      	b.n	8007916 <__ieee754_atan2+0x7e>
 80079f2:	a50b      	add	r5, pc, #44	; (adr r5, 8007a20 <__ieee754_atan2+0x188>)
 80079f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079f8:	e78d      	b.n	8007916 <__ieee754_atan2+0x7e>
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w
 8007a00:	54442d18 	.word	0x54442d18
 8007a04:	c00921fb 	.word	0xc00921fb
 8007a08:	54442d18 	.word	0x54442d18
 8007a0c:	bff921fb 	.word	0xbff921fb
 8007a10:	33145c07 	.word	0x33145c07
 8007a14:	3ca1a626 	.word	0x3ca1a626
 8007a18:	54442d18 	.word	0x54442d18
 8007a1c:	400921fb 	.word	0x400921fb
 8007a20:	54442d18 	.word	0x54442d18
 8007a24:	3ff921fb 	.word	0x3ff921fb
 8007a28:	54442d18 	.word	0x54442d18
 8007a2c:	3fe921fb 	.word	0x3fe921fb
 8007a30:	7ff00000 	.word	0x7ff00000
 8007a34:	08009550 	.word	0x08009550
 8007a38:	08009568 	.word	0x08009568
 8007a3c:	00000000 	.word	0x00000000

08007a40 <__ieee754_pow>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	b093      	sub	sp, #76	; 0x4c
 8007a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a4a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007a4e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007a52:	4689      	mov	r9, r1
 8007a54:	ea56 0102 	orrs.w	r1, r6, r2
 8007a58:	4680      	mov	r8, r0
 8007a5a:	d111      	bne.n	8007a80 <__ieee754_pow+0x40>
 8007a5c:	1803      	adds	r3, r0, r0
 8007a5e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007a62:	4152      	adcs	r2, r2
 8007a64:	4299      	cmp	r1, r3
 8007a66:	4b82      	ldr	r3, [pc, #520]	; (8007c70 <__ieee754_pow+0x230>)
 8007a68:	4193      	sbcs	r3, r2
 8007a6a:	f080 84b9 	bcs.w	80083e0 <__ieee754_pow+0x9a0>
 8007a6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a72:	4640      	mov	r0, r8
 8007a74:	4649      	mov	r1, r9
 8007a76:	f7f8 fb79 	bl	800016c <__adddf3>
 8007a7a:	4683      	mov	fp, r0
 8007a7c:	468c      	mov	ip, r1
 8007a7e:	e06f      	b.n	8007b60 <__ieee754_pow+0x120>
 8007a80:	4b7c      	ldr	r3, [pc, #496]	; (8007c74 <__ieee754_pow+0x234>)
 8007a82:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007a86:	429c      	cmp	r4, r3
 8007a88:	464d      	mov	r5, r9
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	dc06      	bgt.n	8007a9c <__ieee754_pow+0x5c>
 8007a8e:	d101      	bne.n	8007a94 <__ieee754_pow+0x54>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1ec      	bne.n	8007a6e <__ieee754_pow+0x2e>
 8007a94:	429e      	cmp	r6, r3
 8007a96:	dc01      	bgt.n	8007a9c <__ieee754_pow+0x5c>
 8007a98:	d10f      	bne.n	8007aba <__ieee754_pow+0x7a>
 8007a9a:	b172      	cbz	r2, 8007aba <__ieee754_pow+0x7a>
 8007a9c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007aa0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007aa4:	ea55 050a 	orrs.w	r5, r5, sl
 8007aa8:	d1e1      	bne.n	8007a6e <__ieee754_pow+0x2e>
 8007aaa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007aae:	18db      	adds	r3, r3, r3
 8007ab0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007ab4:	4152      	adcs	r2, r2
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	e7d5      	b.n	8007a66 <__ieee754_pow+0x26>
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	da39      	bge.n	8007b32 <__ieee754_pow+0xf2>
 8007abe:	4b6e      	ldr	r3, [pc, #440]	; (8007c78 <__ieee754_pow+0x238>)
 8007ac0:	429e      	cmp	r6, r3
 8007ac2:	dc52      	bgt.n	8007b6a <__ieee754_pow+0x12a>
 8007ac4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007ac8:	429e      	cmp	r6, r3
 8007aca:	f340 849c 	ble.w	8008406 <__ieee754_pow+0x9c6>
 8007ace:	1533      	asrs	r3, r6, #20
 8007ad0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ad4:	2b14      	cmp	r3, #20
 8007ad6:	dd0f      	ble.n	8007af8 <__ieee754_pow+0xb8>
 8007ad8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007adc:	fa22 f103 	lsr.w	r1, r2, r3
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	f040 848e 	bne.w	8008406 <__ieee754_pow+0x9c6>
 8007aea:	f001 0101 	and.w	r1, r1, #1
 8007aee:	f1c1 0302 	rsb	r3, r1, #2
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	b182      	cbz	r2, 8007b18 <__ieee754_pow+0xd8>
 8007af6:	e05d      	b.n	8007bb4 <__ieee754_pow+0x174>
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	d159      	bne.n	8007bb0 <__ieee754_pow+0x170>
 8007afc:	f1c3 0314 	rsb	r3, r3, #20
 8007b00:	fa46 f103 	asr.w	r1, r6, r3
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	42b3      	cmp	r3, r6
 8007b0a:	f040 8479 	bne.w	8008400 <__ieee754_pow+0x9c0>
 8007b0e:	f001 0101 	and.w	r1, r1, #1
 8007b12:	f1c1 0302 	rsb	r3, r1, #2
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4b58      	ldr	r3, [pc, #352]	; (8007c7c <__ieee754_pow+0x23c>)
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	d132      	bne.n	8007b84 <__ieee754_pow+0x144>
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	f280 846a 	bge.w	80083f8 <__ieee754_pow+0x9b8>
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	2000      	movs	r0, #0
 8007b2a:	4954      	ldr	r1, [pc, #336]	; (8007c7c <__ieee754_pow+0x23c>)
 8007b2c:	f7f8 fdfe 	bl	800072c <__aeabi_ddiv>
 8007b30:	e7a3      	b.n	8007a7a <__ieee754_pow+0x3a>
 8007b32:	2300      	movs	r3, #0
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d13c      	bne.n	8007bb4 <__ieee754_pow+0x174>
 8007b3a:	4b4e      	ldr	r3, [pc, #312]	; (8007c74 <__ieee754_pow+0x234>)
 8007b3c:	429e      	cmp	r6, r3
 8007b3e:	d1eb      	bne.n	8007b18 <__ieee754_pow+0xd8>
 8007b40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007b44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007b48:	ea53 030a 	orrs.w	r3, r3, sl
 8007b4c:	f000 8448 	beq.w	80083e0 <__ieee754_pow+0x9a0>
 8007b50:	4b4b      	ldr	r3, [pc, #300]	; (8007c80 <__ieee754_pow+0x240>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	dd0b      	ble.n	8007b6e <__ieee754_pow+0x12e>
 8007b56:	2f00      	cmp	r7, #0
 8007b58:	f2c0 8448 	blt.w	80083ec <__ieee754_pow+0x9ac>
 8007b5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007b60:	4658      	mov	r0, fp
 8007b62:	4661      	mov	r1, ip
 8007b64:	b013      	add	sp, #76	; 0x4c
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e7e2      	b.n	8007b34 <__ieee754_pow+0xf4>
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	f04f 0b00 	mov.w	fp, #0
 8007b74:	f04f 0c00 	mov.w	ip, #0
 8007b78:	daf2      	bge.n	8007b60 <__ieee754_pow+0x120>
 8007b7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007b7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007b82:	e7ed      	b.n	8007b60 <__ieee754_pow+0x120>
 8007b84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007b88:	d106      	bne.n	8007b98 <__ieee754_pow+0x158>
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	4640      	mov	r0, r8
 8007b90:	4649      	mov	r1, r9
 8007b92:	f7f8 fca1 	bl	80004d8 <__aeabi_dmul>
 8007b96:	e770      	b.n	8007a7a <__ieee754_pow+0x3a>
 8007b98:	4b3a      	ldr	r3, [pc, #232]	; (8007c84 <__ieee754_pow+0x244>)
 8007b9a:	429f      	cmp	r7, r3
 8007b9c:	d10a      	bne.n	8007bb4 <__ieee754_pow+0x174>
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	db08      	blt.n	8007bb4 <__ieee754_pow+0x174>
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	b013      	add	sp, #76	; 0x4c
 8007ba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	f000 bc5e 	b.w	800846c <__ieee754_sqrt>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f000 ff10 	bl	80089dc <fabs>
 8007bbc:	4683      	mov	fp, r0
 8007bbe:	468c      	mov	ip, r1
 8007bc0:	f1ba 0f00 	cmp.w	sl, #0
 8007bc4:	d128      	bne.n	8007c18 <__ieee754_pow+0x1d8>
 8007bc6:	b124      	cbz	r4, 8007bd2 <__ieee754_pow+0x192>
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <__ieee754_pow+0x23c>)
 8007bca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d122      	bne.n	8007c18 <__ieee754_pow+0x1d8>
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	da07      	bge.n	8007be6 <__ieee754_pow+0x1a6>
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	4663      	mov	r3, ip
 8007bda:	2000      	movs	r0, #0
 8007bdc:	4927      	ldr	r1, [pc, #156]	; (8007c7c <__ieee754_pow+0x23c>)
 8007bde:	f7f8 fda5 	bl	800072c <__aeabi_ddiv>
 8007be2:	4683      	mov	fp, r0
 8007be4:	468c      	mov	ip, r1
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	daba      	bge.n	8007b60 <__ieee754_pow+0x120>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007bf0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007bf4:	4323      	orrs	r3, r4
 8007bf6:	d108      	bne.n	8007c0a <__ieee754_pow+0x1ca>
 8007bf8:	465a      	mov	r2, fp
 8007bfa:	4663      	mov	r3, ip
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	4661      	mov	r1, ip
 8007c00:	f7f8 fab2 	bl	8000168 <__aeabi_dsub>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	e790      	b.n	8007b2c <__ieee754_pow+0xec>
 8007c0a:	9b00      	ldr	r3, [sp, #0]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d1a7      	bne.n	8007b60 <__ieee754_pow+0x120>
 8007c10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007c14:	469c      	mov	ip, r3
 8007c16:	e7a3      	b.n	8007b60 <__ieee754_pow+0x120>
 8007c18:	0feb      	lsrs	r3, r5, #31
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	d104      	bne.n	8007c30 <__ieee754_pow+0x1f0>
 8007c26:	4642      	mov	r2, r8
 8007c28:	464b      	mov	r3, r9
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	e7e7      	b.n	8007c00 <__ieee754_pow+0x1c0>
 8007c30:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <__ieee754_pow+0x248>)
 8007c32:	429e      	cmp	r6, r3
 8007c34:	f340 80f6 	ble.w	8007e24 <__ieee754_pow+0x3e4>
 8007c38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007c3c:	429e      	cmp	r6, r3
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <__ieee754_pow+0x240>)
 8007c40:	dd09      	ble.n	8007c56 <__ieee754_pow+0x216>
 8007c42:	429c      	cmp	r4, r3
 8007c44:	dc0c      	bgt.n	8007c60 <__ieee754_pow+0x220>
 8007c46:	2f00      	cmp	r7, #0
 8007c48:	da0c      	bge.n	8007c64 <__ieee754_pow+0x224>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	b013      	add	sp, #76	; 0x4c
 8007c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c52:	f000 bd33 	b.w	80086bc <__math_oflow>
 8007c56:	429c      	cmp	r4, r3
 8007c58:	dbf5      	blt.n	8007c46 <__ieee754_pow+0x206>
 8007c5a:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <__ieee754_pow+0x23c>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	dd15      	ble.n	8007c8c <__ieee754_pow+0x24c>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	dcf2      	bgt.n	8007c4a <__ieee754_pow+0x20a>
 8007c64:	2000      	movs	r0, #0
 8007c66:	b013      	add	sp, #76	; 0x4c
 8007c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	f000 bd21 	b.w	80086b2 <__math_uflow>
 8007c70:	fff00000 	.word	0xfff00000
 8007c74:	7ff00000 	.word	0x7ff00000
 8007c78:	433fffff 	.word	0x433fffff
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	3fefffff 	.word	0x3fefffff
 8007c84:	3fe00000 	.word	0x3fe00000
 8007c88:	41e00000 	.word	0x41e00000
 8007c8c:	4661      	mov	r1, ip
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4658      	mov	r0, fp
 8007c92:	4b5f      	ldr	r3, [pc, #380]	; (8007e10 <__ieee754_pow+0x3d0>)
 8007c94:	f7f8 fa68 	bl	8000168 <__aeabi_dsub>
 8007c98:	a355      	add	r3, pc, #340	; (adr r3, 8007df0 <__ieee754_pow+0x3b0>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	f7f8 fc19 	bl	80004d8 <__aeabi_dmul>
 8007ca6:	a354      	add	r3, pc, #336	; (adr r3, 8007df8 <__ieee754_pow+0x3b8>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f7f8 fc10 	bl	80004d8 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4682      	mov	sl, r0
 8007cbc:	468b      	mov	fp, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4b54      	ldr	r3, [pc, #336]	; (8007e14 <__ieee754_pow+0x3d4>)
 8007cc4:	f7f8 fc08 	bl	80004d8 <__aeabi_dmul>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	a14c      	add	r1, pc, #304	; (adr r1, 8007e00 <__ieee754_pow+0x3c0>)
 8007cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd2:	f7f8 fa49 	bl	8000168 <__aeabi_dsub>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	f7f8 fbfd 	bl	80004d8 <__aeabi_dmul>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	494c      	ldr	r1, [pc, #304]	; (8007e18 <__ieee754_pow+0x3d8>)
 8007ce6:	f7f8 fa3f 	bl	8000168 <__aeabi_dsub>
 8007cea:	4622      	mov	r2, r4
 8007cec:	462b      	mov	r3, r5
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fbef 	bl	80004d8 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	f7f8 fbe9 	bl	80004d8 <__aeabi_dmul>
 8007d06:	a340      	add	r3, pc, #256	; (adr r3, 8007e08 <__ieee754_pow+0x3c8>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fbe4 	bl	80004d8 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4650      	mov	r0, sl
 8007d16:	4659      	mov	r1, fp
 8007d18:	f7f8 fa26 	bl	8000168 <__aeabi_dsub>
 8007d1c:	f04f 0a00 	mov.w	sl, #0
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4604      	mov	r4, r0
 8007d26:	460d      	mov	r5, r1
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fa1e 	bl	800016c <__adddf3>
 8007d30:	4632      	mov	r2, r6
 8007d32:	463b      	mov	r3, r7
 8007d34:	4650      	mov	r0, sl
 8007d36:	468b      	mov	fp, r1
 8007d38:	f7f8 fa16 	bl	8000168 <__aeabi_dsub>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7f8 fa10 	bl	8000168 <__aeabi_dsub>
 8007d48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d50:	3b01      	subs	r3, #1
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f04f 0600 	mov.w	r6, #0
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	bf0c      	ite	eq
 8007d5e:	4b2f      	ldreq	r3, [pc, #188]	; (8007e1c <__ieee754_pow+0x3dc>)
 8007d60:	4b2b      	ldrne	r3, [pc, #172]	; (8007e10 <__ieee754_pow+0x3d0>)
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8007d6e:	4632      	mov	r2, r6
 8007d70:	463b      	mov	r3, r7
 8007d72:	f7f8 f9f9 	bl	8000168 <__aeabi_dsub>
 8007d76:	4652      	mov	r2, sl
 8007d78:	465b      	mov	r3, fp
 8007d7a:	f7f8 fbad 	bl	80004d8 <__aeabi_dmul>
 8007d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d82:	4680      	mov	r8, r0
 8007d84:	4689      	mov	r9, r1
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fba5 	bl	80004d8 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 f9e9 	bl	800016c <__adddf3>
 8007d9a:	4632      	mov	r2, r6
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	4680      	mov	r8, r0
 8007da0:	4689      	mov	r9, r1
 8007da2:	4650      	mov	r0, sl
 8007da4:	4659      	mov	r1, fp
 8007da6:	f7f8 fb97 	bl	80004d8 <__aeabi_dmul>
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	460b      	mov	r3, r1
 8007db0:	4602      	mov	r2, r0
 8007db2:	4649      	mov	r1, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007dba:	f7f8 f9d7 	bl	800016c <__adddf3>
 8007dbe:	4b18      	ldr	r3, [pc, #96]	; (8007e20 <__ieee754_pow+0x3e0>)
 8007dc0:	4682      	mov	sl, r0
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	f340 82e5 	ble.w	8008396 <__ieee754_pow+0x956>
 8007dcc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007dd0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007dd4:	4303      	orrs	r3, r0
 8007dd6:	f000 81df 	beq.w	8008198 <__ieee754_pow+0x758>
 8007dda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dde:	2200      	movs	r2, #0
 8007de0:	2300      	movs	r3, #0
 8007de2:	f7f8 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8007de6:	3800      	subs	r0, #0
 8007de8:	bf18      	it	ne
 8007dea:	2001      	movne	r0, #1
 8007dec:	e72e      	b.n	8007c4c <__ieee754_pow+0x20c>
 8007dee:	bf00      	nop
 8007df0:	60000000 	.word	0x60000000
 8007df4:	3ff71547 	.word	0x3ff71547
 8007df8:	f85ddf44 	.word	0xf85ddf44
 8007dfc:	3e54ae0b 	.word	0x3e54ae0b
 8007e00:	55555555 	.word	0x55555555
 8007e04:	3fd55555 	.word	0x3fd55555
 8007e08:	652b82fe 	.word	0x652b82fe
 8007e0c:	3ff71547 	.word	0x3ff71547
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	3fd00000 	.word	0x3fd00000
 8007e18:	3fe00000 	.word	0x3fe00000
 8007e1c:	bff00000 	.word	0xbff00000
 8007e20:	408fffff 	.word	0x408fffff
 8007e24:	4bd2      	ldr	r3, [pc, #840]	; (8008170 <__ieee754_pow+0x730>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	402b      	ands	r3, r5
 8007e2a:	b943      	cbnz	r3, 8007e3e <__ieee754_pow+0x3fe>
 8007e2c:	4658      	mov	r0, fp
 8007e2e:	4661      	mov	r1, ip
 8007e30:	4bd0      	ldr	r3, [pc, #832]	; (8008174 <__ieee754_pow+0x734>)
 8007e32:	f7f8 fb51 	bl	80004d8 <__aeabi_dmul>
 8007e36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007e3a:	4683      	mov	fp, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	1523      	asrs	r3, r4, #20
 8007e40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e44:	4413      	add	r3, r2
 8007e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e48:	4bcb      	ldr	r3, [pc, #812]	; (8008178 <__ieee754_pow+0x738>)
 8007e4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007e52:	429c      	cmp	r4, r3
 8007e54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e58:	dd08      	ble.n	8007e6c <__ieee754_pow+0x42c>
 8007e5a:	4bc8      	ldr	r3, [pc, #800]	; (800817c <__ieee754_pow+0x73c>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	f340 8199 	ble.w	8008194 <__ieee754_pow+0x754>
 8007e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007e68:	3301      	adds	r3, #1
 8007e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	00f3      	lsls	r3, r6, #3
 8007e70:	930d      	str	r3, [sp, #52]	; 0x34
 8007e72:	4bc3      	ldr	r3, [pc, #780]	; (8008180 <__ieee754_pow+0x740>)
 8007e74:	4658      	mov	r0, fp
 8007e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e7e:	4629      	mov	r1, r5
 8007e80:	461a      	mov	r2, r3
 8007e82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007e86:	4623      	mov	r3, r4
 8007e88:	f7f8 f96e 	bl	8000168 <__aeabi_dsub>
 8007e8c:	46da      	mov	sl, fp
 8007e8e:	462b      	mov	r3, r5
 8007e90:	4652      	mov	r2, sl
 8007e92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e9a:	f7f8 f967 	bl	800016c <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	49b7      	ldr	r1, [pc, #732]	; (8008184 <__ieee754_pow+0x744>)
 8007ea6:	f7f8 fc41 	bl	800072c <__aeabi_ddiv>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007eb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007eb6:	f7f8 fb0f 	bl	80004d8 <__aeabi_dmul>
 8007eba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ebe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007ec2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	46ab      	mov	fp, r5
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007ed8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007edc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	f7f8 faf6 	bl	80004d8 <__aeabi_dmul>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ef4:	f7f8 f938 	bl	8000168 <__aeabi_dsub>
 8007ef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f930 	bl	8000168 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	4659      	mov	r1, fp
 8007f10:	f7f8 f92a 	bl	8000168 <__aeabi_dsub>
 8007f14:	4642      	mov	r2, r8
 8007f16:	464b      	mov	r3, r9
 8007f18:	f7f8 fade 	bl	80004d8 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 f920 	bl	8000168 <__aeabi_dsub>
 8007f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f2c:	f7f8 fad4 	bl	80004d8 <__aeabi_dmul>
 8007f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	f7f8 facc 	bl	80004d8 <__aeabi_dmul>
 8007f40:	a379      	add	r3, pc, #484	; (adr r3, 8008128 <__ieee754_pow+0x6e8>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	4604      	mov	r4, r0
 8007f48:	460d      	mov	r5, r1
 8007f4a:	f7f8 fac5 	bl	80004d8 <__aeabi_dmul>
 8007f4e:	a378      	add	r3, pc, #480	; (adr r3, 8008130 <__ieee754_pow+0x6f0>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 f90a 	bl	800016c <__adddf3>
 8007f58:	4622      	mov	r2, r4
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	f7f8 fabc 	bl	80004d8 <__aeabi_dmul>
 8007f60:	a375      	add	r3, pc, #468	; (adr r3, 8008138 <__ieee754_pow+0x6f8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 f901 	bl	800016c <__adddf3>
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	f7f8 fab3 	bl	80004d8 <__aeabi_dmul>
 8007f72:	a373      	add	r3, pc, #460	; (adr r3, 8008140 <__ieee754_pow+0x700>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f8f8 	bl	800016c <__adddf3>
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	462b      	mov	r3, r5
 8007f80:	f7f8 faaa 	bl	80004d8 <__aeabi_dmul>
 8007f84:	a370      	add	r3, pc, #448	; (adr r3, 8008148 <__ieee754_pow+0x708>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f8ef 	bl	800016c <__adddf3>
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	f7f8 faa1 	bl	80004d8 <__aeabi_dmul>
 8007f96:	a36e      	add	r3, pc, #440	; (adr r3, 8008150 <__ieee754_pow+0x710>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f7f8 f8e6 	bl	800016c <__adddf3>
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4629      	mov	r1, r5
 8007fac:	f7f8 fa94 	bl	80004d8 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	f7f8 fa8e 	bl	80004d8 <__aeabi_dmul>
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	f7f8 f8d0 	bl	800016c <__adddf3>
 8007fcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fd0:	f7f8 fa82 	bl	80004d8 <__aeabi_dmul>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 f8c8 	bl	800016c <__adddf3>
 8007fdc:	4642      	mov	r2, r8
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	2200      	movs	r2, #0
 8007fee:	4b66      	ldr	r3, [pc, #408]	; (8008188 <__ieee754_pow+0x748>)
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	468b      	mov	fp, r1
 8007ff4:	f7f8 f8ba 	bl	800016c <__adddf3>
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	f7f8 f8b6 	bl	800016c <__adddf3>
 8008000:	2400      	movs	r4, #0
 8008002:	460d      	mov	r5, r1
 8008004:	4622      	mov	r2, r4
 8008006:	460b      	mov	r3, r1
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fa64 	bl	80004d8 <__aeabi_dmul>
 8008010:	2200      	movs	r2, #0
 8008012:	4680      	mov	r8, r0
 8008014:	4689      	mov	r9, r1
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <__ieee754_pow+0x748>)
 800801c:	f7f8 f8a4 	bl	8000168 <__aeabi_dsub>
 8008020:	4652      	mov	r2, sl
 8008022:	465b      	mov	r3, fp
 8008024:	f7f8 f8a0 	bl	8000168 <__aeabi_dsub>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f89a 	bl	8000168 <__aeabi_dsub>
 8008034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008038:	f7f8 fa4e 	bl	80004d8 <__aeabi_dmul>
 800803c:	4622      	mov	r2, r4
 800803e:	4606      	mov	r6, r0
 8008040:	460f      	mov	r7, r1
 8008042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008046:	462b      	mov	r3, r5
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 f88a 	bl	800016c <__adddf3>
 8008058:	2400      	movs	r4, #0
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f881 	bl	800016c <__adddf3>
 800806a:	a33b      	add	r3, pc, #236	; (adr r3, 8008158 <__ieee754_pow+0x718>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	4620      	mov	r0, r4
 8008072:	460d      	mov	r5, r1
 8008074:	f7f8 fa30 	bl	80004d8 <__aeabi_dmul>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008080:	4620      	mov	r0, r4
 8008082:	4629      	mov	r1, r5
 8008084:	f7f8 f870 	bl	8000168 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 f86a 	bl	8000168 <__aeabi_dsub>
 8008094:	a332      	add	r3, pc, #200	; (adr r3, 8008160 <__ieee754_pow+0x720>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 fa1d 	bl	80004d8 <__aeabi_dmul>
 800809e:	a332      	add	r3, pc, #200	; (adr r3, 8008168 <__ieee754_pow+0x728>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	4606      	mov	r6, r0
 80080a6:	460f      	mov	r7, r1
 80080a8:	4620      	mov	r0, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 f858 	bl	800016c <__adddf3>
 80080bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080be:	4b33      	ldr	r3, [pc, #204]	; (800818c <__ieee754_pow+0x74c>)
 80080c0:	f04f 0a00 	mov.w	sl, #0
 80080c4:	4413      	add	r3, r2
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 f84f 	bl	800016c <__adddf3>
 80080ce:	4680      	mov	r8, r0
 80080d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080d2:	4689      	mov	r9, r1
 80080d4:	f7f8 f996 	bl	8000404 <__aeabi_i2d>
 80080d8:	4604      	mov	r4, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080de:	4b2c      	ldr	r3, [pc, #176]	; (8008190 <__ieee754_pow+0x750>)
 80080e0:	4413      	add	r3, r2
 80080e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80080e6:	4642      	mov	r2, r8
 80080e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ec:	464b      	mov	r3, r9
 80080ee:	f7f8 f83d 	bl	800016c <__adddf3>
 80080f2:	4632      	mov	r2, r6
 80080f4:	463b      	mov	r3, r7
 80080f6:	f7f8 f839 	bl	800016c <__adddf3>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 f835 	bl	800016c <__adddf3>
 8008102:	4622      	mov	r2, r4
 8008104:	462b      	mov	r3, r5
 8008106:	4650      	mov	r0, sl
 8008108:	468b      	mov	fp, r1
 800810a:	f7f8 f82d 	bl	8000168 <__aeabi_dsub>
 800810e:	4632      	mov	r2, r6
 8008110:	463b      	mov	r3, r7
 8008112:	f7f8 f829 	bl	8000168 <__aeabi_dsub>
 8008116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800811a:	f7f8 f825 	bl	8000168 <__aeabi_dsub>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	e60d      	b.n	8007d44 <__ieee754_pow+0x304>
 8008128:	4a454eef 	.word	0x4a454eef
 800812c:	3fca7e28 	.word	0x3fca7e28
 8008130:	93c9db65 	.word	0x93c9db65
 8008134:	3fcd864a 	.word	0x3fcd864a
 8008138:	a91d4101 	.word	0xa91d4101
 800813c:	3fd17460 	.word	0x3fd17460
 8008140:	518f264d 	.word	0x518f264d
 8008144:	3fd55555 	.word	0x3fd55555
 8008148:	db6fabff 	.word	0xdb6fabff
 800814c:	3fdb6db6 	.word	0x3fdb6db6
 8008150:	33333303 	.word	0x33333303
 8008154:	3fe33333 	.word	0x3fe33333
 8008158:	e0000000 	.word	0xe0000000
 800815c:	3feec709 	.word	0x3feec709
 8008160:	dc3a03fd 	.word	0xdc3a03fd
 8008164:	3feec709 	.word	0x3feec709
 8008168:	145b01f5 	.word	0x145b01f5
 800816c:	be3e2fe0 	.word	0xbe3e2fe0
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	43400000 	.word	0x43400000
 8008178:	0003988e 	.word	0x0003988e
 800817c:	000bb679 	.word	0x000bb679
 8008180:	08009580 	.word	0x08009580
 8008184:	3ff00000 	.word	0x3ff00000
 8008188:	40080000 	.word	0x40080000
 800818c:	080095a0 	.word	0x080095a0
 8008190:	08009590 	.word	0x08009590
 8008194:	2601      	movs	r6, #1
 8008196:	e66a      	b.n	8007e6e <__ieee754_pow+0x42e>
 8008198:	a39d      	add	r3, pc, #628	; (adr r3, 8008410 <__ieee754_pow+0x9d0>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	4640      	mov	r0, r8
 80081a0:	4649      	mov	r1, r9
 80081a2:	f7f7 ffe3 	bl	800016c <__adddf3>
 80081a6:	4622      	mov	r2, r4
 80081a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ac:	462b      	mov	r3, r5
 80081ae:	4650      	mov	r0, sl
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f7 ffd9 	bl	8000168 <__aeabi_dsub>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081be:	f7f8 fc1b 	bl	80009f8 <__aeabi_dcmpgt>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f47f ae09 	bne.w	8007dda <__ieee754_pow+0x39a>
 80081c8:	4aa3      	ldr	r2, [pc, #652]	; (8008458 <__ieee754_pow+0xa18>)
 80081ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80081ce:	4293      	cmp	r3, r2
 80081d0:	f340 8101 	ble.w	80083d6 <__ieee754_pow+0x996>
 80081d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80081d8:	2000      	movs	r0, #0
 80081da:	151b      	asrs	r3, r3, #20
 80081dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80081e0:	fa4a f303 	asr.w	r3, sl, r3
 80081e4:	4433      	add	r3, r6
 80081e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80081ea:	4f9c      	ldr	r7, [pc, #624]	; (800845c <__ieee754_pow+0xa1c>)
 80081ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80081f0:	4117      	asrs	r7, r2
 80081f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80081f6:	ea23 0107 	bic.w	r1, r3, r7
 80081fa:	f1c2 0214 	rsb	r2, r2, #20
 80081fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008202:	460b      	mov	r3, r1
 8008204:	fa4a fa02 	asr.w	sl, sl, r2
 8008208:	2e00      	cmp	r6, #0
 800820a:	4602      	mov	r2, r0
 800820c:	4629      	mov	r1, r5
 800820e:	4620      	mov	r0, r4
 8008210:	bfb8      	it	lt
 8008212:	f1ca 0a00 	rsblt	sl, sl, #0
 8008216:	f7f7 ffa7 	bl	8000168 <__aeabi_dsub>
 800821a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008222:	2400      	movs	r4, #0
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	f7f7 ffa0 	bl	800016c <__adddf3>
 800822c:	a37a      	add	r3, pc, #488	; (adr r3, 8008418 <__ieee754_pow+0x9d8>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	4620      	mov	r0, r4
 8008234:	460d      	mov	r5, r1
 8008236:	f7f8 f94f 	bl	80004d8 <__aeabi_dmul>
 800823a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800823e:	4606      	mov	r6, r0
 8008240:	460f      	mov	r7, r1
 8008242:	4620      	mov	r0, r4
 8008244:	4629      	mov	r1, r5
 8008246:	f7f7 ff8f 	bl	8000168 <__aeabi_dsub>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4640      	mov	r0, r8
 8008250:	4649      	mov	r1, r9
 8008252:	f7f7 ff89 	bl	8000168 <__aeabi_dsub>
 8008256:	a372      	add	r3, pc, #456	; (adr r3, 8008420 <__ieee754_pow+0x9e0>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 f93c 	bl	80004d8 <__aeabi_dmul>
 8008260:	a371      	add	r3, pc, #452	; (adr r3, 8008428 <__ieee754_pow+0x9e8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	4680      	mov	r8, r0
 8008268:	4689      	mov	r9, r1
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f7f8 f933 	bl	80004d8 <__aeabi_dmul>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f7 ff77 	bl	800016c <__adddf3>
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4630      	mov	r0, r6
 8008288:	4639      	mov	r1, r7
 800828a:	f7f7 ff6f 	bl	800016c <__adddf3>
 800828e:	4632      	mov	r2, r6
 8008290:	463b      	mov	r3, r7
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	f7f7 ff67 	bl	8000168 <__aeabi_dsub>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f7 ff61 	bl	8000168 <__aeabi_dsub>
 80082a6:	4642      	mov	r2, r8
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	464b      	mov	r3, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f8 f911 	bl	80004d8 <__aeabi_dmul>
 80082b6:	a35e      	add	r3, pc, #376	; (adr r3, 8008430 <__ieee754_pow+0x9f0>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	f7f8 f90a 	bl	80004d8 <__aeabi_dmul>
 80082c4:	a35c      	add	r3, pc, #368	; (adr r3, 8008438 <__ieee754_pow+0x9f8>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ff4d 	bl	8000168 <__aeabi_dsub>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f8 f901 	bl	80004d8 <__aeabi_dmul>
 80082d6:	a35a      	add	r3, pc, #360	; (adr r3, 8008440 <__ieee754_pow+0xa00>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ff46 	bl	800016c <__adddf3>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f8f8 	bl	80004d8 <__aeabi_dmul>
 80082e8:	a357      	add	r3, pc, #348	; (adr r3, 8008448 <__ieee754_pow+0xa08>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ff3b 	bl	8000168 <__aeabi_dsub>
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f8 f8ef 	bl	80004d8 <__aeabi_dmul>
 80082fa:	a355      	add	r3, pc, #340	; (adr r3, 8008450 <__ieee754_pow+0xa10>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f7 ff34 	bl	800016c <__adddf3>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f7 ff28 	bl	8000168 <__aeabi_dsub>
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	2200      	movs	r2, #0
 800832a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800832e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f7f7 ff17 	bl	8000168 <__aeabi_dsub>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 f9f3 	bl	800072c <__aeabi_ddiv>
 8008346:	4632      	mov	r2, r6
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	463b      	mov	r3, r7
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 f8c1 	bl	80004d8 <__aeabi_dmul>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	f7f7 ff07 	bl	800016c <__adddf3>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	f7f7 feff 	bl	8000168 <__aeabi_dsub>
 800836a:	4642      	mov	r2, r8
 800836c:	464b      	mov	r3, r9
 800836e:	f7f7 fefb 	bl	8000168 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	2000      	movs	r0, #0
 8008378:	4939      	ldr	r1, [pc, #228]	; (8008460 <__ieee754_pow+0xa20>)
 800837a:	f7f7 fef5 	bl	8000168 <__aeabi_dsub>
 800837e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008382:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008386:	da29      	bge.n	80083dc <__ieee754_pow+0x99c>
 8008388:	4652      	mov	r2, sl
 800838a:	f000 fb39 	bl	8008a00 <scalbn>
 800838e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008392:	f7ff bbfe 	b.w	8007b92 <__ieee754_pow+0x152>
 8008396:	4b33      	ldr	r3, [pc, #204]	; (8008464 <__ieee754_pow+0xa24>)
 8008398:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800839c:	429f      	cmp	r7, r3
 800839e:	f77f af13 	ble.w	80081c8 <__ieee754_pow+0x788>
 80083a2:	4b31      	ldr	r3, [pc, #196]	; (8008468 <__ieee754_pow+0xa28>)
 80083a4:	440b      	add	r3, r1
 80083a6:	4303      	orrs	r3, r0
 80083a8:	d009      	beq.n	80083be <__ieee754_pow+0x97e>
 80083aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	f7f8 fb03 	bl	80009bc <__aeabi_dcmplt>
 80083b6:	3800      	subs	r0, #0
 80083b8:	bf18      	it	ne
 80083ba:	2001      	movne	r0, #1
 80083bc:	e453      	b.n	8007c66 <__ieee754_pow+0x226>
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	f7f7 fed1 	bl	8000168 <__aeabi_dsub>
 80083c6:	4642      	mov	r2, r8
 80083c8:	464b      	mov	r3, r9
 80083ca:	f7f8 fb0b 	bl	80009e4 <__aeabi_dcmpge>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f43f aefa 	beq.w	80081c8 <__ieee754_pow+0x788>
 80083d4:	e7e9      	b.n	80083aa <__ieee754_pow+0x96a>
 80083d6:	f04f 0a00 	mov.w	sl, #0
 80083da:	e720      	b.n	800821e <__ieee754_pow+0x7de>
 80083dc:	4621      	mov	r1, r4
 80083de:	e7d6      	b.n	800838e <__ieee754_pow+0x94e>
 80083e0:	f04f 0b00 	mov.w	fp, #0
 80083e4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008460 <__ieee754_pow+0xa20>
 80083e8:	f7ff bbba 	b.w	8007b60 <__ieee754_pow+0x120>
 80083ec:	f04f 0b00 	mov.w	fp, #0
 80083f0:	f04f 0c00 	mov.w	ip, #0
 80083f4:	f7ff bbb4 	b.w	8007b60 <__ieee754_pow+0x120>
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7ff bb3d 	b.w	8007a7a <__ieee754_pow+0x3a>
 8008400:	9200      	str	r2, [sp, #0]
 8008402:	f7ff bb89 	b.w	8007b18 <__ieee754_pow+0xd8>
 8008406:	2300      	movs	r3, #0
 8008408:	f7ff bb73 	b.w	8007af2 <__ieee754_pow+0xb2>
 800840c:	f3af 8000 	nop.w
 8008410:	652b82fe 	.word	0x652b82fe
 8008414:	3c971547 	.word	0x3c971547
 8008418:	00000000 	.word	0x00000000
 800841c:	3fe62e43 	.word	0x3fe62e43
 8008420:	fefa39ef 	.word	0xfefa39ef
 8008424:	3fe62e42 	.word	0x3fe62e42
 8008428:	0ca86c39 	.word	0x0ca86c39
 800842c:	be205c61 	.word	0xbe205c61
 8008430:	72bea4d0 	.word	0x72bea4d0
 8008434:	3e663769 	.word	0x3e663769
 8008438:	c5d26bf1 	.word	0xc5d26bf1
 800843c:	3ebbbd41 	.word	0x3ebbbd41
 8008440:	af25de2c 	.word	0xaf25de2c
 8008444:	3f11566a 	.word	0x3f11566a
 8008448:	16bebd93 	.word	0x16bebd93
 800844c:	3f66c16c 	.word	0x3f66c16c
 8008450:	5555553e 	.word	0x5555553e
 8008454:	3fc55555 	.word	0x3fc55555
 8008458:	3fe00000 	.word	0x3fe00000
 800845c:	000fffff 	.word	0x000fffff
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	4090cbff 	.word	0x4090cbff
 8008468:	3f6f3400 	.word	0x3f6f3400

0800846c <__ieee754_sqrt>:
 800846c:	f8df c158 	ldr.w	ip, [pc, #344]	; 80085c8 <__ieee754_sqrt+0x15c>
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008474:	ea3c 0c01 	bics.w	ip, ip, r1
 8008478:	4606      	mov	r6, r0
 800847a:	460d      	mov	r5, r1
 800847c:	460c      	mov	r4, r1
 800847e:	460a      	mov	r2, r1
 8008480:	4607      	mov	r7, r0
 8008482:	4603      	mov	r3, r0
 8008484:	d10f      	bne.n	80084a6 <__ieee754_sqrt+0x3a>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	f7f8 f825 	bl	80004d8 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4630      	mov	r0, r6
 8008494:	4629      	mov	r1, r5
 8008496:	f7f7 fe69 	bl	800016c <__adddf3>
 800849a:	4606      	mov	r6, r0
 800849c:	460d      	mov	r5, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4629      	mov	r1, r5
 80084a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a6:	2900      	cmp	r1, #0
 80084a8:	dc0e      	bgt.n	80084c8 <__ieee754_sqrt+0x5c>
 80084aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80084ae:	ea5c 0707 	orrs.w	r7, ip, r7
 80084b2:	d0f4      	beq.n	800849e <__ieee754_sqrt+0x32>
 80084b4:	b141      	cbz	r1, 80084c8 <__ieee754_sqrt+0x5c>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	f7f7 fe55 	bl	8000168 <__aeabi_dsub>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	f7f8 f933 	bl	800072c <__aeabi_ddiv>
 80084c6:	e7e8      	b.n	800849a <__ieee754_sqrt+0x2e>
 80084c8:	1521      	asrs	r1, r4, #20
 80084ca:	d075      	beq.n	80085b8 <__ieee754_sqrt+0x14c>
 80084cc:	07cc      	lsls	r4, r1, #31
 80084ce:	f04f 0400 	mov.w	r4, #0
 80084d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80084d6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80084da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80084de:	bf5e      	ittt	pl
 80084e0:	0fd9      	lsrpl	r1, r3, #31
 80084e2:	005b      	lslpl	r3, r3, #1
 80084e4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80084e8:	0fd9      	lsrs	r1, r3, #31
 80084ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80084ee:	2516      	movs	r5, #22
 80084f0:	4620      	mov	r0, r4
 80084f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084f6:	107f      	asrs	r7, r7, #1
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	1846      	adds	r6, r0, r1
 80084fc:	4296      	cmp	r6, r2
 80084fe:	bfde      	ittt	le
 8008500:	1b92      	suble	r2, r2, r6
 8008502:	1870      	addle	r0, r6, r1
 8008504:	1864      	addle	r4, r4, r1
 8008506:	0052      	lsls	r2, r2, #1
 8008508:	3d01      	subs	r5, #1
 800850a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800850e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008512:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008516:	d1f0      	bne.n	80084fa <__ieee754_sqrt+0x8e>
 8008518:	4629      	mov	r1, r5
 800851a:	f04f 0e20 	mov.w	lr, #32
 800851e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008522:	4282      	cmp	r2, r0
 8008524:	eb06 0c05 	add.w	ip, r6, r5
 8008528:	dc02      	bgt.n	8008530 <__ieee754_sqrt+0xc4>
 800852a:	d113      	bne.n	8008554 <__ieee754_sqrt+0xe8>
 800852c:	459c      	cmp	ip, r3
 800852e:	d811      	bhi.n	8008554 <__ieee754_sqrt+0xe8>
 8008530:	f1bc 0f00 	cmp.w	ip, #0
 8008534:	eb0c 0506 	add.w	r5, ip, r6
 8008538:	da43      	bge.n	80085c2 <__ieee754_sqrt+0x156>
 800853a:	2d00      	cmp	r5, #0
 800853c:	db41      	blt.n	80085c2 <__ieee754_sqrt+0x156>
 800853e:	f100 0801 	add.w	r8, r0, #1
 8008542:	1a12      	subs	r2, r2, r0
 8008544:	4640      	mov	r0, r8
 8008546:	459c      	cmp	ip, r3
 8008548:	bf88      	it	hi
 800854a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800854e:	eba3 030c 	sub.w	r3, r3, ip
 8008552:	4431      	add	r1, r6
 8008554:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008558:	f1be 0e01 	subs.w	lr, lr, #1
 800855c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008560:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008564:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008568:	d1db      	bne.n	8008522 <__ieee754_sqrt+0xb6>
 800856a:	4313      	orrs	r3, r2
 800856c:	d006      	beq.n	800857c <__ieee754_sqrt+0x110>
 800856e:	1c48      	adds	r0, r1, #1
 8008570:	bf0b      	itete	eq
 8008572:	4671      	moveq	r1, lr
 8008574:	3101      	addne	r1, #1
 8008576:	3401      	addeq	r4, #1
 8008578:	f021 0101 	bicne.w	r1, r1, #1
 800857c:	1063      	asrs	r3, r4, #1
 800857e:	0849      	lsrs	r1, r1, #1
 8008580:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008584:	07e2      	lsls	r2, r4, #31
 8008586:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800858a:	bf48      	it	mi
 800858c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008590:	460e      	mov	r6, r1
 8008592:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008596:	e782      	b.n	800849e <__ieee754_sqrt+0x32>
 8008598:	0ada      	lsrs	r2, r3, #11
 800859a:	3815      	subs	r0, #21
 800859c:	055b      	lsls	r3, r3, #21
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d0fa      	beq.n	8008598 <__ieee754_sqrt+0x12c>
 80085a2:	02d5      	lsls	r5, r2, #11
 80085a4:	d50a      	bpl.n	80085bc <__ieee754_sqrt+0x150>
 80085a6:	f1c1 0420 	rsb	r4, r1, #32
 80085aa:	fa23 f404 	lsr.w	r4, r3, r4
 80085ae:	1e4d      	subs	r5, r1, #1
 80085b0:	408b      	lsls	r3, r1
 80085b2:	4322      	orrs	r2, r4
 80085b4:	1b41      	subs	r1, r0, r5
 80085b6:	e789      	b.n	80084cc <__ieee754_sqrt+0x60>
 80085b8:	4608      	mov	r0, r1
 80085ba:	e7f0      	b.n	800859e <__ieee754_sqrt+0x132>
 80085bc:	0052      	lsls	r2, r2, #1
 80085be:	3101      	adds	r1, #1
 80085c0:	e7ef      	b.n	80085a2 <__ieee754_sqrt+0x136>
 80085c2:	4680      	mov	r8, r0
 80085c4:	e7bd      	b.n	8008542 <__ieee754_sqrt+0xd6>
 80085c6:	bf00      	nop
 80085c8:	7ff00000 	.word	0x7ff00000

080085cc <__ieee754_sqrtf>:
 80085cc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80085d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4603      	mov	r3, r0
 80085d8:	4604      	mov	r4, r0
 80085da:	d309      	bcc.n	80085f0 <__ieee754_sqrtf+0x24>
 80085dc:	4601      	mov	r1, r0
 80085de:	f7f8 fb89 	bl	8000cf4 <__aeabi_fmul>
 80085e2:	4601      	mov	r1, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7f8 fa7d 	bl	8000ae4 <__addsf3>
 80085ea:	4604      	mov	r4, r0
 80085ec:	4620      	mov	r0, r4
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d0fb      	beq.n	80085ec <__ieee754_sqrtf+0x20>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	da06      	bge.n	8008606 <__ieee754_sqrtf+0x3a>
 80085f8:	4601      	mov	r1, r0
 80085fa:	f7f8 fa71 	bl	8000ae0 <__aeabi_fsub>
 80085fe:	4601      	mov	r1, r0
 8008600:	f7f8 fc2c 	bl	8000e5c <__aeabi_fdiv>
 8008604:	e7f1      	b.n	80085ea <__ieee754_sqrtf+0x1e>
 8008606:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800860a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800860e:	d029      	beq.n	8008664 <__ieee754_sqrtf+0x98>
 8008610:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008614:	07cb      	lsls	r3, r1, #31
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800861e:	f04f 0419 	mov.w	r4, #25
 8008622:	461e      	mov	r6, r3
 8008624:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008628:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800862c:	bf58      	it	pl
 800862e:	0052      	lslpl	r2, r2, #1
 8008630:	1040      	asrs	r0, r0, #1
 8008632:	0052      	lsls	r2, r2, #1
 8008634:	1875      	adds	r5, r6, r1
 8008636:	4295      	cmp	r5, r2
 8008638:	bfde      	ittt	le
 800863a:	186e      	addle	r6, r5, r1
 800863c:	1b52      	suble	r2, r2, r5
 800863e:	185b      	addle	r3, r3, r1
 8008640:	3c01      	subs	r4, #1
 8008642:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008646:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800864a:	d1f3      	bne.n	8008634 <__ieee754_sqrtf+0x68>
 800864c:	b112      	cbz	r2, 8008654 <__ieee754_sqrtf+0x88>
 800864e:	3301      	adds	r3, #1
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	105c      	asrs	r4, r3, #1
 8008656:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800865a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800865e:	e7c5      	b.n	80085ec <__ieee754_sqrtf+0x20>
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	3201      	adds	r2, #1
 8008664:	0218      	lsls	r0, r3, #8
 8008666:	d5fb      	bpl.n	8008660 <__ieee754_sqrtf+0x94>
 8008668:	3a01      	subs	r2, #1
 800866a:	1a89      	subs	r1, r1, r2
 800866c:	e7d0      	b.n	8008610 <__ieee754_sqrtf+0x44>

0800866e <with_errno>:
 800866e:	b570      	push	{r4, r5, r6, lr}
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	4616      	mov	r6, r2
 8008676:	f000 fa41 	bl	8008afc <__errno>
 800867a:	4629      	mov	r1, r5
 800867c:	6006      	str	r6, [r0, #0]
 800867e:	4620      	mov	r0, r4
 8008680:	bd70      	pop	{r4, r5, r6, pc}

08008682 <xflow>:
 8008682:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008684:	4615      	mov	r5, r2
 8008686:	461c      	mov	r4, r3
 8008688:	b180      	cbz	r0, 80086ac <xflow+0x2a>
 800868a:	4610      	mov	r0, r2
 800868c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008690:	e9cd 0100 	strd	r0, r1, [sp]
 8008694:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008698:	4628      	mov	r0, r5
 800869a:	4621      	mov	r1, r4
 800869c:	f7f7 ff1c 	bl	80004d8 <__aeabi_dmul>
 80086a0:	2222      	movs	r2, #34	; 0x22
 80086a2:	b003      	add	sp, #12
 80086a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a8:	f7ff bfe1 	b.w	800866e <with_errno>
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	e7ee      	b.n	8008690 <xflow+0xe>

080086b2 <__math_uflow>:
 80086b2:	2200      	movs	r2, #0
 80086b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086b8:	f7ff bfe3 	b.w	8008682 <xflow>

080086bc <__math_oflow>:
 80086bc:	2200      	movs	r2, #0
 80086be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80086c2:	f7ff bfde 	b.w	8008682 <xflow>
	...

080086c8 <atan>:
 80086c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	4bb6      	ldr	r3, [pc, #728]	; (80089a8 <atan+0x2e0>)
 80086ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80086d2:	429e      	cmp	r6, r3
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	468b      	mov	fp, r1
 80086da:	dd17      	ble.n	800870c <atan+0x44>
 80086dc:	4bb3      	ldr	r3, [pc, #716]	; (80089ac <atan+0x2e4>)
 80086de:	429e      	cmp	r6, r3
 80086e0:	dc01      	bgt.n	80086e6 <atan+0x1e>
 80086e2:	d109      	bne.n	80086f8 <atan+0x30>
 80086e4:	b140      	cbz	r0, 80086f8 <atan+0x30>
 80086e6:	4622      	mov	r2, r4
 80086e8:	462b      	mov	r3, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f7 fd3d 	bl	800016c <__adddf3>
 80086f2:	4604      	mov	r4, r0
 80086f4:	460d      	mov	r5, r1
 80086f6:	e005      	b.n	8008704 <atan+0x3c>
 80086f8:	f1bb 0f00 	cmp.w	fp, #0
 80086fc:	4cac      	ldr	r4, [pc, #688]	; (80089b0 <atan+0x2e8>)
 80086fe:	f300 8121 	bgt.w	8008944 <atan+0x27c>
 8008702:	4dac      	ldr	r5, [pc, #688]	; (80089b4 <atan+0x2ec>)
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870c:	4baa      	ldr	r3, [pc, #680]	; (80089b8 <atan+0x2f0>)
 800870e:	429e      	cmp	r6, r3
 8008710:	dc11      	bgt.n	8008736 <atan+0x6e>
 8008712:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008716:	429e      	cmp	r6, r3
 8008718:	dc0a      	bgt.n	8008730 <atan+0x68>
 800871a:	a38b      	add	r3, pc, #556	; (adr r3, 8008948 <atan+0x280>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 fd24 	bl	800016c <__adddf3>
 8008724:	2200      	movs	r2, #0
 8008726:	4ba5      	ldr	r3, [pc, #660]	; (80089bc <atan+0x2f4>)
 8008728:	f7f8 f966 	bl	80009f8 <__aeabi_dcmpgt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d1e9      	bne.n	8008704 <atan+0x3c>
 8008730:	f04f 3aff 	mov.w	sl, #4294967295
 8008734:	e027      	b.n	8008786 <atan+0xbe>
 8008736:	f000 f951 	bl	80089dc <fabs>
 800873a:	4ba1      	ldr	r3, [pc, #644]	; (80089c0 <atan+0x2f8>)
 800873c:	4604      	mov	r4, r0
 800873e:	429e      	cmp	r6, r3
 8008740:	460d      	mov	r5, r1
 8008742:	f300 80b8 	bgt.w	80088b6 <atan+0x1ee>
 8008746:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800874a:	429e      	cmp	r6, r3
 800874c:	f300 809c 	bgt.w	8008888 <atan+0x1c0>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	f7f7 fd0a 	bl	800016c <__adddf3>
 8008758:	2200      	movs	r2, #0
 800875a:	4b98      	ldr	r3, [pc, #608]	; (80089bc <atan+0x2f4>)
 800875c:	f7f7 fd04 	bl	8000168 <__aeabi_dsub>
 8008760:	2200      	movs	r2, #0
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f7f7 fcfd 	bl	800016c <__adddf3>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	f7f7 ffd7 	bl	800072c <__aeabi_ddiv>
 800877e:	f04f 0a00 	mov.w	sl, #0
 8008782:	4604      	mov	r4, r0
 8008784:	460d      	mov	r5, r1
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f7 fea3 	bl	80004d8 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4680      	mov	r8, r0
 8008798:	4689      	mov	r9, r1
 800879a:	f7f7 fe9d 	bl	80004d8 <__aeabi_dmul>
 800879e:	a36c      	add	r3, pc, #432	; (adr r3, 8008950 <atan+0x288>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	f7f7 fe96 	bl	80004d8 <__aeabi_dmul>
 80087ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008958 <atan+0x290>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 fcdb 	bl	800016c <__adddf3>
 80087b6:	4632      	mov	r2, r6
 80087b8:	463b      	mov	r3, r7
 80087ba:	f7f7 fe8d 	bl	80004d8 <__aeabi_dmul>
 80087be:	a368      	add	r3, pc, #416	; (adr r3, 8008960 <atan+0x298>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fcd2 	bl	800016c <__adddf3>
 80087c8:	4632      	mov	r2, r6
 80087ca:	463b      	mov	r3, r7
 80087cc:	f7f7 fe84 	bl	80004d8 <__aeabi_dmul>
 80087d0:	a365      	add	r3, pc, #404	; (adr r3, 8008968 <atan+0x2a0>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fcc9 	bl	800016c <__adddf3>
 80087da:	4632      	mov	r2, r6
 80087dc:	463b      	mov	r3, r7
 80087de:	f7f7 fe7b 	bl	80004d8 <__aeabi_dmul>
 80087e2:	a363      	add	r3, pc, #396	; (adr r3, 8008970 <atan+0x2a8>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fcc0 	bl	800016c <__adddf3>
 80087ec:	4632      	mov	r2, r6
 80087ee:	463b      	mov	r3, r7
 80087f0:	f7f7 fe72 	bl	80004d8 <__aeabi_dmul>
 80087f4:	a360      	add	r3, pc, #384	; (adr r3, 8008978 <atan+0x2b0>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fcb7 	bl	800016c <__adddf3>
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	f7f7 fe69 	bl	80004d8 <__aeabi_dmul>
 8008806:	a35e      	add	r3, pc, #376	; (adr r3, 8008980 <atan+0x2b8>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f7 fe60 	bl	80004d8 <__aeabi_dmul>
 8008818:	a35b      	add	r3, pc, #364	; (adr r3, 8008988 <atan+0x2c0>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fca3 	bl	8000168 <__aeabi_dsub>
 8008822:	4632      	mov	r2, r6
 8008824:	463b      	mov	r3, r7
 8008826:	f7f7 fe57 	bl	80004d8 <__aeabi_dmul>
 800882a:	a359      	add	r3, pc, #356	; (adr r3, 8008990 <atan+0x2c8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fc9a 	bl	8000168 <__aeabi_dsub>
 8008834:	4632      	mov	r2, r6
 8008836:	463b      	mov	r3, r7
 8008838:	f7f7 fe4e 	bl	80004d8 <__aeabi_dmul>
 800883c:	a356      	add	r3, pc, #344	; (adr r3, 8008998 <atan+0x2d0>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fc91 	bl	8000168 <__aeabi_dsub>
 8008846:	4632      	mov	r2, r6
 8008848:	463b      	mov	r3, r7
 800884a:	f7f7 fe45 	bl	80004d8 <__aeabi_dmul>
 800884e:	a354      	add	r3, pc, #336	; (adr r3, 80089a0 <atan+0x2d8>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fc88 	bl	8000168 <__aeabi_dsub>
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	f7f7 fe3c 	bl	80004d8 <__aeabi_dmul>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f7 fc80 	bl	800016c <__adddf3>
 800886c:	4622      	mov	r2, r4
 800886e:	462b      	mov	r3, r5
 8008870:	f7f7 fe32 	bl	80004d8 <__aeabi_dmul>
 8008874:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	d144      	bne.n	8008908 <atan+0x240>
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fc71 	bl	8000168 <__aeabi_dsub>
 8008886:	e734      	b.n	80086f2 <atan+0x2a>
 8008888:	2200      	movs	r2, #0
 800888a:	4b4c      	ldr	r3, [pc, #304]	; (80089bc <atan+0x2f4>)
 800888c:	f7f7 fc6c 	bl	8000168 <__aeabi_dsub>
 8008890:	2200      	movs	r2, #0
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	4b48      	ldr	r3, [pc, #288]	; (80089bc <atan+0x2f4>)
 800889c:	f7f7 fc66 	bl	800016c <__adddf3>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f7 ff40 	bl	800072c <__aeabi_ddiv>
 80088ac:	f04f 0a01 	mov.w	sl, #1
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	e767      	b.n	8008786 <atan+0xbe>
 80088b6:	4b43      	ldr	r3, [pc, #268]	; (80089c4 <atan+0x2fc>)
 80088b8:	429e      	cmp	r6, r3
 80088ba:	da1a      	bge.n	80088f2 <atan+0x22a>
 80088bc:	2200      	movs	r2, #0
 80088be:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <atan+0x300>)
 80088c0:	f7f7 fc52 	bl	8000168 <__aeabi_dsub>
 80088c4:	2200      	movs	r2, #0
 80088c6:	4606      	mov	r6, r0
 80088c8:	460f      	mov	r7, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	4b3e      	ldr	r3, [pc, #248]	; (80089c8 <atan+0x300>)
 80088d0:	f7f7 fe02 	bl	80004d8 <__aeabi_dmul>
 80088d4:	2200      	movs	r2, #0
 80088d6:	4b39      	ldr	r3, [pc, #228]	; (80089bc <atan+0x2f4>)
 80088d8:	f7f7 fc48 	bl	800016c <__adddf3>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f7 ff22 	bl	800072c <__aeabi_ddiv>
 80088e8:	f04f 0a02 	mov.w	sl, #2
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	e749      	b.n	8008786 <atan+0xbe>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	2000      	movs	r0, #0
 80088f8:	4934      	ldr	r1, [pc, #208]	; (80089cc <atan+0x304>)
 80088fa:	f7f7 ff17 	bl	800072c <__aeabi_ddiv>
 80088fe:	f04f 0a03 	mov.w	sl, #3
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	e73e      	b.n	8008786 <atan+0xbe>
 8008908:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <atan+0x308>)
 800890a:	4e32      	ldr	r6, [pc, #200]	; (80089d4 <atan+0x30c>)
 800890c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008910:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008914:	e9da 2300 	ldrd	r2, r3, [sl]
 8008918:	f7f7 fc26 	bl	8000168 <__aeabi_dsub>
 800891c:	4622      	mov	r2, r4
 800891e:	462b      	mov	r3, r5
 8008920:	f7f7 fc22 	bl	8000168 <__aeabi_dsub>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	e9d6 0100 	ldrd	r0, r1, [r6]
 800892c:	f7f7 fc1c 	bl	8000168 <__aeabi_dsub>
 8008930:	f1bb 0f00 	cmp.w	fp, #0
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	f6bf aee4 	bge.w	8008704 <atan+0x3c>
 800893c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008940:	461d      	mov	r5, r3
 8008942:	e6df      	b.n	8008704 <atan+0x3c>
 8008944:	4d24      	ldr	r5, [pc, #144]	; (80089d8 <atan+0x310>)
 8008946:	e6dd      	b.n	8008704 <atan+0x3c>
 8008948:	8800759c 	.word	0x8800759c
 800894c:	7e37e43c 	.word	0x7e37e43c
 8008950:	e322da11 	.word	0xe322da11
 8008954:	3f90ad3a 	.word	0x3f90ad3a
 8008958:	24760deb 	.word	0x24760deb
 800895c:	3fa97b4b 	.word	0x3fa97b4b
 8008960:	a0d03d51 	.word	0xa0d03d51
 8008964:	3fb10d66 	.word	0x3fb10d66
 8008968:	c54c206e 	.word	0xc54c206e
 800896c:	3fb745cd 	.word	0x3fb745cd
 8008970:	920083ff 	.word	0x920083ff
 8008974:	3fc24924 	.word	0x3fc24924
 8008978:	5555550d 	.word	0x5555550d
 800897c:	3fd55555 	.word	0x3fd55555
 8008980:	2c6a6c2f 	.word	0x2c6a6c2f
 8008984:	bfa2b444 	.word	0xbfa2b444
 8008988:	52defd9a 	.word	0x52defd9a
 800898c:	3fadde2d 	.word	0x3fadde2d
 8008990:	af749a6d 	.word	0xaf749a6d
 8008994:	3fb3b0f2 	.word	0x3fb3b0f2
 8008998:	fe231671 	.word	0xfe231671
 800899c:	3fbc71c6 	.word	0x3fbc71c6
 80089a0:	9998ebc4 	.word	0x9998ebc4
 80089a4:	3fc99999 	.word	0x3fc99999
 80089a8:	440fffff 	.word	0x440fffff
 80089ac:	7ff00000 	.word	0x7ff00000
 80089b0:	54442d18 	.word	0x54442d18
 80089b4:	bff921fb 	.word	0xbff921fb
 80089b8:	3fdbffff 	.word	0x3fdbffff
 80089bc:	3ff00000 	.word	0x3ff00000
 80089c0:	3ff2ffff 	.word	0x3ff2ffff
 80089c4:	40038000 	.word	0x40038000
 80089c8:	3ff80000 	.word	0x3ff80000
 80089cc:	bff00000 	.word	0xbff00000
 80089d0:	080095d0 	.word	0x080095d0
 80089d4:	080095b0 	.word	0x080095b0
 80089d8:	3ff921fb 	.word	0x3ff921fb

080089dc <fabs>:
 80089dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80089e0:	4770      	bx	lr

080089e2 <finite>:
 80089e2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80089e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80089ea:	0fc0      	lsrs	r0, r0, #31
 80089ec:	4770      	bx	lr
	...

080089f0 <nan>:
 80089f0:	2000      	movs	r0, #0
 80089f2:	4901      	ldr	r1, [pc, #4]	; (80089f8 <nan+0x8>)
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	7ff80000 	.word	0x7ff80000
 80089fc:	00000000 	.word	0x00000000

08008a00 <scalbn>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	4617      	mov	r7, r2
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	b996      	cbnz	r6, 8008a36 <scalbn+0x36>
 8008a10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a14:	4303      	orrs	r3, r0
 8008a16:	d039      	beq.n	8008a8c <scalbn+0x8c>
 8008a18:	4b33      	ldr	r3, [pc, #204]	; (8008ae8 <scalbn+0xe8>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7f7 fd5c 	bl	80004d8 <__aeabi_dmul>
 8008a20:	4b32      	ldr	r3, [pc, #200]	; (8008aec <scalbn+0xec>)
 8008a22:	4604      	mov	r4, r0
 8008a24:	429f      	cmp	r7, r3
 8008a26:	460d      	mov	r5, r1
 8008a28:	da0f      	bge.n	8008a4a <scalbn+0x4a>
 8008a2a:	a32b      	add	r3, pc, #172	; (adr r3, 8008ad8 <scalbn+0xd8>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fd52 	bl	80004d8 <__aeabi_dmul>
 8008a34:	e006      	b.n	8008a44 <scalbn+0x44>
 8008a36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008a3a:	4296      	cmp	r6, r2
 8008a3c:	d10a      	bne.n	8008a54 <scalbn+0x54>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	f7f7 fb94 	bl	800016c <__adddf3>
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	e020      	b.n	8008a8c <scalbn+0x8c>
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008a50:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008a54:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008a58:	19b9      	adds	r1, r7, r6
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	dd0e      	ble.n	8008a7c <scalbn+0x7c>
 8008a5e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008a62:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008a66:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008a6a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008a6e:	4820      	ldr	r0, [pc, #128]	; (8008af0 <scalbn+0xf0>)
 8008a70:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008a74:	a31a      	add	r3, pc, #104	; (adr r3, 8008ae0 <scalbn+0xe0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	e7d9      	b.n	8008a30 <scalbn+0x30>
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	dd08      	ble.n	8008a92 <scalbn+0x92>
 8008a80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a92:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008a96:	da12      	bge.n	8008abe <scalbn+0xbe>
 8008a98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a9c:	429f      	cmp	r7, r3
 8008a9e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008aa2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008aa6:	dcdc      	bgt.n	8008a62 <scalbn+0x62>
 8008aa8:	a30b      	add	r3, pc, #44	; (adr r3, 8008ad8 <scalbn+0xd8>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008ab2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008ab6:	480f      	ldr	r0, [pc, #60]	; (8008af4 <scalbn+0xf4>)
 8008ab8:	f041 011f 	orr.w	r1, r1, #31
 8008abc:	e7b8      	b.n	8008a30 <scalbn+0x30>
 8008abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ac2:	3136      	adds	r1, #54	; 0x36
 8008ac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ac8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008acc:	4620      	mov	r0, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <scalbn+0xf8>)
 8008ad4:	e7ac      	b.n	8008a30 <scalbn+0x30>
 8008ad6:	bf00      	nop
 8008ad8:	c2f8f359 	.word	0xc2f8f359
 8008adc:	01a56e1f 	.word	0x01a56e1f
 8008ae0:	8800759c 	.word	0x8800759c
 8008ae4:	7e37e43c 	.word	0x7e37e43c
 8008ae8:	43500000 	.word	0x43500000
 8008aec:	ffff3cb0 	.word	0xffff3cb0
 8008af0:	8800759c 	.word	0x8800759c
 8008af4:	c2f8f359 	.word	0xc2f8f359
 8008af8:	3c900000 	.word	0x3c900000

08008afc <__errno>:
 8008afc:	4b01      	ldr	r3, [pc, #4]	; (8008b04 <__errno+0x8>)
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	2000000c 	.word	0x2000000c

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	4d0c      	ldr	r5, [pc, #48]	; (8008b40 <__libc_init_array+0x38>)
 8008b0e:	4c0d      	ldr	r4, [pc, #52]	; (8008b44 <__libc_init_array+0x3c>)
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	f000 fc9c 	bl	8009454 <_init>
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4d0a      	ldr	r5, [pc, #40]	; (8008b48 <__libc_init_array+0x40>)
 8008b20:	4c0a      	ldr	r4, [pc, #40]	; (8008b4c <__libc_init_array+0x44>)
 8008b22:	1b64      	subs	r4, r4, r5
 8008b24:	10a4      	asrs	r4, r4, #2
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	08009624 	.word	0x08009624
 8008b44:	08009624 	.word	0x08009624
 8008b48:	08009624 	.word	0x08009624
 8008b4c:	08009628 	.word	0x08009628

08008b50 <memset>:
 8008b50:	4603      	mov	r3, r0
 8008b52:	4402      	add	r2, r0
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <siprintf>:
 8008b60:	b40e      	push	{r1, r2, r3}
 8008b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b66:	b500      	push	{lr}
 8008b68:	b09c      	sub	sp, #112	; 0x70
 8008b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b6c:	9002      	str	r0, [sp, #8]
 8008b6e:	9006      	str	r0, [sp, #24]
 8008b70:	9107      	str	r1, [sp, #28]
 8008b72:	9104      	str	r1, [sp, #16]
 8008b74:	4808      	ldr	r0, [pc, #32]	; (8008b98 <siprintf+0x38>)
 8008b76:	4909      	ldr	r1, [pc, #36]	; (8008b9c <siprintf+0x3c>)
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	a902      	add	r1, sp, #8
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	f000 f868 	bl	8008c58 <_svfiprintf_r>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	b01c      	add	sp, #112	; 0x70
 8008b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b94:	b003      	add	sp, #12
 8008b96:	4770      	bx	lr
 8008b98:	2000000c 	.word	0x2000000c
 8008b9c:	ffff0208 	.word	0xffff0208

08008ba0 <__ssputs_r>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	688e      	ldr	r6, [r1, #8]
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	460c      	mov	r4, r1
 8008bac:	4690      	mov	r8, r2
 8008bae:	461f      	mov	r7, r3
 8008bb0:	d838      	bhi.n	8008c24 <__ssputs_r+0x84>
 8008bb2:	898a      	ldrh	r2, [r1, #12]
 8008bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb8:	d032      	beq.n	8008c20 <__ssputs_r+0x80>
 8008bba:	6825      	ldr	r5, [r4, #0]
 8008bbc:	6909      	ldr	r1, [r1, #16]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	eba5 0901 	sub.w	r9, r5, r1
 8008bc4:	6965      	ldr	r5, [r4, #20]
 8008bc6:	444b      	add	r3, r9
 8008bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd0:	106d      	asrs	r5, r5, #1
 8008bd2:	429d      	cmp	r5, r3
 8008bd4:	bf38      	it	cc
 8008bd6:	461d      	movcc	r5, r3
 8008bd8:	0553      	lsls	r3, r2, #21
 8008bda:	d531      	bpl.n	8008c40 <__ssputs_r+0xa0>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f000 fb6f 	bl	80092c0 <_malloc_r>
 8008be2:	4606      	mov	r6, r0
 8008be4:	b950      	cbnz	r0, 8008bfc <__ssputs_r+0x5c>
 8008be6:	230c      	movs	r3, #12
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	f8ca 3000 	str.w	r3, [sl]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	464a      	mov	r2, r9
 8008bfe:	6921      	ldr	r1, [r4, #16]
 8008c00:	f000 face 	bl	80091a0 <memcpy>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	6126      	str	r6, [r4, #16]
 8008c12:	444e      	add	r6, r9
 8008c14:	6026      	str	r6, [r4, #0]
 8008c16:	463e      	mov	r6, r7
 8008c18:	6165      	str	r5, [r4, #20]
 8008c1a:	eba5 0509 	sub.w	r5, r5, r9
 8008c1e:	60a5      	str	r5, [r4, #8]
 8008c20:	42be      	cmp	r6, r7
 8008c22:	d900      	bls.n	8008c26 <__ssputs_r+0x86>
 8008c24:	463e      	mov	r6, r7
 8008c26:	4632      	mov	r2, r6
 8008c28:	4641      	mov	r1, r8
 8008c2a:	6820      	ldr	r0, [r4, #0]
 8008c2c:	f000 fac6 	bl	80091bc <memmove>
 8008c30:	68a3      	ldr	r3, [r4, #8]
 8008c32:	2000      	movs	r0, #0
 8008c34:	1b9b      	subs	r3, r3, r6
 8008c36:	60a3      	str	r3, [r4, #8]
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	4433      	add	r3, r6
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	e7db      	b.n	8008bf8 <__ssputs_r+0x58>
 8008c40:	462a      	mov	r2, r5
 8008c42:	f000 fbb1 	bl	80093a8 <_realloc_r>
 8008c46:	4606      	mov	r6, r0
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1e1      	bne.n	8008c10 <__ssputs_r+0x70>
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	f000 face 	bl	80091f0 <_free_r>
 8008c54:	e7c7      	b.n	8008be6 <__ssputs_r+0x46>
	...

08008c58 <_svfiprintf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	898b      	ldrh	r3, [r1, #12]
 8008c60:	4607      	mov	r7, r0
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	460d      	mov	r5, r1
 8008c66:	4614      	mov	r4, r2
 8008c68:	b09d      	sub	sp, #116	; 0x74
 8008c6a:	d50e      	bpl.n	8008c8a <_svfiprintf_r+0x32>
 8008c6c:	690b      	ldr	r3, [r1, #16]
 8008c6e:	b963      	cbnz	r3, 8008c8a <_svfiprintf_r+0x32>
 8008c70:	2140      	movs	r1, #64	; 0x40
 8008c72:	f000 fb25 	bl	80092c0 <_malloc_r>
 8008c76:	6028      	str	r0, [r5, #0]
 8008c78:	6128      	str	r0, [r5, #16]
 8008c7a:	b920      	cbnz	r0, 8008c86 <_svfiprintf_r+0x2e>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e0d1      	b.n	8008e2a <_svfiprintf_r+0x1d2>
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	616b      	str	r3, [r5, #20]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8e:	2320      	movs	r3, #32
 8008c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c94:	2330      	movs	r3, #48	; 0x30
 8008c96:	f04f 0901 	mov.w	r9, #1
 8008c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e44 <_svfiprintf_r+0x1ec>
 8008ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cae:	b10a      	cbz	r2, 8008cb4 <_svfiprintf_r+0x5c>
 8008cb0:	2a25      	cmp	r2, #37	; 0x25
 8008cb2:	d1f9      	bne.n	8008ca8 <_svfiprintf_r+0x50>
 8008cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb8:	d00b      	beq.n	8008cd2 <_svfiprintf_r+0x7a>
 8008cba:	465b      	mov	r3, fp
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff ff6d 	bl	8008ba0 <__ssputs_r>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f000 80aa 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cce:	445a      	add	r2, fp
 8008cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a2 	beq.w	8008e20 <_svfiprintf_r+0x1c8>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce6:	f10a 0a01 	add.w	sl, sl, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2205      	movs	r2, #5
 8008cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfc:	4851      	ldr	r0, [pc, #324]	; (8008e44 <_svfiprintf_r+0x1ec>)
 8008cfe:	f000 fa41 	bl	8009184 <memchr>
 8008d02:	9a04      	ldr	r2, [sp, #16]
 8008d04:	b9d8      	cbnz	r0, 8008d3e <_svfiprintf_r+0xe6>
 8008d06:	06d0      	lsls	r0, r2, #27
 8008d08:	bf44      	itt	mi
 8008d0a:	2320      	movmi	r3, #32
 8008d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d10:	0711      	lsls	r1, r2, #28
 8008d12:	bf44      	itt	mi
 8008d14:	232b      	movmi	r3, #43	; 0x2b
 8008d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d20:	d015      	beq.n	8008d4e <_svfiprintf_r+0xf6>
 8008d22:	4654      	mov	r4, sl
 8008d24:	2000      	movs	r0, #0
 8008d26:	f04f 0c0a 	mov.w	ip, #10
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d32:	3b30      	subs	r3, #48	; 0x30
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	d94e      	bls.n	8008dd6 <_svfiprintf_r+0x17e>
 8008d38:	b1b0      	cbz	r0, 8008d68 <_svfiprintf_r+0x110>
 8008d3a:	9207      	str	r2, [sp, #28]
 8008d3c:	e014      	b.n	8008d68 <_svfiprintf_r+0x110>
 8008d3e:	eba0 0308 	sub.w	r3, r0, r8
 8008d42:	fa09 f303 	lsl.w	r3, r9, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	46a2      	mov	sl, r4
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	e7d2      	b.n	8008cf4 <_svfiprintf_r+0x9c>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	9103      	str	r1, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfbb      	ittet	lt
 8008d5a:	425b      	neglt	r3, r3
 8008d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d60:	9307      	strge	r3, [sp, #28]
 8008d62:	9307      	strlt	r3, [sp, #28]
 8008d64:	bfb8      	it	lt
 8008d66:	9204      	strlt	r2, [sp, #16]
 8008d68:	7823      	ldrb	r3, [r4, #0]
 8008d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d6c:	d10c      	bne.n	8008d88 <_svfiprintf_r+0x130>
 8008d6e:	7863      	ldrb	r3, [r4, #1]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d135      	bne.n	8008de0 <_svfiprintf_r+0x188>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	3402      	adds	r4, #2
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	9203      	str	r2, [sp, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e48 <_svfiprintf_r+0x1f0>
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	4650      	mov	r0, sl
 8008d90:	7821      	ldrb	r1, [r4, #0]
 8008d92:	f000 f9f7 	bl	8009184 <memchr>
 8008d96:	b140      	cbz	r0, 8008daa <_svfiprintf_r+0x152>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	eba0 000a 	sub.w	r0, r0, sl
 8008d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	3401      	adds	r4, #1
 8008da6:	4303      	orrs	r3, r0
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	2206      	movs	r2, #6
 8008db0:	4826      	ldr	r0, [pc, #152]	; (8008e4c <_svfiprintf_r+0x1f4>)
 8008db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008db6:	f000 f9e5 	bl	8009184 <memchr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d038      	beq.n	8008e30 <_svfiprintf_r+0x1d8>
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <_svfiprintf_r+0x1f8>)
 8008dc0:	bb1b      	cbnz	r3, 8008e0a <_svfiprintf_r+0x1b2>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	3308      	adds	r3, #8
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	4433      	add	r3, r6
 8008dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd4:	e767      	b.n	8008ca6 <_svfiprintf_r+0x4e>
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2001      	movs	r0, #1
 8008dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dde:	e7a5      	b.n	8008d2c <_svfiprintf_r+0xd4>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f04f 0c0a 	mov.w	ip, #10
 8008de6:	4619      	mov	r1, r3
 8008de8:	3401      	adds	r4, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	4620      	mov	r0, r4
 8008dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df2:	3a30      	subs	r2, #48	; 0x30
 8008df4:	2a09      	cmp	r2, #9
 8008df6:	d903      	bls.n	8008e00 <_svfiprintf_r+0x1a8>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c5      	beq.n	8008d88 <_svfiprintf_r+0x130>
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	e7c3      	b.n	8008d88 <_svfiprintf_r+0x130>
 8008e00:	4604      	mov	r4, r0
 8008e02:	2301      	movs	r3, #1
 8008e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e08:	e7f0      	b.n	8008dec <_svfiprintf_r+0x194>
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4638      	mov	r0, r7
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <_svfiprintf_r+0x1fc>)
 8008e14:	a904      	add	r1, sp, #16
 8008e16:	f3af 8000 	nop.w
 8008e1a:	1c42      	adds	r2, r0, #1
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	d1d6      	bne.n	8008dce <_svfiprintf_r+0x176>
 8008e20:	89ab      	ldrh	r3, [r5, #12]
 8008e22:	065b      	lsls	r3, r3, #25
 8008e24:	f53f af2c 	bmi.w	8008c80 <_svfiprintf_r+0x28>
 8008e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2a:	b01d      	add	sp, #116	; 0x74
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4638      	mov	r0, r7
 8008e38:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <_svfiprintf_r+0x1fc>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	f000 f87c 	bl	8008f38 <_printf_i>
 8008e40:	e7eb      	b.n	8008e1a <_svfiprintf_r+0x1c2>
 8008e42:	bf00      	nop
 8008e44:	080095f0 	.word	0x080095f0
 8008e48:	080095f6 	.word	0x080095f6
 8008e4c:	080095fa 	.word	0x080095fa
 8008e50:	00000000 	.word	0x00000000
 8008e54:	08008ba1 	.word	0x08008ba1

08008e58 <_printf_common>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	4699      	mov	r9, r3
 8008e60:	688a      	ldr	r2, [r1, #8]
 8008e62:	690b      	ldr	r3, [r1, #16]
 8008e64:	4607      	mov	r7, r0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfb8      	it	lt
 8008e6a:	4613      	movlt	r3, r2
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e72:	460c      	mov	r4, r1
 8008e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e78:	b10a      	cbz	r2, 8008e7e <_printf_common+0x26>
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	0699      	lsls	r1, r3, #26
 8008e82:	bf42      	ittt	mi
 8008e84:	6833      	ldrmi	r3, [r6, #0]
 8008e86:	3302      	addmi	r3, #2
 8008e88:	6033      	strmi	r3, [r6, #0]
 8008e8a:	6825      	ldr	r5, [r4, #0]
 8008e8c:	f015 0506 	ands.w	r5, r5, #6
 8008e90:	d106      	bne.n	8008ea0 <_printf_common+0x48>
 8008e92:	f104 0a19 	add.w	sl, r4, #25
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	6832      	ldr	r2, [r6, #0]
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dc28      	bgt.n	8008ef2 <_printf_common+0x9a>
 8008ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ea4:	1e13      	subs	r3, r2, #0
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	0692      	lsls	r2, r2, #26
 8008eae:	d42d      	bmi.n	8008f0c <_printf_common+0xb4>
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d020      	beq.n	8008f00 <_printf_common+0xa8>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	68e5      	ldr	r5, [r4, #12]
 8008ec2:	f003 0306 	and.w	r3, r3, #6
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	bf18      	it	ne
 8008eca:	2500      	movne	r5, #0
 8008ecc:	6832      	ldr	r2, [r6, #0]
 8008ece:	f04f 0600 	mov.w	r6, #0
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	bf08      	it	eq
 8008ed6:	1aad      	subeq	r5, r5, r2
 8008ed8:	6922      	ldr	r2, [r4, #16]
 8008eda:	bf08      	it	eq
 8008edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	bfc4      	itt	gt
 8008ee4:	1a9b      	subgt	r3, r3, r2
 8008ee6:	18ed      	addgt	r5, r5, r3
 8008ee8:	341a      	adds	r4, #26
 8008eea:	42b5      	cmp	r5, r6
 8008eec:	d11a      	bne.n	8008f24 <_printf_common+0xcc>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e008      	b.n	8008f04 <_printf_common+0xac>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c0      	blx	r8
 8008efc:	3001      	adds	r0, #1
 8008efe:	d103      	bne.n	8008f08 <_printf_common+0xb0>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	3501      	adds	r5, #1
 8008f0a:	e7c4      	b.n	8008e96 <_printf_common+0x3e>
 8008f0c:	2030      	movs	r0, #48	; 0x30
 8008f0e:	18e1      	adds	r1, r4, r3
 8008f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f1a:	4422      	add	r2, r4
 8008f1c:	3302      	adds	r3, #2
 8008f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f22:	e7c5      	b.n	8008eb0 <_printf_common+0x58>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4622      	mov	r2, r4
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c0      	blx	r8
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0e6      	beq.n	8008f00 <_printf_common+0xa8>
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7d9      	b.n	8008eea <_printf_common+0x92>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	7e0f      	ldrb	r7, [r1, #24]
 8008f3e:	4691      	mov	r9, r2
 8008f40:	2f78      	cmp	r7, #120	; 0x78
 8008f42:	4680      	mov	r8, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	469a      	mov	sl, r3
 8008f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	; 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d9 	beq.w	800910c <_printf_i+0x1d4>
 8008f5a:	2f58      	cmp	r7, #88	; 0x58
 8008f5c:	f000 80a4 	beq.w	80090a8 <_printf_i+0x170>
 8008f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a101      	add	r1, pc, #4	; (adr r1, 8008f78 <_printf_i+0x40>)
 8008f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090f3 	.word	0x080090f3
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	080090d5 	.word	0x080090d5
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009115 	.word	0x08009115
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090dd 	.word	0x080090dd
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	602a      	str	r2, [r5, #0]
 8008fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0a4      	b.n	800912e <_printf_i+0x1f6>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	6829      	ldr	r1, [r5, #0]
 8008fe8:	0606      	lsls	r6, r0, #24
 8008fea:	f101 0304 	add.w	r3, r1, #4
 8008fee:	d50a      	bpl.n	8009006 <_printf_i+0xce>
 8008ff0:	680e      	ldr	r6, [r1, #0]
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	da03      	bge.n	8009000 <_printf_i+0xc8>
 8008ff8:	232d      	movs	r3, #45	; 0x2d
 8008ffa:	4276      	negs	r6, r6
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	230a      	movs	r3, #10
 8009002:	485e      	ldr	r0, [pc, #376]	; (800917c <_printf_i+0x244>)
 8009004:	e019      	b.n	800903a <_printf_i+0x102>
 8009006:	680e      	ldr	r6, [r1, #0]
 8009008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	bf18      	it	ne
 8009010:	b236      	sxthne	r6, r6
 8009012:	e7ef      	b.n	8008ff4 <_printf_i+0xbc>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	6029      	str	r1, [r5, #0]
 800901c:	0601      	lsls	r1, r0, #24
 800901e:	d501      	bpl.n	8009024 <_printf_i+0xec>
 8009020:	681e      	ldr	r6, [r3, #0]
 8009022:	e002      	b.n	800902a <_printf_i+0xf2>
 8009024:	0646      	lsls	r6, r0, #25
 8009026:	d5fb      	bpl.n	8009020 <_printf_i+0xe8>
 8009028:	881e      	ldrh	r6, [r3, #0]
 800902a:	2f6f      	cmp	r7, #111	; 0x6f
 800902c:	bf0c      	ite	eq
 800902e:	2308      	moveq	r3, #8
 8009030:	230a      	movne	r3, #10
 8009032:	4852      	ldr	r0, [pc, #328]	; (800917c <_printf_i+0x244>)
 8009034:	2100      	movs	r1, #0
 8009036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800903a:	6865      	ldr	r5, [r4, #4]
 800903c:	2d00      	cmp	r5, #0
 800903e:	bfa8      	it	ge
 8009040:	6821      	ldrge	r1, [r4, #0]
 8009042:	60a5      	str	r5, [r4, #8]
 8009044:	bfa4      	itt	ge
 8009046:	f021 0104 	bicge.w	r1, r1, #4
 800904a:	6021      	strge	r1, [r4, #0]
 800904c:	b90e      	cbnz	r6, 8009052 <_printf_i+0x11a>
 800904e:	2d00      	cmp	r5, #0
 8009050:	d04d      	beq.n	80090ee <_printf_i+0x1b6>
 8009052:	4615      	mov	r5, r2
 8009054:	fbb6 f1f3 	udiv	r1, r6, r3
 8009058:	fb03 6711 	mls	r7, r3, r1, r6
 800905c:	5dc7      	ldrb	r7, [r0, r7]
 800905e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009062:	4637      	mov	r7, r6
 8009064:	42bb      	cmp	r3, r7
 8009066:	460e      	mov	r6, r1
 8009068:	d9f4      	bls.n	8009054 <_printf_i+0x11c>
 800906a:	2b08      	cmp	r3, #8
 800906c:	d10b      	bne.n	8009086 <_printf_i+0x14e>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	07de      	lsls	r6, r3, #31
 8009072:	d508      	bpl.n	8009086 <_printf_i+0x14e>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	6861      	ldr	r1, [r4, #4]
 8009078:	4299      	cmp	r1, r3
 800907a:	bfde      	ittt	le
 800907c:	2330      	movle	r3, #48	; 0x30
 800907e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009086:	1b52      	subs	r2, r2, r5
 8009088:	6122      	str	r2, [r4, #16]
 800908a:	464b      	mov	r3, r9
 800908c:	4621      	mov	r1, r4
 800908e:	4640      	mov	r0, r8
 8009090:	f8cd a000 	str.w	sl, [sp]
 8009094:	aa03      	add	r2, sp, #12
 8009096:	f7ff fedf 	bl	8008e58 <_printf_common>
 800909a:	3001      	adds	r0, #1
 800909c:	d14c      	bne.n	8009138 <_printf_i+0x200>
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	b004      	add	sp, #16
 80090a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a8:	4834      	ldr	r0, [pc, #208]	; (800917c <_printf_i+0x244>)
 80090aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090ae:	6829      	ldr	r1, [r5, #0]
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80090b6:	6029      	str	r1, [r5, #0]
 80090b8:	061d      	lsls	r5, r3, #24
 80090ba:	d514      	bpl.n	80090e6 <_printf_i+0x1ae>
 80090bc:	07df      	lsls	r7, r3, #31
 80090be:	bf44      	itt	mi
 80090c0:	f043 0320 	orrmi.w	r3, r3, #32
 80090c4:	6023      	strmi	r3, [r4, #0]
 80090c6:	b91e      	cbnz	r6, 80090d0 <_printf_i+0x198>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	f023 0320 	bic.w	r3, r3, #32
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	2310      	movs	r3, #16
 80090d2:	e7af      	b.n	8009034 <_printf_i+0xfc>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f043 0320 	orr.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	2378      	movs	r3, #120	; 0x78
 80090de:	4828      	ldr	r0, [pc, #160]	; (8009180 <_printf_i+0x248>)
 80090e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e4:	e7e3      	b.n	80090ae <_printf_i+0x176>
 80090e6:	0659      	lsls	r1, r3, #25
 80090e8:	bf48      	it	mi
 80090ea:	b2b6      	uxthmi	r6, r6
 80090ec:	e7e6      	b.n	80090bc <_printf_i+0x184>
 80090ee:	4615      	mov	r5, r2
 80090f0:	e7bb      	b.n	800906a <_printf_i+0x132>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	6826      	ldr	r6, [r4, #0]
 80090f6:	1d18      	adds	r0, r3, #4
 80090f8:	6961      	ldr	r1, [r4, #20]
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	0635      	lsls	r5, r6, #24
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	d501      	bpl.n	8009106 <_printf_i+0x1ce>
 8009102:	6019      	str	r1, [r3, #0]
 8009104:	e002      	b.n	800910c <_printf_i+0x1d4>
 8009106:	0670      	lsls	r0, r6, #25
 8009108:	d5fb      	bpl.n	8009102 <_printf_i+0x1ca>
 800910a:	8019      	strh	r1, [r3, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	4615      	mov	r5, r2
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	e7ba      	b.n	800908a <_printf_i+0x152>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	2100      	movs	r1, #0
 8009118:	1d1a      	adds	r2, r3, #4
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	681d      	ldr	r5, [r3, #0]
 800911e:	6862      	ldr	r2, [r4, #4]
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f82f 	bl	8009184 <memchr>
 8009126:	b108      	cbz	r0, 800912c <_printf_i+0x1f4>
 8009128:	1b40      	subs	r0, r0, r5
 800912a:	6060      	str	r0, [r4, #4]
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	2300      	movs	r3, #0
 8009132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009136:	e7a8      	b.n	800908a <_printf_i+0x152>
 8009138:	462a      	mov	r2, r5
 800913a:	4649      	mov	r1, r9
 800913c:	4640      	mov	r0, r8
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	47d0      	blx	sl
 8009142:	3001      	adds	r0, #1
 8009144:	d0ab      	beq.n	800909e <_printf_i+0x166>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	079b      	lsls	r3, r3, #30
 800914a:	d413      	bmi.n	8009174 <_printf_i+0x23c>
 800914c:	68e0      	ldr	r0, [r4, #12]
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	4298      	cmp	r0, r3
 8009152:	bfb8      	it	lt
 8009154:	4618      	movlt	r0, r3
 8009156:	e7a4      	b.n	80090a2 <_printf_i+0x16a>
 8009158:	2301      	movs	r3, #1
 800915a:	4632      	mov	r2, r6
 800915c:	4649      	mov	r1, r9
 800915e:	4640      	mov	r0, r8
 8009160:	47d0      	blx	sl
 8009162:	3001      	adds	r0, #1
 8009164:	d09b      	beq.n	800909e <_printf_i+0x166>
 8009166:	3501      	adds	r5, #1
 8009168:	68e3      	ldr	r3, [r4, #12]
 800916a:	9903      	ldr	r1, [sp, #12]
 800916c:	1a5b      	subs	r3, r3, r1
 800916e:	42ab      	cmp	r3, r5
 8009170:	dcf2      	bgt.n	8009158 <_printf_i+0x220>
 8009172:	e7eb      	b.n	800914c <_printf_i+0x214>
 8009174:	2500      	movs	r5, #0
 8009176:	f104 0619 	add.w	r6, r4, #25
 800917a:	e7f5      	b.n	8009168 <_printf_i+0x230>
 800917c:	08009601 	.word	0x08009601
 8009180:	08009612 	.word	0x08009612

08009184 <memchr>:
 8009184:	4603      	mov	r3, r0
 8009186:	b510      	push	{r4, lr}
 8009188:	b2c9      	uxtb	r1, r1
 800918a:	4402      	add	r2, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	4618      	mov	r0, r3
 8009190:	d101      	bne.n	8009196 <memchr+0x12>
 8009192:	2000      	movs	r0, #0
 8009194:	e003      	b.n	800919e <memchr+0x1a>
 8009196:	7804      	ldrb	r4, [r0, #0]
 8009198:	3301      	adds	r3, #1
 800919a:	428c      	cmp	r4, r1
 800919c:	d1f6      	bne.n	800918c <memchr+0x8>
 800919e:	bd10      	pop	{r4, pc}

080091a0 <memcpy>:
 80091a0:	440a      	add	r2, r1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a8:	d100      	bne.n	80091ac <memcpy+0xc>
 80091aa:	4770      	bx	lr
 80091ac:	b510      	push	{r4, lr}
 80091ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b2:	4291      	cmp	r1, r2
 80091b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b8:	d1f9      	bne.n	80091ae <memcpy+0xe>
 80091ba:	bd10      	pop	{r4, pc}

080091bc <memmove>:
 80091bc:	4288      	cmp	r0, r1
 80091be:	b510      	push	{r4, lr}
 80091c0:	eb01 0402 	add.w	r4, r1, r2
 80091c4:	d902      	bls.n	80091cc <memmove+0x10>
 80091c6:	4284      	cmp	r4, r0
 80091c8:	4623      	mov	r3, r4
 80091ca:	d807      	bhi.n	80091dc <memmove+0x20>
 80091cc:	1e43      	subs	r3, r0, #1
 80091ce:	42a1      	cmp	r1, r4
 80091d0:	d008      	beq.n	80091e4 <memmove+0x28>
 80091d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091da:	e7f8      	b.n	80091ce <memmove+0x12>
 80091dc:	4601      	mov	r1, r0
 80091de:	4402      	add	r2, r0
 80091e0:	428a      	cmp	r2, r1
 80091e2:	d100      	bne.n	80091e6 <memmove+0x2a>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ee:	e7f7      	b.n	80091e0 <memmove+0x24>

080091f0 <_free_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4605      	mov	r5, r0
 80091f4:	2900      	cmp	r1, #0
 80091f6:	d040      	beq.n	800927a <_free_r+0x8a>
 80091f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fc:	1f0c      	subs	r4, r1, #4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfb8      	it	lt
 8009202:	18e4      	addlt	r4, r4, r3
 8009204:	f000 f910 	bl	8009428 <__malloc_lock>
 8009208:	4a1c      	ldr	r2, [pc, #112]	; (800927c <_free_r+0x8c>)
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	b933      	cbnz	r3, 800921c <_free_r+0x2c>
 800920e:	6063      	str	r3, [r4, #4]
 8009210:	6014      	str	r4, [r2, #0]
 8009212:	4628      	mov	r0, r5
 8009214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009218:	f000 b90c 	b.w	8009434 <__malloc_unlock>
 800921c:	42a3      	cmp	r3, r4
 800921e:	d908      	bls.n	8009232 <_free_r+0x42>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	1821      	adds	r1, r4, r0
 8009224:	428b      	cmp	r3, r1
 8009226:	bf01      	itttt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	e7ed      	b.n	800920e <_free_r+0x1e>
 8009232:	461a      	mov	r2, r3
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	b10b      	cbz	r3, 800923c <_free_r+0x4c>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d9fa      	bls.n	8009232 <_free_r+0x42>
 800923c:	6811      	ldr	r1, [r2, #0]
 800923e:	1850      	adds	r0, r2, r1
 8009240:	42a0      	cmp	r0, r4
 8009242:	d10b      	bne.n	800925c <_free_r+0x6c>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	4401      	add	r1, r0
 8009248:	1850      	adds	r0, r2, r1
 800924a:	4283      	cmp	r3, r0
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	d1e0      	bne.n	8009212 <_free_r+0x22>
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4401      	add	r1, r0
 8009256:	6011      	str	r1, [r2, #0]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	e7da      	b.n	8009212 <_free_r+0x22>
 800925c:	d902      	bls.n	8009264 <_free_r+0x74>
 800925e:	230c      	movs	r3, #12
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	e7d6      	b.n	8009212 <_free_r+0x22>
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	1821      	adds	r1, r4, r0
 8009268:	428b      	cmp	r3, r1
 800926a:	bf01      	itttt	eq
 800926c:	6819      	ldreq	r1, [r3, #0]
 800926e:	685b      	ldreq	r3, [r3, #4]
 8009270:	1809      	addeq	r1, r1, r0
 8009272:	6021      	streq	r1, [r4, #0]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	6054      	str	r4, [r2, #4]
 8009278:	e7cb      	b.n	8009212 <_free_r+0x22>
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	2000020c 	.word	0x2000020c

08009280 <sbrk_aligned>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4e0e      	ldr	r6, [pc, #56]	; (80092bc <sbrk_aligned+0x3c>)
 8009284:	460c      	mov	r4, r1
 8009286:	6831      	ldr	r1, [r6, #0]
 8009288:	4605      	mov	r5, r0
 800928a:	b911      	cbnz	r1, 8009292 <sbrk_aligned+0x12>
 800928c:	f000 f8bc 	bl	8009408 <_sbrk_r>
 8009290:	6030      	str	r0, [r6, #0]
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 f8b7 	bl	8009408 <_sbrk_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d00a      	beq.n	80092b4 <sbrk_aligned+0x34>
 800929e:	1cc4      	adds	r4, r0, #3
 80092a0:	f024 0403 	bic.w	r4, r4, #3
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d007      	beq.n	80092b8 <sbrk_aligned+0x38>
 80092a8:	1a21      	subs	r1, r4, r0
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f8ac 	bl	8009408 <_sbrk_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d101      	bne.n	80092b8 <sbrk_aligned+0x38>
 80092b4:	f04f 34ff 	mov.w	r4, #4294967295
 80092b8:	4620      	mov	r0, r4
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	20000210 	.word	0x20000210

080092c0 <_malloc_r>:
 80092c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c4:	1ccd      	adds	r5, r1, #3
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	3508      	adds	r5, #8
 80092cc:	2d0c      	cmp	r5, #12
 80092ce:	bf38      	it	cc
 80092d0:	250c      	movcc	r5, #12
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	4607      	mov	r7, r0
 80092d6:	db01      	blt.n	80092dc <_malloc_r+0x1c>
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d905      	bls.n	80092e8 <_malloc_r+0x28>
 80092dc:	230c      	movs	r3, #12
 80092de:	2600      	movs	r6, #0
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	4630      	mov	r0, r6
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	4e2e      	ldr	r6, [pc, #184]	; (80093a4 <_malloc_r+0xe4>)
 80092ea:	f000 f89d 	bl	8009428 <__malloc_lock>
 80092ee:	6833      	ldr	r3, [r6, #0]
 80092f0:	461c      	mov	r4, r3
 80092f2:	bb34      	cbnz	r4, 8009342 <_malloc_r+0x82>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff ffc2 	bl	8009280 <sbrk_aligned>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	4604      	mov	r4, r0
 8009300:	d14d      	bne.n	800939e <_malloc_r+0xde>
 8009302:	6834      	ldr	r4, [r6, #0]
 8009304:	4626      	mov	r6, r4
 8009306:	2e00      	cmp	r6, #0
 8009308:	d140      	bne.n	800938c <_malloc_r+0xcc>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	4631      	mov	r1, r6
 800930e:	4638      	mov	r0, r7
 8009310:	eb04 0803 	add.w	r8, r4, r3
 8009314:	f000 f878 	bl	8009408 <_sbrk_r>
 8009318:	4580      	cmp	r8, r0
 800931a:	d13a      	bne.n	8009392 <_malloc_r+0xd2>
 800931c:	6821      	ldr	r1, [r4, #0]
 800931e:	3503      	adds	r5, #3
 8009320:	1a6d      	subs	r5, r5, r1
 8009322:	f025 0503 	bic.w	r5, r5, #3
 8009326:	3508      	adds	r5, #8
 8009328:	2d0c      	cmp	r5, #12
 800932a:	bf38      	it	cc
 800932c:	250c      	movcc	r5, #12
 800932e:	4638      	mov	r0, r7
 8009330:	4629      	mov	r1, r5
 8009332:	f7ff ffa5 	bl	8009280 <sbrk_aligned>
 8009336:	3001      	adds	r0, #1
 8009338:	d02b      	beq.n	8009392 <_malloc_r+0xd2>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	442b      	add	r3, r5
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	e00e      	b.n	8009360 <_malloc_r+0xa0>
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	1b52      	subs	r2, r2, r5
 8009346:	d41e      	bmi.n	8009386 <_malloc_r+0xc6>
 8009348:	2a0b      	cmp	r2, #11
 800934a:	d916      	bls.n	800937a <_malloc_r+0xba>
 800934c:	1961      	adds	r1, r4, r5
 800934e:	42a3      	cmp	r3, r4
 8009350:	6025      	str	r5, [r4, #0]
 8009352:	bf18      	it	ne
 8009354:	6059      	strne	r1, [r3, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	bf08      	it	eq
 800935a:	6031      	streq	r1, [r6, #0]
 800935c:	5162      	str	r2, [r4, r5]
 800935e:	604b      	str	r3, [r1, #4]
 8009360:	4638      	mov	r0, r7
 8009362:	f104 060b 	add.w	r6, r4, #11
 8009366:	f000 f865 	bl	8009434 <__malloc_unlock>
 800936a:	f026 0607 	bic.w	r6, r6, #7
 800936e:	1d23      	adds	r3, r4, #4
 8009370:	1af2      	subs	r2, r6, r3
 8009372:	d0b6      	beq.n	80092e2 <_malloc_r+0x22>
 8009374:	1b9b      	subs	r3, r3, r6
 8009376:	50a3      	str	r3, [r4, r2]
 8009378:	e7b3      	b.n	80092e2 <_malloc_r+0x22>
 800937a:	6862      	ldr	r2, [r4, #4]
 800937c:	42a3      	cmp	r3, r4
 800937e:	bf0c      	ite	eq
 8009380:	6032      	streq	r2, [r6, #0]
 8009382:	605a      	strne	r2, [r3, #4]
 8009384:	e7ec      	b.n	8009360 <_malloc_r+0xa0>
 8009386:	4623      	mov	r3, r4
 8009388:	6864      	ldr	r4, [r4, #4]
 800938a:	e7b2      	b.n	80092f2 <_malloc_r+0x32>
 800938c:	4634      	mov	r4, r6
 800938e:	6876      	ldr	r6, [r6, #4]
 8009390:	e7b9      	b.n	8009306 <_malloc_r+0x46>
 8009392:	230c      	movs	r3, #12
 8009394:	4638      	mov	r0, r7
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	f000 f84c 	bl	8009434 <__malloc_unlock>
 800939c:	e7a1      	b.n	80092e2 <_malloc_r+0x22>
 800939e:	6025      	str	r5, [r4, #0]
 80093a0:	e7de      	b.n	8009360 <_malloc_r+0xa0>
 80093a2:	bf00      	nop
 80093a4:	2000020c 	.word	0x2000020c

080093a8 <_realloc_r>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	4680      	mov	r8, r0
 80093ae:	4614      	mov	r4, r2
 80093b0:	460e      	mov	r6, r1
 80093b2:	b921      	cbnz	r1, 80093be <_realloc_r+0x16>
 80093b4:	4611      	mov	r1, r2
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	f7ff bf81 	b.w	80092c0 <_malloc_r>
 80093be:	b92a      	cbnz	r2, 80093cc <_realloc_r+0x24>
 80093c0:	f7ff ff16 	bl	80091f0 <_free_r>
 80093c4:	4625      	mov	r5, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093cc:	f000 f838 	bl	8009440 <_malloc_usable_size_r>
 80093d0:	4284      	cmp	r4, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	d802      	bhi.n	80093dc <_realloc_r+0x34>
 80093d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093da:	d812      	bhi.n	8009402 <_realloc_r+0x5a>
 80093dc:	4621      	mov	r1, r4
 80093de:	4640      	mov	r0, r8
 80093e0:	f7ff ff6e 	bl	80092c0 <_malloc_r>
 80093e4:	4605      	mov	r5, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0ed      	beq.n	80093c6 <_realloc_r+0x1e>
 80093ea:	42bc      	cmp	r4, r7
 80093ec:	4622      	mov	r2, r4
 80093ee:	4631      	mov	r1, r6
 80093f0:	bf28      	it	cs
 80093f2:	463a      	movcs	r2, r7
 80093f4:	f7ff fed4 	bl	80091a0 <memcpy>
 80093f8:	4631      	mov	r1, r6
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fef8 	bl	80091f0 <_free_r>
 8009400:	e7e1      	b.n	80093c6 <_realloc_r+0x1e>
 8009402:	4635      	mov	r5, r6
 8009404:	e7df      	b.n	80093c6 <_realloc_r+0x1e>
	...

08009408 <_sbrk_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	2300      	movs	r3, #0
 800940c:	4d05      	ldr	r5, [pc, #20]	; (8009424 <_sbrk_r+0x1c>)
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7fa ff0e 	bl	8004234 <_sbrk>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_sbrk_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_sbrk_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000214 	.word	0x20000214

08009428 <__malloc_lock>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__malloc_lock+0x8>)
 800942a:	f000 b811 	b.w	8009450 <__retarget_lock_acquire_recursive>
 800942e:	bf00      	nop
 8009430:	20000218 	.word	0x20000218

08009434 <__malloc_unlock>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__malloc_unlock+0x8>)
 8009436:	f000 b80c 	b.w	8009452 <__retarget_lock_release_recursive>
 800943a:	bf00      	nop
 800943c:	20000218 	.word	0x20000218

08009440 <_malloc_usable_size_r>:
 8009440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009444:	1f18      	subs	r0, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	bfbc      	itt	lt
 800944a:	580b      	ldrlt	r3, [r1, r0]
 800944c:	18c0      	addlt	r0, r0, r3
 800944e:	4770      	bx	lr

08009450 <__retarget_lock_acquire_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_release_recursive>:
 8009452:	4770      	bx	lr

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
