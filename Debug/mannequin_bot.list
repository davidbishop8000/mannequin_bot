
mannequin_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  0800ab90  0800ab90  0001ab90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba60  0800ba60  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba60  0800ba60  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba60  0800ba60  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba64  0800ba64  0001ba64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ba68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200000a8  0800bb10  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800bb10  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f81  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002897  00000000  00000000  00032052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000348f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  000359f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0e3  00000000  00000000  00036a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c2d  00000000  00000000  00051b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ef9  00000000  00000000  00065770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  000f66bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab78 	.word	0x0800ab78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	0800ab78 	.word	0x0800ab78

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <constrain>:
static bool _tap_available;
static void orient_cb(unsigned char orient);
static void tap_cb(unsigned char direction, unsigned char count);

uint8_t constrain(uint8_t inp, uint8_t min, uint8_t max)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	return inp < min ? min : (inp > max ? max : inp);
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	429a      	cmp	r2, r3
 8001114:	d306      	bcc.n	8001124 <constrain+0x28>
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	4293      	cmp	r3, r2
 800111c:	bf28      	it	cs
 800111e:	4613      	movcs	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	e000      	b.n	8001126 <constrain+0x2a>
 8001124:	79bb      	ldrb	r3, [r7, #6]
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <MPU9250_begin>:
	_gSense = 0.0f;   // Updated after gyro FSR is set
	return 0;
}

inv_error_t MPU9250_begin(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	inv_error_t result;
	struct int_param_s int_param;

	//	Wire.begin();

	result = mpu_init(&int_param);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fbe7 	bl	800190c <mpu_init>
 800113e:	6078      	str	r0, [r7, #4]

	if (result)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MPU9250_begin+0x1a>
		return result;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e011      	b.n	800116e <MPU9250_begin+0x3e>

	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 800114a:	2001      	movs	r0, #1
 800114c:	f001 fa62 	bl	8002614 <mpu_set_bypass>

	MPU9250_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 8001150:	2079      	movs	r0, #121	; 0x79
 8001152:	f000 f85b 	bl	800120c <MPU9250_setSensors>

	_gSense = MPU9250_getGyroSens();
 8001156:	f000 f813 	bl	8001180 <MPU9250_getGyroSens>
 800115a:	4603      	mov	r3, r0
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <MPU9250_begin+0x48>)
 800115e:	6013      	str	r3, [r2, #0]
	_aSense = MPU9250_getAccelSens();
 8001160:	f000 f820 	bl	80011a4 <MPU9250_getAccelSens>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <MPU9250_begin+0x4c>)
 800116a:	801a      	strh	r2, [r3, #0]

	return result;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000c8 	.word	0x200000c8
 800117c:	200000c4 	.word	0x200000c4

08001180 <MPU9250_getGyroSens>:

	return 0;
}

float MPU9250_getGyroSens(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f81f 	bl	80021cc <mpu_get_gyro_sens>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <MPU9250_getGyroSens+0x18>
	{
		return sens;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	e001      	b.n	800119c <MPU9250_getGyroSens+0x1c>
	}
	return 0;
 8001198:	f04f 0300 	mov.w	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <MPU9250_getAccelSens>:

unsigned short MPU9250_getAccelSens(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 f845 	bl	800223c <mpu_get_accel_sens>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <MPU9250_getAccelSens+0x18>
	{
		return sens;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	e000      	b.n	80011be <MPU9250_getAccelSens+0x1a>
	}
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <MPU9250_fifoAvailable>:
{
	return mpu_reset_fifo();
}

unsigned short MPU9250_fifoAvailable(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
	unsigned char fifoH, fifoL;

	if (mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH) != INV_SUCCESS)
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	4619      	mov	r1, r3
 80011d0:	2072      	movs	r0, #114	; 0x72
 80011d2:	f000 fb6d 	bl	80018b0 <mpu_read_reg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MPU9250_fifoAvailable+0x1a>
		return 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	e011      	b.n	8001204 <MPU9250_fifoAvailable+0x3e>
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
 80011e0:	1dbb      	adds	r3, r7, #6
 80011e2:	4619      	mov	r1, r3
 80011e4:	2073      	movs	r0, #115	; 0x73
 80011e6:	f000 fb63 	bl	80018b0 <mpu_read_reg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MPU9250_fifoAvailable+0x2e>
		return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e007      	b.n	8001204 <MPU9250_fifoAvailable+0x3e>

	return (fifoH << 8) | fifoL;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29b      	uxth	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <MPU9250_setSensors>:

	return INV_SUCCESS;
}

inv_error_t MPU9250_setSensors(unsigned char sensors)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	return mpu_set_sensors(sensors);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f001 f89f 	bl	800235c <mpu_set_sensors>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <MPU9250_dmpBegin>:
	long gyro[3], accel[3];
	return mpu_run_self_test(gyro, accel);
}

inv_error_t MPU9250_dmpBegin(unsigned short features, unsigned short fifoRate)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	460a      	mov	r2, r1
 8001232:	80fb      	strh	r3, [r7, #6]
 8001234:	4613      	mov	r3, r2
 8001236:	80bb      	strh	r3, [r7, #4]
	unsigned short feat = features;
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	81fb      	strh	r3, [r7, #14]
	unsigned short rate = fifoRate;
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	81bb      	strh	r3, [r7, #12]

	if (MPU9250_dmpLoad() != INV_SUCCESS)
 8001240:	f000 f845 	bl	80012ce <MPU9250_dmpLoad>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MPU9250_dmpBegin+0x26>
		return INV_ERROR;
 800124a:	2320      	movs	r3, #32
 800124c:	e03b      	b.n	80012c6 <MPU9250_dmpBegin+0x9e>

	// 3-axis and 6-axis LP quat are mutually exclusive.
	// If both are selected, default to 3-axis
	if (feat & DMP_FEATURE_LP_QUAT)
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <MPU9250_dmpBegin+0x40>
	{
		feat &= ~(DMP_FEATURE_6X_LP_QUAT);
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	f023 0310 	bic.w	r3, r3, #16
 800125e:	81fb      	strh	r3, [r7, #14]
		dmp_enable_lp_quat(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f002 f97d 	bl	8003560 <dmp_enable_lp_quat>
 8001266:	e007      	b.n	8001278 <MPU9250_dmpBegin+0x50>
	}
	else if (feat & DMP_FEATURE_6X_LP_QUAT)
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <MPU9250_dmpBegin+0x50>
		dmp_enable_6x_lp_quat(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f002 f99b 	bl	80035ae <dmp_enable_6x_lp_quat>

	if (feat & DMP_FEATURE_GYRO_CAL)
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <MPU9250_dmpBegin+0x60>
		dmp_enable_gyro_cal(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f002 f93c 	bl	8003500 <dmp_enable_gyro_cal>

	if (MPU9250_dmpEnableFeatures(feat) != INV_SUCCESS)
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f8bc 	bl	8001408 <MPU9250_dmpEnableFeatures>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MPU9250_dmpBegin+0x72>
		return INV_ERROR;
 8001296:	2320      	movs	r3, #32
 8001298:	e015      	b.n	80012c6 <MPU9250_dmpBegin+0x9e>

	rate = constrain(rate, 1, 200);
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	22c8      	movs	r2, #200	; 0xc8
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff2a 	bl	80010fc <constrain>
 80012a8:	4603      	mov	r3, r0
 80012aa:	81bb      	strh	r3, [r7, #12]
	if (MPU9250_dmpSetFifoRate(rate) != INV_SUCCESS)
 80012ac:	89bb      	ldrh	r3, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f814 	bl	80012dc <MPU9250_dmpSetFifoRate>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MPU9250_dmpBegin+0x96>
		return INV_ERROR;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e003      	b.n	80012c6 <MPU9250_dmpBegin+0x9e>

	return mpu_set_dmp_state(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fbd6 	bl	8002a70 <mpu_set_dmp_state>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <MPU9250_dmpLoad>:

inv_error_t MPU9250_dmpLoad(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
	return dmp_load_motion_driver_firmware();
 80012d2:	f001 fd5f 	bl	8002d94 <dmp_load_motion_driver_firmware>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}

080012dc <MPU9250_dmpSetFifoRate>:

	return 0;
}

inv_error_t MPU9250_dmpSetFifoRate(unsigned short rate)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	if (rate > MAX_DMP_SAMPLE_RATE) rate = MAX_DMP_SAMPLE_RATE;
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2bc8      	cmp	r3, #200	; 0xc8
 80012ea:	d901      	bls.n	80012f0 <MPU9250_dmpSetFifoRate+0x14>
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	80fb      	strh	r3, [r7, #6]
	return dmp_set_fifo_rate(rate);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fd5e 	bl	8002db4 <dmp_set_fifo_rate>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MPU9250_dmpUpdateFifo>:

inv_error_t MPU9250_dmpUpdateFifo(void)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08d      	sub	sp, #52	; 0x34
 8001308:	af02      	add	r7, sp, #8
	long quat[4];
	unsigned long timestamp;
	short sensors;
	unsigned char more;

	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 800130a:	1d3c      	adds	r4, r7, #4
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	f107 0118 	add.w	r1, r7, #24
 8001314:	f107 0020 	add.w	r0, r7, #32
 8001318:	1c7b      	adds	r3, r7, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4623      	mov	r3, r4
 8001322:	f002 f9af 	bl	8003684 <dmp_read_fifo>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MPU9250_dmpUpdateFifo+0x2c>
		!= INV_SUCCESS)
	{
		return INV_ERROR;
 800132c:	2320      	movs	r3, #32
 800132e:	e050      	b.n	80013d2 <MPU9250_dmpUpdateFifo+0xce>
	}

	if (sensors & INV_XYZ_ACCEL)
 8001330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00e      	beq.n	800135c <MPU9250_dmpUpdateFifo+0x58>
	{
		ax = accel[X_AXIS];
 800133e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001342:	461a      	mov	r2, r3
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MPU9250_dmpUpdateFifo+0xd8>)
 8001346:	601a      	str	r2, [r3, #0]
		ay = accel[Y_AXIS];
 8001348:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800134c:	461a      	mov	r2, r3
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MPU9250_dmpUpdateFifo+0xdc>)
 8001350:	601a      	str	r2, [r3, #0]
		az = accel[Z_AXIS];
 8001352:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001356:	461a      	mov	r2, r3
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MPU9250_dmpUpdateFifo+0xe0>)
 800135a:	601a      	str	r2, [r3, #0]
	}
	if (sensors & INV_X_GYRO)
 800135c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001360:	b29b      	uxth	r3, r3
 8001362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <MPU9250_dmpUpdateFifo+0x70>
		gx = gyro[X_AXIS];
 800136a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800136e:	461a      	mov	r2, r3
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MPU9250_dmpUpdateFifo+0xe4>)
 8001372:	601a      	str	r2, [r3, #0]
	if (sensors & INV_Y_GYRO)
 8001374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001378:	b29b      	uxth	r3, r3
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <MPU9250_dmpUpdateFifo+0x88>
		gy = gyro[Y_AXIS];
 8001382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001386:	461a      	mov	r2, r3
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MPU9250_dmpUpdateFifo+0xe8>)
 800138a:	601a      	str	r2, [r3, #0]
	if (sensors & INV_Z_GYRO)
 800138c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001390:	b29b      	uxth	r3, r3
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <MPU9250_dmpUpdateFifo+0xa0>
		gz = gyro[Z_AXIS];
 800139a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800139e:	461a      	mov	r2, r3
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MPU9250_dmpUpdateFifo+0xec>)
 80013a2:	601a      	str	r2, [r3, #0]
	if (sensors & INV_WXYZ_QUAT)
 80013a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <MPU9250_dmpUpdateFifo+0xc6>
	{
		qw = quat[0];
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <MPU9250_dmpUpdateFifo+0xf0>)
 80013b6:	6013      	str	r3, [r2, #0]
		qx = quat[1];
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <MPU9250_dmpUpdateFifo+0xf4>)
 80013bc:	6013      	str	r3, [r2, #0]
		qy = quat[2];
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <MPU9250_dmpUpdateFifo+0xf8>)
 80013c2:	6013      	str	r3, [r2, #0]
		qz = quat[3];
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <MPU9250_dmpUpdateFifo+0xfc>)
 80013c8:	6013      	str	r3, [r2, #0]
	}

	time_inside = timestamp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <MPU9250_dmpUpdateFifo+0x100>)
 80013ce:	6013      	str	r3, [r2, #0]

	return INV_SUCCESS;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000cc 	.word	0x200000cc
 80013e0:	200000d0 	.word	0x200000d0
 80013e4:	200000d4 	.word	0x200000d4
 80013e8:	200000d8 	.word	0x200000d8
 80013ec:	200000dc 	.word	0x200000dc
 80013f0:	200000e0 	.word	0x200000e0
 80013f4:	200000e4 	.word	0x200000e4
 80013f8:	200000e8 	.word	0x200000e8
 80013fc:	200000ec 	.word	0x200000ec
 8001400:	200000f0 	.word	0x200000f0
 8001404:	200000f4 	.word	0x200000f4

08001408 <MPU9250_dmpEnableFeatures>:

inv_error_t MPU9250_dmpEnableFeatures(unsigned short mask)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
	unsigned short enMask = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	81fb      	strh	r3, [r7, #14]
	enMask |= mask;
 8001416:	89fa      	ldrh	r2, [r7, #14]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4313      	orrs	r3, r2
 800141c:	81fb      	strh	r3, [r7, #14]
	// Combat known issue where fifo sample rate is incorrect
	// unless tap is enabled in the DMP.
	enMask |= DMP_FEATURE_TAP;
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	81fb      	strh	r3, [r7, #14]
	return dmp_enable_feature(enMask);
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff41 	bl	80032b0 <dmp_enable_feature>
 800142e:	4603      	mov	r3, r0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MPU9250_qToFloat>:
{
	return MPU9250_qToFloat(axis, 30);
}

float MPU9250_qToFloat(long number, unsigned char q)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
	unsigned long mask = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < q; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e00a      	b.n	8001464 <MPU9250_qToFloat+0x2c>
	{
		mask |= (1 << i);
 800144e:	2201      	movs	r2, #1
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < q; i++)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <MPU9250_qToFloat+0x16>
	}
	return (number >> q) + ((number & mask) / (float)(2 << (q - 1)));
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	fa42 f303 	asr.w	r3, r2, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fbe1 	bl	8000c3c <__aeabi_i2f>
 800147a:	4604      	mov	r4, r0
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fbd6 	bl	8000c34 <__aeabi_ui2f>
 8001488:	4605      	mov	r5, r0
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	3b01      	subs	r3, #1
 800148e:	2202      	movs	r2, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fbd1 	bl	8000c3c <__aeabi_i2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4628      	mov	r0, r5
 80014a0:	f7ff fcd4 	bl	8000e4c <__aeabi_fdiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff fb13 	bl	8000ad4 <__addsf3>
 80014ae:	4603      	mov	r3, r0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}

080014b8 <MPU9250_computeEulerAngles>:

void MPU9250_computeEulerAngles(bool degrees)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	float dqw = MPU9250_qToFloat(qw, 30);
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <MPU9250_computeEulerAngles+0x15c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	211e      	movs	r1, #30
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffb5 	bl	8001438 <MPU9250_qToFloat>
 80014ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	float dqx = MPU9250_qToFloat(qx, 30);
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <MPU9250_computeEulerAngles+0x160>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	211e      	movs	r1, #30
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffae 	bl	8001438 <MPU9250_qToFloat>
 80014dc:	62b8      	str	r0, [r7, #40]	; 0x28
	float dqy = MPU9250_qToFloat(qy, 30);
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <MPU9250_computeEulerAngles+0x164>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	211e      	movs	r1, #30
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffa7 	bl	8001438 <MPU9250_qToFloat>
 80014ea:	6278      	str	r0, [r7, #36]	; 0x24
	float dqz = MPU9250_qToFloat(qz, 30);
 80014ec:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <MPU9250_computeEulerAngles+0x168>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	211e      	movs	r1, #30
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffa0 	bl	8001438 <MPU9250_qToFloat>
 80014f8:	6238      	str	r0, [r7, #32]

	float ysqr = dqy * dqy;
 80014fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014fe:	f7ff fbf1 	bl	8000ce4 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	61fb      	str	r3, [r7, #28]
	float t0 = -2.0f * (ysqr + dqz * dqz) + 1.0f;
 8001506:	6a39      	ldr	r1, [r7, #32]
 8001508:	6a38      	ldr	r0, [r7, #32]
 800150a:	f7ff fbeb 	bl	8000ce4 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	69f9      	ldr	r1, [r7, #28]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fade 	bl	8000ad4 <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbe0 	bl	8000ce4 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fad2 	bl	8000ad4 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]
	float t1 = +2.0f * (dqx * dqy - dqw * dqz);
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001538:	f7ff fbd4 	bl	8000ce4 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	461c      	mov	r4, r3
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001544:	f7ff fbce 	bl	8000ce4 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff fabf 	bl	8000ad0 <__aeabi_fsub>
 8001552:	4603      	mov	r3, r0
 8001554:	4619      	mov	r1, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fabc 	bl	8000ad4 <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	617b      	str	r3, [r7, #20]
	float t2 = -2.0f * (dqx * dqz + dqw * dqy);
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001564:	f7ff fbbe 	bl	8000ce4 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	461c      	mov	r4, r3
 800156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001570:	f7ff fbb8 	bl	8000ce4 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4619      	mov	r1, r3
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff faab 	bl	8000ad4 <__addsf3>
 800157e:	4603      	mov	r3, r0
 8001580:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fbad 	bl	8000ce4 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
	float t3 = +2.0f * (dqy * dqz - dqw * dqx);
 800158e:	6a39      	ldr	r1, [r7, #32]
 8001590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001592:	f7ff fba7 	bl	8000ce4 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	461c      	mov	r4, r3
 800159a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800159c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800159e:	f7ff fba1 	bl	8000ce4 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fa92 	bl	8000ad0 <__aeabi_fsub>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fa8f 	bl	8000ad4 <__addsf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	60fb      	str	r3, [r7, #12]
	float t4 = -2.0f * (dqx * dqx + ysqr) + 1.0f;
 80015ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015be:	f7ff fb91 	bl	8000ce4 <__aeabi_fmul>
 80015c2:	4603      	mov	r3, r0
 80015c4:	69f9      	ldr	r1, [r7, #28]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa84 	bl	8000ad4 <__addsf3>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb86 	bl	8000ce4 <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa78 	bl	8000ad4 <__addsf3>
 80015e4:	4603      	mov	r3, r0
 80015e6:	60bb      	str	r3, [r7, #8]

	// Keep t2 within range of asin (-1, 1)
	t2 = t2 > 1.0f ? 1.0f : t2;
 80015e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015ec:	6938      	ldr	r0, [r7, #16]
 80015ee:	f7ff fd35 	bl	800105c <__aeabi_fcmpgt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <MPU9250_computeEulerAngles+0x146>
 80015f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015fc:	e000      	b.n	8001600 <MPU9250_computeEulerAngles+0x148>
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	613b      	str	r3, [r7, #16]
	t2 = t2 < -1.0f ? -1.0f : t2;
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <MPU9250_computeEulerAngles+0x16c>)
 8001604:	6938      	ldr	r0, [r7, #16]
 8001606:	f7ff fd0b 	bl	8001020 <__aeabi_fcmplt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <MPU9250_computeEulerAngles+0x170>
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <MPU9250_computeEulerAngles+0x16c>)
 8001612:	e00a      	b.n	800162a <MPU9250_computeEulerAngles+0x172>
 8001614:	200000e4 	.word	0x200000e4
 8001618:	200000e8 	.word	0x200000e8
 800161c:	200000ec 	.word	0x200000ec
 8001620:	200000f0 	.word	0x200000f0
 8001624:	bf800000 	.word	0xbf800000
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	613b      	str	r3, [r7, #16]

	pitch_inside = asin(t2) * 2;
 800162c:	6938      	ldr	r0, [r7, #16]
 800162e:	f7fe fef3 	bl	8000418 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f007 fcdd 	bl	8008ff8 <asin>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	f7fe fd8b 	bl	800015c <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff f9eb 	bl	8000a28 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 8001656:	6013      	str	r3, [r2, #0]
	roll_inside = atan2(t3, t4);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7fe fedd 	bl	8000418 <__aeabi_f2d>
 800165e:	4604      	mov	r4, r0
 8001660:	460d      	mov	r5, r1
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f7fe fed8 	bl	8000418 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f007 fcea 	bl	8009048 <atan2>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff f9d4 	bl	8000a28 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 8001684:	6013      	str	r3, [r2, #0]
	yaw_inside = atan2(t1, t0);
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7fe fec6 	bl	8000418 <__aeabi_f2d>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f7fe fec1 	bl	8000418 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f007 fcd3 	bl	8009048 <atan2>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff f9bd 	bl	8000a28 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a43      	ldr	r2, [pc, #268]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 80016b2:	6013      	str	r3, [r2, #0]

	if (degrees)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d075      	beq.n	80017a6 <MPU9250_computeEulerAngles+0x2ee>
	{
		pitch_inside *= (180.0 / PI);
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe feaa 	bl	8000418 <__aeabi_f2d>
 80016c4:	a33a      	add	r3, pc, #232	; (adr r3, 80017b0 <MPU9250_computeEulerAngles+0x2f8>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe fefd 	bl	80004c8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f9a7 	bl	8000a28 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 80016de:	6013      	str	r3, [r2, #0]
		roll_inside *= (180.0 / PI);
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe97 	bl	8000418 <__aeabi_f2d>
 80016ea:	a331      	add	r3, pc, #196	; (adr r3, 80017b0 <MPU9250_computeEulerAngles+0x2f8>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe feea 	bl	80004c8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff f994 	bl	8000a28 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 8001704:	6013      	str	r3, [r2, #0]
		yaw_inside *= (180.0 / PI);
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fe84 	bl	8000418 <__aeabi_f2d>
 8001710:	a327      	add	r3, pc, #156	; (adr r3, 80017b0 <MPU9250_computeEulerAngles+0x2f8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fed7 	bl	80004c8 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f981 	bl	8000a28 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 800172a:	6013      	str	r3, [r2, #0]
		if (pitch_inside < 0) pitch_inside = 360.0 + pitch_inside;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc73 	bl	8001020 <__aeabi_fcmplt>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <MPU9250_computeEulerAngles+0x29c>
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	491f      	ldr	r1, [pc, #124]	; (80017c4 <MPU9250_computeEulerAngles+0x30c>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9c4 	bl	8000ad4 <__addsf3>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MPU9250_computeEulerAngles+0x300>)
 8001752:	601a      	str	r2, [r3, #0]
		if (roll_inside < 0) roll_inside = 360.0 + roll_inside;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc5f 	bl	8001020 <__aeabi_fcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <MPU9250_computeEulerAngles+0x2c4>
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4915      	ldr	r1, [pc, #84]	; (80017c4 <MPU9250_computeEulerAngles+0x30c>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9b0 	bl	8000ad4 <__addsf3>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MPU9250_computeEulerAngles+0x304>)
 800177a:	601a      	str	r2, [r3, #0]
		if (yaw_inside < 0) yaw_inside = 360.0 + yaw_inside;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fc4b 	bl	8001020 <__aeabi_fcmplt>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d100      	bne.n	8001792 <MPU9250_computeEulerAngles+0x2da>
	}
}
 8001790:	e009      	b.n	80017a6 <MPU9250_computeEulerAngles+0x2ee>
		if (yaw_inside < 0) yaw_inside = 360.0 + yaw_inside;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	490b      	ldr	r1, [pc, #44]	; (80017c4 <MPU9250_computeEulerAngles+0x30c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f99b 	bl	8000ad4 <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MPU9250_computeEulerAngles+0x308>)
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	; 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	1af05a77 	.word	0x1af05a77
 80017b4:	404ca5dc 	.word	0x404ca5dc
 80017b8:	200000f8 	.word	0x200000f8
 80017bc:	200000fc 	.word	0x200000fc
 80017c0:	20000100 	.word	0x20000100
 80017c4:	43b40000 	.word	0x43b40000

080017c8 <reg_int_cb>:
#define i2c_write(a, b, c, d) stm32_i2c_write(a, b, c, d)
#define i2c_read(a, b, c, d)  stm32_i2c_read(a, b, c, d)
#define delay_ms  stm32_delay_ms
#define get_ms    stm32_get_clock_ms
static inline int reg_int_cb(struct int_param_s *int_param)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <min>:
static int setup_compass(void);
#define MAX_COMPASS_SAMPLE_RATE (100)
#endif

int min(int x, int y)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    return x > y ? y : x;
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	bfa8      	it	ge
 80017ee:	4613      	movge	r3, r2
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <set_int_enable+0xb0>)
 8001808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <set_int_enable+0x4e>
        if (enable)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001816:	2302      	movs	r3, #2
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e001      	b.n	8001820 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <set_int_enable+0xb0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	7818      	ldrb	r0, [r3, #0]
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <set_int_enable+0xb0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	7c59      	ldrb	r1, [r3, #17]
 800182c:	f107 030f 	add.w	r3, r7, #15
 8001830:	2201      	movs	r2, #1
 8001832:	f002 febb 	bl	80045ac <stm32_i2c_write>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <set_int_enable+0x46>
            return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e030      	b.n	80018a4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <set_int_enable+0xb0>)
 8001846:	745a      	strb	r2, [r3, #17]
 8001848:	e02b      	b.n	80018a2 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <set_int_enable+0xb0>)
 800184c:	7a9b      	ldrb	r3, [r3, #10]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <set_int_enable+0x5c>
            return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e025      	b.n	80018a4 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <set_int_enable+0x6e>
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <set_int_enable+0xb0>)
 8001860:	7c5b      	ldrb	r3, [r3, #17]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <set_int_enable+0x6e>
            return 0;
 8001866:	2300      	movs	r3, #0
 8001868:	e01c      	b.n	80018a4 <set_int_enable+0xa8>
        if (enable)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e001      	b.n	800187a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <set_int_enable+0xb0>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <set_int_enable+0xb0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	7c59      	ldrb	r1, [r3, #17]
 8001886:	f107 030f 	add.w	r3, r7, #15
 800188a:	2201      	movs	r2, #1
 800188c:	f002 fe8e 	bl	80045ac <stm32_i2c_write>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <set_int_enable+0xa0>
            return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e003      	b.n	80018a4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <set_int_enable+0xb0>)
 80018a0:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000

080018b0 <mpu_read_reg>:
 *  @param[in]  reg     Register address.
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <mpu_read_reg+0x58>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	7b5b      	ldrb	r3, [r3, #13]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d005      	beq.n	80018d4 <mpu_read_reg+0x24>
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <mpu_read_reg+0x58>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	7e1b      	ldrb	r3, [r3, #24]
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d102      	bne.n	80018da <mpu_read_reg+0x2a>
        return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	e011      	b.n	80018fe <mpu_read_reg+0x4e>
    if (reg >= st.hw->num_reg)
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <mpu_read_reg+0x58>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <mpu_read_reg+0x3c>
        return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e008      	b.n	80018fe <mpu_read_reg+0x4e>
    return i2c_read(st.hw->addr, reg, 1, data);
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <mpu_read_reg+0x58>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	7818      	ldrb	r0, [r3, #0]
 80018f2:	79f9      	ldrb	r1, [r7, #7]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f002 fec2 	bl	8004680 <stm32_i2c_read>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <mpu_init+0x18c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	7818      	ldrb	r0, [r3, #0]
 800191e:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <mpu_init+0x18c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	7d59      	ldrb	r1, [r3, #21]
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	2201      	movs	r2, #1
 800192a:	f002 fe3f 	bl	80045ac <stm32_i2c_write>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <mpu_init+0x2e>
        return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	e0a9      	b.n	8001a8e <mpu_init+0x182>
    delay_ms(100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f002 fd5b 	bl	80043f6 <stm32_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001944:	4b54      	ldr	r3, [pc, #336]	; (8001a98 <mpu_init+0x18c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	7818      	ldrb	r0, [r3, #0]
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <mpu_init+0x18c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	7d59      	ldrb	r1, [r3, #21]
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	2201      	movs	r2, #1
 8001956:	f002 fe29 	bl	80045ac <stm32_i2c_write>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <mpu_init+0x5a>
        return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	e093      	b.n	8001a8e <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <mpu_init+0x18c>)
 8001968:	2200      	movs	r2, #0
 800196a:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800196c:	2348      	movs	r3, #72	; 0x48
 800196e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <mpu_init+0x18c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	7818      	ldrb	r0, [r3, #0]
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <mpu_init+0x18c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	7a19      	ldrb	r1, [r3, #8]
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2201      	movs	r2, #1
 8001982:	f002 fe13 	bl	80045ac <stm32_i2c_write>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <mpu_init+0x86>
        return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	e07d      	b.n	8001a8e <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <mpu_init+0x18c>)
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001998:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <mpu_init+0x18c>)
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <mpu_init+0x18c>)
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <mpu_init+0x18c>)
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <mpu_init+0x18c>)
 80019ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b0:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <mpu_init+0x18c>)
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80019b8:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <mpu_init+0x18c>)
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <mpu_init+0x18c>)
 80019c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c4:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <mpu_init+0x18c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80019cc:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <mpu_init+0x18c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <mpu_init+0x18c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <mpu_init+0x18c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <mpu_init+0x18c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80019e8:	220c      	movs	r2, #12
 80019ea:	2100      	movs	r1, #0
 80019ec:	482b      	ldr	r0, [pc, #172]	; (8001a9c <mpu_init+0x190>)
 80019ee:	f008 f87d 	bl	8009aec <memset>
    st.chip_cfg.dmp_on = 0;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <mpu_init+0x18c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <mpu_init+0x18c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <mpu_init+0x18c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8001a08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a0c:	f000 f9ea 	bl	8001de4 <mpu_set_gyro_fsr>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <mpu_init+0x110>
        return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e038      	b.n	8001a8e <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f000 fa6f 	bl	8001f00 <mpu_set_accel_fsr>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <mpu_init+0x122>
        return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	e02f      	b.n	8001a8e <mpu_init+0x182>
    if (mpu_set_lpf(42))
 8001a2e:	202a      	movs	r0, #42	; 0x2a
 8001a30:	f000 face 	bl	8001fd0 <mpu_set_lpf>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <mpu_init+0x134>
        return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e026      	b.n	8001a8e <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
 8001a40:	2032      	movs	r0, #50	; 0x32
 8001a42:	f000 fb13 	bl	800206c <mpu_set_sample_rate>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <mpu_init+0x146>
        return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a50:	e01d      	b.n	8001a8e <mpu_init+0x182>
    if (mpu_configure_fifo(0))
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 fc30 	bl	80022b8 <mpu_configure_fifo>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <mpu_init+0x158>
        return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e014      	b.n	8001a8e <mpu_init+0x182>

#ifndef EMPL_TARGET_STM32F4    
    if (int_param)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <mpu_init+0x164>
        reg_int_cb(int_param);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff feac 	bl	80017c8 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8001a70:	f001 f852 	bl	8002b18 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8001a74:	200a      	movs	r0, #10
 8001a76:	f000 fb69 	bl	800214c <mpu_set_compass_sample_rate>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <mpu_init+0x17a>
        return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	e003      	b.n	8001a8e <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 fc68 	bl	800235c <mpu_set_sensors>
    return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000016 	.word	0x20000016

08001aa0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b28      	cmp	r3, #40	; 0x28
 8001aae:	d902      	bls.n	8001ab6 <mpu_lp_accel_mode+0x16>
        return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e08c      	b.n	8001bd0 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11c      	bne.n	8001af6 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 fe6f 	bl	80027a0 <mpu_set_int_latched>
        tmp[0] = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	7d59      	ldrb	r1, [r3, #21]
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2202      	movs	r2, #2
 8001adc:	f002 fd66 	bl	80045ac <stm32_i2c_write>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <mpu_lp_accel_mode+0x4c>
            return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e071      	b.n	8001bd0 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	751a      	strb	r2, [r3, #20]
        return 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e06c      	b.n	8001bd0 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fe52 	bl	80027a0 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d102      	bne.n	8001b08 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8001b02:	2302      	movs	r3, #2
 8001b04:	733b      	strb	r3, [r7, #12]
 8001b06:	e032      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d102      	bne.n	8001b14 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	733b      	strb	r3, [r7, #12]
 8001b12:	e02c      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d802      	bhi.n	8001b20 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	733b      	strb	r3, [r7, #12]
 8001b1e:	e026      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	2b0a      	cmp	r3, #10
 8001b24:	d802      	bhi.n	8001b2c <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8001b26:	2305      	movs	r3, #5
 8001b28:	733b      	strb	r3, [r7, #12]
 8001b2a:	e020      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b14      	cmp	r3, #20
 8001b30:	d802      	bhi.n	8001b38 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8001b32:	2306      	movs	r3, #6
 8001b34:	733b      	strb	r3, [r7, #12]
 8001b36:	e01a      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b28      	cmp	r3, #40	; 0x28
 8001b3c:	d802      	bhi.n	8001b44 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	733b      	strb	r3, [r7, #12]
 8001b42:	e014      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	2b50      	cmp	r3, #80	; 0x50
 8001b48:	d802      	bhi.n	8001b50 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	733b      	strb	r3, [r7, #12]
 8001b4e:	e00e      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	2ba0      	cmp	r3, #160	; 0xa0
 8001b54:	d802      	bhi.n	8001b5c <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8001b56:	2309      	movs	r3, #9
 8001b58:	733b      	strb	r3, [r7, #12]
 8001b5a:	e008      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b62:	d802      	bhi.n	8001b6a <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8001b64:	230a      	movs	r3, #10
 8001b66:	733b      	strb	r3, [r7, #12]
 8001b68:	e001      	b.n	8001b6e <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 8001b6a:	230b      	movs	r3, #11
 8001b6c:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	7818      	ldrb	r0, [r3, #0]
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	7a59      	ldrb	r1, [r3, #9]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f002 fd14 	bl	80045ac <stm32_i2c_write>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <mpu_lp_accel_mode+0xf0>
        return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e01f      	b.n	8001bd0 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8001b90:	2320      	movs	r3, #32
 8001b92:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	7818      	ldrb	r0, [r3, #0]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	7d59      	ldrb	r1, [r3, #21]
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f002 fd01 	bl	80045ac <stm32_i2c_write>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <mpu_lp_accel_mode+0x116>
        return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e00c      	b.n	8001bd0 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001bb8:	2208      	movs	r2, #8
 8001bba:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <mpu_lp_accel_mode+0x138>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 fb75 	bl	80022b8 <mpu_configure_fifo>

    return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000

08001bdc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001be2:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001be4:	7a9b      	ldrb	r3, [r3, #10]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <mpu_reset_fifo+0x14>
        return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e0f1      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>

    data = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	7818      	ldrb	r0, [r3, #0]
 8001bfa:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	7c59      	ldrb	r1, [r3, #17]
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	2201      	movs	r2, #1
 8001c04:	f002 fcd2 	bl	80045ac <stm32_i2c_write>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <mpu_reset_fifo+0x38>
        return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e0df      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001c14:	4b71      	ldr	r3, [pc, #452]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	7818      	ldrb	r0, [r3, #0]
 8001c1a:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	7959      	ldrb	r1, [r3, #5]
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	2201      	movs	r2, #1
 8001c24:	f002 fcc2 	bl	80045ac <stm32_i2c_write>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <mpu_reset_fifo+0x58>
        return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e0cf      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	7818      	ldrb	r0, [r3, #0]
 8001c3a:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	7919      	ldrb	r1, [r3, #4]
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	2201      	movs	r2, #1
 8001c44:	f002 fcb2 	bl	80045ac <stm32_i2c_write>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <mpu_reset_fifo+0x78>
        return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e0bf      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8001c54:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d05c      	beq.n	8001d18 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001c62:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	7818      	ldrb	r0, [r3, #0]
 8001c68:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	7919      	ldrb	r1, [r3, #4]
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	2201      	movs	r2, #1
 8001c72:	f002 fc9b 	bl	80045ac <stm32_i2c_write>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <mpu_reset_fifo+0xa6>
            return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e0a8      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8001c82:	2032      	movs	r0, #50	; 0x32
 8001c84:	f002 fbb7 	bl	80043f6 <stm32_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001c8e:	7a9b      	ldrb	r3, [r3, #10]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	7818      	ldrb	r0, [r3, #0]
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	7919      	ldrb	r1, [r3, #4]
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f002 fc7b 	bl	80045ac <stm32_i2c_write>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <mpu_reset_fifo+0xe6>
            return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	e088      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001cc4:	7c5b      	ldrb	r3, [r3, #17]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e001      	b.n	8001cd4 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	7818      	ldrb	r0, [r3, #0]
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7c59      	ldrb	r1, [r3, #17]
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f002 fc62 	bl	80045ac <stm32_i2c_write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <mpu_reset_fifo+0x118>
            return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e06f      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        data = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001cf8:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	7818      	ldrb	r0, [r3, #0]
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7959      	ldrb	r1, [r3, #5]
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	2201      	movs	r2, #1
 8001d08:	f002 fc50 	bl	80045ac <stm32_i2c_write>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d05f      	beq.n	8001dd2 <mpu_reset_fifo+0x1f6>
            return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e05d      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	7818      	ldrb	r0, [r3, #0]
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	7919      	ldrb	r1, [r3, #4]
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f002 fc3e 	bl	80045ac <stm32_i2c_write>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <mpu_reset_fifo+0x160>
            return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e04b      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d3e:	7c9b      	ldrb	r3, [r3, #18]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <mpu_reset_fifo+0x174>
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d46:	7a9b      	ldrb	r3, [r3, #10]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	e001      	b.n	8001d5a <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001d56:	2360      	movs	r3, #96	; 0x60
 8001d58:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	7818      	ldrb	r0, [r3, #0]
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	7919      	ldrb	r1, [r3, #4]
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f002 fc1f 	bl	80045ac <stm32_i2c_write>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <mpu_reset_fifo+0x19e>
            return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e02c      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8001d7a:	2032      	movs	r0, #50	; 0x32
 8001d7c:	f002 fb3b 	bl	80043f6 <stm32_delay_ms>
        if (st.chip_cfg.int_enable)
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d82:	7c5b      	ldrb	r3, [r3, #17]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e001      	b.n	8001d92 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	7818      	ldrb	r0, [r3, #0]
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	7c59      	ldrb	r1, [r3, #17]
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	2201      	movs	r2, #1
 8001da2:	f002 fc03 	bl	80045ac <stm32_i2c_write>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <mpu_reset_fifo+0x1d6>
            return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e010      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	7818      	ldrb	r0, [r3, #0]
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <mpu_reset_fifo+0x200>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	7959      	ldrb	r1, [r3, #5]
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <mpu_reset_fifo+0x204>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f002 fbf3 	bl	80045ac <stm32_i2c_write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <mpu_reset_fifo+0x1f6>
            return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	e000      	b.n	8001dd4 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000010 	.word	0x20000010

08001de4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <mpu_set_gyro_fsr+0xa4>)
 8001df0:	7a9b      	ldrb	r3, [r3, #10]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <mpu_set_gyro_fsr+0x18>
        return -1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e041      	b.n	8001e80 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e02:	d017      	beq.n	8001e34 <mpu_set_gyro_fsr+0x50>
 8001e04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e08:	dc17      	bgt.n	8001e3a <mpu_set_gyro_fsr+0x56>
 8001e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0e:	d00e      	beq.n	8001e2e <mpu_set_gyro_fsr+0x4a>
 8001e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e14:	dc11      	bgt.n	8001e3a <mpu_set_gyro_fsr+0x56>
 8001e16:	2bfa      	cmp	r3, #250	; 0xfa
 8001e18:	d003      	beq.n	8001e22 <mpu_set_gyro_fsr+0x3e>
 8001e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e1e:	d003      	beq.n	8001e28 <mpu_set_gyro_fsr+0x44>
 8001e20:	e00b      	b.n	8001e3a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
        break;
 8001e26:	e00b      	b.n	8001e40 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	73fb      	strb	r3, [r7, #15]
        break;
 8001e2c:	e008      	b.n	8001e40 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	73fb      	strb	r3, [r7, #15]
        break;
 8001e32:	e005      	b.n	8001e40 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001e34:	2318      	movs	r3, #24
 8001e36:	73fb      	strb	r3, [r7, #15]
        break;
 8001e38:	e002      	b.n	8001e40 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e01f      	b.n	8001e80 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <mpu_set_gyro_fsr+0xa4>)
 8001e42:	7a1a      	ldrb	r2, [r3, #8]
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	08db      	lsrs	r3, r3, #3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d101      	bne.n	8001e52 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e016      	b.n	8001e80 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <mpu_set_gyro_fsr+0xa4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	7818      	ldrb	r0, [r3, #0]
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <mpu_set_gyro_fsr+0xa4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	7999      	ldrb	r1, [r3, #6]
 8001e5e:	f107 030f 	add.w	r3, r7, #15
 8001e62:	2201      	movs	r2, #1
 8001e64:	f002 fba2 	bl	80045ac <stm32_i2c_write>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <mpu_set_gyro_fsr+0x90>
        return -1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e005      	b.n	8001e80 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <mpu_set_gyro_fsr+0xa4>)
 8001e7c:	721a      	strb	r2, [r3, #8]
    return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000

08001e8c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <mpu_get_accel_fsr+0x70>)
 8001e96:	7a5b      	ldrb	r3, [r3, #9]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d81b      	bhi.n	8001ed4 <mpu_get_accel_fsr+0x48>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <mpu_get_accel_fsr+0x18>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001eb5 	.word	0x08001eb5
 8001ea8:	08001ebd 	.word	0x08001ebd
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001ecd 	.word	0x08001ecd
    case INV_FSR_2G:
        fsr[0] = 2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
        break;
 8001eba:	e00e      	b.n	8001eda <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
        break;
 8001ec2:	e00a      	b.n	8001eda <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	701a      	strb	r2, [r3, #0]
        break;
 8001eca:	e006      	b.n	8001eda <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	701a      	strb	r2, [r3, #0]
        break;
 8001ed2:	e002      	b.n	8001eda <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	e00a      	b.n	8001ef0 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <mpu_get_accel_fsr+0x70>)
 8001edc:	7cdb      	ldrb	r3, [r3, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	701a      	strb	r2, [r3, #0]
    return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <mpu_set_accel_fsr+0xcc>)
 8001f0c:	7a9b      	ldrb	r3, [r3, #10]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <mpu_set_accel_fsr+0x18>
        return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e054      	b.n	8001fc2 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	3b02      	subs	r3, #2
 8001f1c:	2b0e      	cmp	r3, #14
 8001f1e:	d82d      	bhi.n	8001f7c <mpu_set_accel_fsr+0x7c>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <mpu_set_accel_fsr+0x28>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f65 	.word	0x08001f65
 8001f2c:	08001f7d 	.word	0x08001f7d
 8001f30:	08001f6b 	.word	0x08001f6b
 8001f34:	08001f7d 	.word	0x08001f7d
 8001f38:	08001f7d 	.word	0x08001f7d
 8001f3c:	08001f7d 	.word	0x08001f7d
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f7d 	.word	0x08001f7d
 8001f48:	08001f7d 	.word	0x08001f7d
 8001f4c:	08001f7d 	.word	0x08001f7d
 8001f50:	08001f7d 	.word	0x08001f7d
 8001f54:	08001f7d 	.word	0x08001f7d
 8001f58:	08001f7d 	.word	0x08001f7d
 8001f5c:	08001f7d 	.word	0x08001f7d
 8001f60:	08001f77 	.word	0x08001f77
    case 2:
        data = INV_FSR_2G << 3;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
        break;
 8001f68:	e00b      	b.n	8001f82 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8001f6e:	e008      	b.n	8001f82 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8001f70:	2310      	movs	r3, #16
 8001f72:	73fb      	strb	r3, [r7, #15]
        break;
 8001f74:	e005      	b.n	8001f82 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8001f76:	2318      	movs	r3, #24
 8001f78:	73fb      	strb	r3, [r7, #15]
        break;
 8001f7a:	e002      	b.n	8001f82 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e01f      	b.n	8001fc2 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <mpu_set_accel_fsr+0xcc>)
 8001f84:	7a5a      	ldrb	r2, [r3, #9]
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d101      	bne.n	8001f94 <mpu_set_accel_fsr+0x94>
        return 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e016      	b.n	8001fc2 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <mpu_set_accel_fsr+0xcc>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	7818      	ldrb	r0, [r3, #0]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <mpu_set_accel_fsr+0xcc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	79d9      	ldrb	r1, [r3, #7]
 8001fa0:	f107 030f 	add.w	r3, r7, #15
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f002 fb01 	bl	80045ac <stm32_i2c_write>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <mpu_set_accel_fsr+0xb6>
        return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	e005      	b.n	8001fc2 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <mpu_set_accel_fsr+0xcc>)
 8001fbe:	725a      	strb	r2, [r3, #9]
    return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <mpu_set_lpf+0x98>)
 8001fdc:	7a9b      	ldrb	r3, [r3, #10]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <mpu_set_lpf+0x18>
        return -1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e03b      	b.n	8002060 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	2bbb      	cmp	r3, #187	; 0xbb
 8001fec:	d902      	bls.n	8001ff4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e019      	b.n	8002028 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	2b61      	cmp	r3, #97	; 0x61
 8001ff8:	d902      	bls.n	8002000 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e013      	b.n	8002028 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	2b29      	cmp	r3, #41	; 0x29
 8002004:	d902      	bls.n	800200c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002006:	2303      	movs	r3, #3
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e00d      	b.n	8002028 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	2b13      	cmp	r3, #19
 8002010:	d902      	bls.n	8002018 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002012:	2304      	movs	r3, #4
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e007      	b.n	8002028 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d902      	bls.n	8002024 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800201e:	2305      	movs	r3, #5
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e001      	b.n	8002028 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8002024:	2306      	movs	r3, #6
 8002026:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <mpu_set_lpf+0x98>)
 800202a:	7ada      	ldrb	r2, [r3, #11]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	429a      	cmp	r2, r3
 8002030:	d101      	bne.n	8002036 <mpu_set_lpf+0x66>
        return 0;
 8002032:	2300      	movs	r3, #0
 8002034:	e014      	b.n	8002060 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <mpu_set_lpf+0x98>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	7818      	ldrb	r0, [r3, #0]
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <mpu_set_lpf+0x98>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	7899      	ldrb	r1, [r3, #2]
 8002042:	f107 030f 	add.w	r3, r7, #15
 8002046:	2201      	movs	r2, #1
 8002048:	f002 fab0 	bl	80045ac <stm32_i2c_write>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <mpu_set_lpf+0x88>
        return -1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e003      	b.n	8002060 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <mpu_set_lpf+0x98>)
 800205c:	72da      	strb	r2, [r3, #11]
    return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000

0800206c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <mpu_set_sample_rate+0xdc>)
 8002078:	7a9b      	ldrb	r3, [r3, #10]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <mpu_set_sample_rate+0x18>
        return -1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e05d      	b.n	8002140 <mpu_set_sample_rate+0xd4>

    if (st.chip_cfg.dmp_on)
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <mpu_set_sample_rate+0xdc>)
 8002086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <mpu_set_sample_rate+0x28>
        return -1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e055      	b.n	8002140 <mpu_set_sample_rate+0xd4>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <mpu_set_sample_rate+0xdc>)
 8002096:	7d1b      	ldrb	r3, [r3, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <mpu_set_sample_rate+0x48>
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b28      	cmp	r3, #40	; 0x28
 80020a6:	d805      	bhi.n	80020b4 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcf8 	bl	8001aa0 <mpu_lp_accel_mode>
                return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e045      	b.n	8002140 <mpu_set_sample_rate+0xd4>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fcf3 	bl	8001aa0 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d802      	bhi.n	80020c6 <mpu_set_sample_rate+0x5a>
            rate = 4;
 80020c0:	2304      	movs	r3, #4
 80020c2:	80fb      	strh	r3, [r7, #6]
 80020c4:	e006      	b.n	80020d4 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	d902      	bls.n	80020d4 <mpu_set_sample_rate+0x68>
            rate = 1000;
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020da:	fb92 f3f3 	sdiv	r3, r2, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <mpu_set_sample_rate+0xdc>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	7818      	ldrb	r0, [r3, #0]
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <mpu_set_sample_rate+0xdc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	7859      	ldrb	r1, [r3, #1]
 80020f2:	f107 030f 	add.w	r3, r7, #15
 80020f6:	2201      	movs	r2, #1
 80020f8:	f002 fa58 	bl	80045ac <stm32_i2c_write>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <mpu_set_sample_rate+0x9c>
            return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e01b      	b.n	8002140 <mpu_set_sample_rate+0xd4>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	3301      	adds	r3, #1
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	fb92 f3f3 	sdiv	r3, r2, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <mpu_set_sample_rate+0xdc>)
 8002118:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <mpu_set_sample_rate+0xdc>)
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	2164      	movs	r1, #100	; 0x64
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fb5b 	bl	80017dc <min>
 8002126:	4603      	mov	r3, r0
 8002128:	b29b      	uxth	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f80e 	bl	800214c <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <mpu_set_sample_rate+0xdc>)
 8002132:	89db      	ldrh	r3, [r3, #14]
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff49 	bl	8001fd0 <mpu_set_lpf>
        return 0;
 800213e:	2300      	movs	r3, #0
    }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000

0800214c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <mpu_set_compass_sample_rate+0x20>
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 800215e:	89db      	ldrh	r3, [r3, #14]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	429a      	cmp	r2, r3
 8002164:	d802      	bhi.n	800216c <mpu_set_compass_sample_rate+0x20>
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d902      	bls.n	8002172 <mpu_set_compass_sample_rate+0x26>
        return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e026      	b.n	80021c0 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 8002174:	89da      	ldrh	r2, [r3, #14]
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	7818      	ldrb	r0, [r3, #0]
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8002194:	f107 030f 	add.w	r3, r7, #15
 8002198:	2201      	movs	r2, #1
 800219a:	f002 fa07 	bl	80045ac <stm32_i2c_write>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <mpu_set_compass_sample_rate+0x5e>
        return -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	e00a      	b.n	80021c0 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 80021ac:	89db      	ldrh	r3, [r3, #14]
 80021ae:	461a      	mov	r2, r3
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3301      	adds	r3, #1
 80021b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <mpu_set_compass_sample_rate+0x7c>)
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 80021be:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000000 	.word	0x20000000

080021cc <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <mpu_get_gyro_sens+0x5c>)
 80021d6:	7a1b      	ldrb	r3, [r3, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d81b      	bhi.n	8002214 <mpu_get_gyro_sens+0x48>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <mpu_get_gyro_sens+0x18>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002205 	.word	0x08002205
 80021f0:	0800220d 	.word	0x0800220d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <mpu_get_gyro_sens+0x60>)
 80021f8:	601a      	str	r2, [r3, #0]
        break;
 80021fa:	e00e      	b.n	800221a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <mpu_get_gyro_sens+0x64>)
 8002200:	601a      	str	r2, [r3, #0]
        break;
 8002202:	e00a      	b.n	800221a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <mpu_get_gyro_sens+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
        break;
 800220a:	e006      	b.n	800221a <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <mpu_get_gyro_sens+0x6c>)
 8002210:	601a      	str	r2, [r3, #0]
        break;
 8002212:	e002      	b.n	800221a <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	e000      	b.n	800221c <mpu_get_gyro_sens+0x50>
    }
    return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000
 800222c:	43030000 	.word	0x43030000
 8002230:	42830000 	.word	0x42830000
 8002234:	42033333 	.word	0x42033333
 8002238:	41833333 	.word	0x41833333

0800223c <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <mpu_get_accel_sens+0x78>)
 8002246:	7a5b      	ldrb	r3, [r3, #9]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d81f      	bhi.n	800228c <mpu_get_accel_sens+0x50>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <mpu_get_accel_sens+0x18>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002265 	.word	0x08002265
 8002258:	0800226f 	.word	0x0800226f
 800225c:	08002279 	.word	0x08002279
 8002260:	08002283 	.word	0x08002283
    case INV_FSR_2G:
        sens[0] = 16384;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800226a:	801a      	strh	r2, [r3, #0]
        break;
 800226c:	e011      	b.n	8002292 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	801a      	strh	r2, [r3, #0]
        break;
 8002276:	e00c      	b.n	8002292 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227e:	801a      	strh	r2, [r3, #0]
        break;
 8002280:	e007      	b.n	8002292 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002288:	801a      	strh	r2, [r3, #0]
        break;
 800228a:	e002      	b.n	8002292 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e00a      	b.n	80022a8 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <mpu_get_accel_sens+0x78>)
 8002294:	7cdb      	ldrb	r3, [r3, #19]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	801a      	strh	r2, [r3, #0]
    return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000000 	.word	0x20000000

080022b8 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <mpu_configure_fifo+0xa0>)
 80022d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <mpu_configure_fifo+0x24>
        return 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	e038      	b.n	800234e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <mpu_configure_fifo+0xa0>)
 80022de:	7a9b      	ldrb	r3, [r3, #10]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <mpu_configure_fifo+0x32>
            return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	e031      	b.n	800234e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <mpu_configure_fifo+0xa0>)
 80022ec:	7c1b      	ldrb	r3, [r3, #16]
 80022ee:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <mpu_configure_fifo+0xa0>)
 80022f2:	7a9a      	ldrb	r2, [r3, #10]
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4013      	ands	r3, r2
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <mpu_configure_fifo+0xa0>)
 80022fc:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <mpu_configure_fifo+0xa0>)
 8002300:	7c1b      	ldrb	r3, [r3, #16]
 8002302:	79fa      	ldrb	r2, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d003      	beq.n	8002310 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e001      	b.n	8002314 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <mpu_configure_fifo+0x6a>
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <mpu_configure_fifo+0xa0>)
 800231c:	7d1b      	ldrb	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff fa6a 	bl	80017fc <set_int_enable>
 8002328:	e002      	b.n	8002330 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff fa66 	bl	80017fc <set_int_enable>
        if (sensors) {
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8002336:	f7ff fc51 	bl	8001bdc <mpu_reset_fifo>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <mpu_configure_fifo+0xa0>)
 8002342:	7afb      	ldrb	r3, [r7, #11]
 8002344:	7413      	strb	r3, [r2, #16]
                return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e000      	b.n	800234e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e007      	b.n	8002386 <mpu_set_sensors+0x2a>
    else if (sensors)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <mpu_set_sensors+0x26>
        data = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e001      	b.n	8002386 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	7818      	ldrb	r0, [r3, #0]
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <mpu_set_sensors+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	7d59      	ldrb	r1, [r3, #21]
 8002392:	f107 030f 	add.w	r3, r7, #15
 8002396:	2201      	movs	r2, #1
 8002398:	f002 f908 	bl	80045ac <stm32_i2c_write>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <mpu_set_sensors+0x1b8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	729a      	strb	r2, [r3, #10]
        return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	e0ae      	b.n	800250c <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <mpu_set_sensors+0x1b8>)
 80023b8:	731a      	strb	r2, [r3, #12]

    data = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800240a:	b2db      	uxtb	r3, r3
 800240c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	7818      	ldrb	r0, [r3, #0]
 8002414:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	7d99      	ldrb	r1, [r3, #22]
 800241a:	f107 030f 	add.w	r3, r7, #15
 800241e:	2201      	movs	r2, #1
 8002420:	f002 f8c4 	bl	80045ac <stm32_i2c_write>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <mpu_set_sensors+0x1b8>)
 800242c:	2200      	movs	r2, #0
 800242e:	729a      	strb	r2, [r3, #10]
        return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e06a      	b.n	800250c <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <mpu_set_sensors+0xec>
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d002      	beq.n	8002448 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f9ac 	bl	80027a0 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <mpu_set_sensors+0x1b8>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	7818      	ldrb	r0, [r3, #0]
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	7919      	ldrb	r1, [r3, #4]
 8002454:	f107 030e 	add.w	r3, r7, #14
 8002458:	2201      	movs	r2, #1
 800245a:	f002 f911 	bl	8004680 <stm32_i2c_read>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <mpu_set_sensors+0x10e>
        return -1;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	e050      	b.n	800250c <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8002474:	2311      	movs	r3, #17
 8002476:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73bb      	strb	r3, [r7, #14]
 8002482:	e006      	b.n	8002492 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8002484:	2310      	movs	r3, #16
 8002486:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	f023 0320 	bic.w	r3, r3, #32
 800248e:	b2db      	uxtb	r3, r3
 8002490:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	73bb      	strb	r3, [r7, #14]
 80024a6:	e004      	b.n	80024b2 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 80024a8:	7bbb      	ldrb	r3, [r7, #14]
 80024aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <mpu_set_sensors+0x1b8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	7818      	ldrb	r0, [r3, #0]
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <mpu_set_sensors+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80024c0:	f107 030f 	add.w	r3, r7, #15
 80024c4:	2201      	movs	r2, #1
 80024c6:	f002 f871 	bl	80045ac <stm32_i2c_write>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <mpu_set_sensors+0x17a>
        return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	e01a      	b.n	800250c <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <mpu_set_sensors+0x1b8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	7818      	ldrb	r0, [r3, #0]
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <mpu_set_sensors+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	7919      	ldrb	r1, [r3, #4]
 80024e2:	f107 030e 	add.w	r3, r7, #14
 80024e6:	2201      	movs	r2, #1
 80024e8:	f002 f860 	bl	80045ac <stm32_i2c_write>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <mpu_set_sensors+0x19c>
        return -1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <mpu_set_sensors+0x1b8>)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <mpu_set_sensors+0x1b8>)
 8002500:	2200      	movs	r2, #0
 8002502:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8002504:	2032      	movs	r0, #50	; 0x32
 8002506:	f001 ff76 	bl	80043f6 <stm32_delay_ms>
    return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000000 	.word	0x20000000

08002518 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 8002528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <mpu_read_fifo_stream+0x1e>
        return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e068      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 8002538:	7a9b      	ldrb	r3, [r3, #10]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <mpu_read_fifo_stream+0x2c>
        return -1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e061      	b.n	8002608 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	7818      	ldrb	r0, [r3, #0]
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	7b19      	ldrb	r1, [r3, #12]
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2202      	movs	r2, #2
 8002556:	f002 f893 	bl	8004680 <stm32_i2c_read>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <mpu_read_fifo_stream+0x4e>
        return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	e050      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8002566:	7d3b      	ldrb	r3, [r7, #20]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	b21a      	sxth	r2, r3
 800256c:	7d7b      	ldrb	r3, [r7, #21]
 800256e:	b21b      	sxth	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b21b      	sxth	r3, r3
 8002574:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8002576:	8afa      	ldrh	r2, [r7, #22]
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	429a      	cmp	r2, r3
 800257c:	d205      	bcs.n	800258a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
        return -1;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	e03e      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	885b      	ldrh	r3, [r3, #2]
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	8afa      	ldrh	r2, [r7, #22]
 8002596:	429a      	cmp	r2, r3
 8002598:	d91a      	bls.n	80025d0 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	7818      	ldrb	r0, [r3, #0]
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	7cd9      	ldrb	r1, [r3, #19]
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	2201      	movs	r2, #1
 80025ac:	f002 f868 	bl	8004680 <stm32_i2c_read>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <mpu_read_fifo_stream+0xa4>
            return -1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e025      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 80025bc:	7d3b      	ldrb	r3, [r7, #20]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 80025c6:	f7ff fb09 	bl	8001bdc <mpu_reset_fifo>
            return -2;
 80025ca:	f06f 0301 	mvn.w	r3, #1
 80025ce:	e01b      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	7818      	ldrb	r0, [r3, #0]
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <mpu_read_fifo_stream+0xf8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	7b59      	ldrb	r1, [r3, #13]
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f002 f84d 	bl	8004680 <stm32_i2c_read>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <mpu_read_fifo_stream+0xda>
        return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	e00a      	b.n	8002608 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 80025f2:	8afa      	ldrh	r2, [r7, #22]
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	701a      	strb	r2, [r3, #0]
    return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000000 	.word	0x20000000

08002614 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800261e:	4b5f      	ldr	r3, [pc, #380]	; (800279c <mpu_set_bypass+0x188>)
 8002620:	7c9b      	ldrb	r3, [r3, #18]
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	429a      	cmp	r2, r3
 8002626:	d101      	bne.n	800262c <mpu_set_bypass+0x18>
        return 0;
 8002628:	2300      	movs	r3, #0
 800262a:	e0b2      	b.n	8002792 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d050      	beq.n	80026d4 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002632:	4b5a      	ldr	r3, [pc, #360]	; (800279c <mpu_set_bypass+0x188>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	7818      	ldrb	r0, [r3, #0]
 8002638:	4b58      	ldr	r3, [pc, #352]	; (800279c <mpu_set_bypass+0x188>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	7919      	ldrb	r1, [r3, #4]
 800263e:	f107 030f 	add.w	r3, r7, #15
 8002642:	2201      	movs	r2, #1
 8002644:	f002 f81c 	bl	8004680 <stm32_i2c_read>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <mpu_set_bypass+0x40>
            return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e09e      	b.n	8002792 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f023 0320 	bic.w	r3, r3, #32
 800265a:	b2db      	uxtb	r3, r3
 800265c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800265e:	4b4f      	ldr	r3, [pc, #316]	; (800279c <mpu_set_bypass+0x188>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	7818      	ldrb	r0, [r3, #0]
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <mpu_set_bypass+0x188>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	7919      	ldrb	r1, [r3, #4]
 800266a:	f107 030f 	add.w	r3, r7, #15
 800266e:	2201      	movs	r2, #1
 8002670:	f001 ff9c 	bl	80045ac <stm32_i2c_write>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <mpu_set_bypass+0x6c>
            return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e088      	b.n	8002792 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002680:	2003      	movs	r0, #3
 8002682:	f001 feb8 	bl	80043f6 <stm32_delay_ms>
        tmp = BIT_BYPASS_EN;
 8002686:	2302      	movs	r3, #2
 8002688:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <mpu_set_bypass+0x188>)
 800268c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800269a:	b2db      	uxtb	r3, r3
 800269c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800269e:	4b3f      	ldr	r3, [pc, #252]	; (800279c <mpu_set_bypass+0x188>)
 80026a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <mpu_set_bypass+0x188>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	7818      	ldrb	r0, [r3, #0]
 80026b8:	4b38      	ldr	r3, [pc, #224]	; (800279c <mpu_set_bypass+0x188>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	7dd9      	ldrb	r1, [r3, #23]
 80026be:	f107 030f 	add.w	r3, r7, #15
 80026c2:	2201      	movs	r2, #1
 80026c4:	f001 ff72 	bl	80045ac <stm32_i2c_write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d05d      	beq.n	800278a <mpu_set_bypass+0x176>
            return -1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e05e      	b.n	8002792 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <mpu_set_bypass+0x188>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	7818      	ldrb	r0, [r3, #0]
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <mpu_set_bypass+0x188>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	7919      	ldrb	r1, [r3, #4]
 80026e0:	f107 030f 	add.w	r3, r7, #15
 80026e4:	2201      	movs	r2, #1
 80026e6:	f001 ffcb 	bl	8004680 <stm32_i2c_read>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <mpu_set_bypass+0xe2>
            return -1;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	e04d      	b.n	8002792 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <mpu_set_bypass+0x188>)
 80026f8:	7a9b      	ldrb	r3, [r3, #10]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	b2db      	uxtb	r3, r3
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e004      	b.n	8002718 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	f023 0320 	bic.w	r3, r3, #32
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <mpu_set_bypass+0x188>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	7818      	ldrb	r0, [r3, #0]
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <mpu_set_bypass+0x188>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	7919      	ldrb	r1, [r3, #4]
 8002724:	f107 030f 	add.w	r3, r7, #15
 8002728:	2201      	movs	r2, #1
 800272a:	f001 ff3f 	bl	80045ac <stm32_i2c_write>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <mpu_set_bypass+0x126>
            return -1;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e02b      	b.n	8002792 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800273a:	2003      	movs	r0, #3
 800273c:	f001 fe5b 	bl	80043f6 <stm32_delay_ms>
        if (st.chip_cfg.active_low_int)
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <mpu_set_bypass+0x188>)
 8002742:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e001      	b.n	8002754 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <mpu_set_bypass+0x188>)
 8002756:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002764:	b2db      	uxtb	r3, r3
 8002766:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <mpu_set_bypass+0x188>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	7818      	ldrb	r0, [r3, #0]
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <mpu_set_bypass+0x188>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	7dd9      	ldrb	r1, [r3, #23]
 8002774:	f107 030f 	add.w	r3, r7, #15
 8002778:	2201      	movs	r2, #1
 800277a:	f001 ff17 	bl	80045ac <stm32_i2c_write>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <mpu_set_bypass+0x176>
            return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e003      	b.n	8002792 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <mpu_set_bypass+0x188>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	7493      	strb	r3, [r2, #18]
    return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <mpu_set_int_latched+0x84>)
 80027ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d101      	bne.n	80027ba <mpu_set_int_latched+0x1a>
        return 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e030      	b.n	800281c <mpu_set_int_latched+0x7c>

    if (enable)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80027c0:	2330      	movs	r3, #48	; 0x30
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <mpu_set_int_latched+0x84>)
 80027cc:	7c9b      	ldrb	r3, [r3, #18]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <mpu_set_int_latched+0x84>)
 80027de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <mpu_set_int_latched+0x84>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	7818      	ldrb	r0, [r3, #0]
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <mpu_set_int_latched+0x84>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	7dd9      	ldrb	r1, [r3, #23]
 80027fc:	f107 030f 	add.w	r3, r7, #15
 8002800:	2201      	movs	r2, #1
 8002802:	f001 fed3 	bl	80045ac <stm32_i2c_write>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <mpu_set_int_latched+0x72>
        return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e004      	b.n	800281c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <mpu_set_int_latched+0x84>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000000 	.word	0x20000000

08002828 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	603a      	str	r2, [r7, #0]
 8002832:	80fb      	strh	r3, [r7, #6]
 8002834:	460b      	mov	r3, r1
 8002836:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <mpu_write_mem+0x1c>
        return -1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e03d      	b.n	80028c0 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <mpu_write_mem+0xa0>)
 8002846:	7a9b      	ldrb	r3, [r3, #10]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <mpu_write_mem+0x2a>
        return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e036      	b.n	80028c0 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	b29b      	uxth	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002862:	7b7b      	ldrb	r3, [r7, #13]
 8002864:	461a      	mov	r2, r3
 8002866:	88bb      	ldrh	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <mpu_write_mem+0xa0>)
 800286c:	6852      	ldr	r2, [r2, #4]
 800286e:	8952      	ldrh	r2, [r2, #10]
 8002870:	4293      	cmp	r3, r2
 8002872:	dd02      	ble.n	800287a <mpu_write_mem+0x52>
        return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	e022      	b.n	80028c0 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <mpu_write_mem+0xa0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	7818      	ldrb	r0, [r3, #0]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <mpu_write_mem+0xa0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	7ed9      	ldrb	r1, [r3, #27]
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	2202      	movs	r2, #2
 800288c:	f001 fe8e 	bl	80045ac <stm32_i2c_write>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <mpu_write_mem+0x74>
        return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e011      	b.n	80028c0 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <mpu_write_mem+0xa0>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	7818      	ldrb	r0, [r3, #0]
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <mpu_write_mem+0xa0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	7e19      	ldrb	r1, [r3, #24]
 80028a8:	88bb      	ldrh	r3, [r7, #4]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f001 fe7d 	bl	80045ac <stm32_i2c_write>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <mpu_write_mem+0x96>
        return -1;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	e000      	b.n	80028c0 <mpu_write_mem+0x98>
    return 0;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000

080028cc <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	603a      	str	r2, [r7, #0]
 80028d6:	80fb      	strh	r3, [r7, #6]
 80028d8:	460b      	mov	r3, r1
 80028da:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <mpu_read_mem+0x1c>
        return -1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e03d      	b.n	8002964 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <mpu_read_mem+0xa0>)
 80028ea:	7a9b      	ldrb	r3, [r3, #10]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <mpu_read_mem+0x2a>
        return -1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e036      	b.n	8002964 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8002906:	7b7b      	ldrb	r3, [r7, #13]
 8002908:	461a      	mov	r2, r3
 800290a:	88bb      	ldrh	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <mpu_read_mem+0xa0>)
 8002910:	6852      	ldr	r2, [r2, #4]
 8002912:	8952      	ldrh	r2, [r2, #10]
 8002914:	4293      	cmp	r3, r2
 8002916:	dd02      	ble.n	800291e <mpu_read_mem+0x52>
        return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	e022      	b.n	8002964 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <mpu_read_mem+0xa0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	7818      	ldrb	r0, [r3, #0]
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <mpu_read_mem+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	7ed9      	ldrb	r1, [r3, #27]
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	2202      	movs	r2, #2
 8002930:	f001 fe3c 	bl	80045ac <stm32_i2c_write>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <mpu_read_mem+0x74>
        return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	e011      	b.n	8002964 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <mpu_read_mem+0xa0>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	7818      	ldrb	r0, [r3, #0]
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <mpu_read_mem+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	7e19      	ldrb	r1, [r3, #24]
 800294c:	88bb      	ldrh	r3, [r7, #4]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f001 fe95 	bl	8004680 <stm32_i2c_read>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <mpu_read_mem+0x96>
        return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	e000      	b.n	8002964 <mpu_read_mem+0x98>
    return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000000 	.word	0x20000000

08002970 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	4611      	mov	r1, r2
 800297a:	461a      	mov	r2, r3
 800297c:	4603      	mov	r3, r0
 800297e:	81fb      	strh	r3, [r7, #14]
 8002980:	460b      	mov	r3, r1
 8002982:	81bb      	strh	r3, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <mpu_load_firmware+0xfc>)
 800298a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e064      	b.n	8002a62 <mpu_load_firmware+0xf2>

    if (!firmware)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <mpu_load_firmware+0x34>
        return -1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e05e      	b.n	8002a62 <mpu_load_firmware+0xf2>
    for (ii = 0; ii < length; ii += this_write) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029a8:	e036      	b.n	8002a18 <mpu_load_firmware+0xa8>
        this_write = min(LOAD_CHUNK, length - ii);
 80029aa:	89fa      	ldrh	r2, [r7, #14]
 80029ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	2010      	movs	r0, #16
 80029b4:	f7fe ff12 	bl	80017dc <min>
 80029b8:	4603      	mov	r3, r0
 80029ba:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80029bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	441a      	add	r2, r3
 80029c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80029c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff2e 	bl	8002828 <mpu_write_mem>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <mpu_load_firmware+0x68>
            return -1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e044      	b.n	8002a62 <mpu_load_firmware+0xf2>
        if (mpu_read_mem(ii, this_write, cur))
 80029d8:	f107 0214 	add.w	r2, r7, #20
 80029dc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80029de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff73 	bl	80028cc <mpu_read_mem>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <mpu_load_firmware+0x82>
            return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	e037      	b.n	8002a62 <mpu_load_firmware+0xf2>
        if (memcmp(firmware+ii, cur, this_write))
 80029f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4413      	add	r3, r2
 80029f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029fa:	f107 0114 	add.w	r1, r7, #20
 80029fe:	4618      	mov	r0, r3
 8002a00:	f007 f864 	bl	8009acc <memcmp>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <mpu_load_firmware+0xa0>
            return -2;
 8002a0a:	f06f 0301 	mvn.w	r3, #1
 8002a0e:	e028      	b.n	8002a62 <mpu_load_firmware+0xf2>
    for (ii = 0; ii < length; ii += this_write) {
 8002a10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a14:	4413      	add	r3, r2
 8002a16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3c4      	bcc.n	80029aa <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8002a2a:	89bb      	ldrh	r3, [r7, #12]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <mpu_load_firmware+0xfc>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	7818      	ldrb	r0, [r3, #0]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <mpu_load_firmware+0xfc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	7f59      	ldrb	r1, [r3, #29]
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	2202      	movs	r2, #2
 8002a42:	f001 fdb3 	bl	80045ac <stm32_i2c_write>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <mpu_load_firmware+0xe2>
        return -1;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	e007      	b.n	8002a62 <mpu_load_firmware+0xf2>

    st.chip_cfg.dmp_loaded = 1;
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <mpu_load_firmware+0xfc>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <mpu_load_firmware+0xfc>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000000 	.word	0x20000000

08002a70 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d101      	bne.n	8002a8a <mpu_set_dmp_state+0x1a>
        return 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e040      	b.n	8002b0c <mpu_set_dmp_state+0x9c>

    if (enable) {
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d027      	beq.n	8002ae0 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002a92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <mpu_set_dmp_state+0x30>
            return -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e035      	b.n	8002b0c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe feab 	bl	80017fc <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fdb4 	bl	8002614 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fadb 	bl	800206c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	7818      	ldrb	r0, [r3, #0]
 8002ac0:	f107 030f 	add.w	r3, r7, #15
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2123      	movs	r1, #35	; 0x23
 8002ac8:	f001 fd70 	bl	80045ac <stm32_i2c_write>
        st.chip_cfg.dmp_on = 1;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f7fe fe91 	bl	80017fc <set_int_enable>
        mpu_reset_fifo();
 8002ada:	f7ff f87f 	bl	8001bdc <mpu_reset_fifo>
 8002ade:	e014      	b.n	8002b0a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fe fe8b 	bl	80017fc <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002ae8:	7c1b      	ldrb	r3, [r3, #16]
 8002aea:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	7818      	ldrb	r0, [r3, #0]
 8002af2:	f107 030f 	add.w	r3, r7, #15
 8002af6:	2201      	movs	r2, #1
 8002af8:	2123      	movs	r1, #35	; 0x23
 8002afa:	f001 fd57 	bl	80045ac <stm32_i2c_write>
        st.chip_cfg.dmp_on = 0;
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <mpu_set_dmp_state+0xa4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8002b06:	f7ff f869 	bl	8001bdc <mpu_reset_fifo>
    }
    return 0;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000000 	.word	0x20000000

08002b18 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7ff fd78 	bl	8002614 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8002b24:	230c      	movs	r3, #12
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e00f      	b.n	8002b4a <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	7bf8      	ldrb	r0, [r7, #15]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2100      	movs	r1, #0
 8002b32:	f001 fda5 	bl	8004680 <stm32_i2c_read>
 8002b36:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <setup_compass+0x2c>
 8002b3e:	793b      	ldrb	r3, [r7, #4]
 8002b40:	2b48      	cmp	r3, #72	; 0x48
 8002b42:	d006      	beq.n	8002b52 <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	3301      	adds	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d9ec      	bls.n	8002b2a <setup_compass+0x12>
 8002b50:	e000      	b.n	8002b54 <setup_compass+0x3c>
            break;
 8002b52:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	d902      	bls.n	8002b60 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e112      	b.n	8002d86 <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8002b60:	4a8b      	ldr	r2, [pc, #556]	; (8002d90 <setup_compass+0x278>)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8002b68:	2310      	movs	r3, #16
 8002b6a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8002b6c:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <setup_compass+0x278>)
 8002b6e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	2201      	movs	r2, #1
 8002b76:	210a      	movs	r1, #10
 8002b78:	f001 fd18 	bl	80045ac <stm32_i2c_write>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <setup_compass+0x70>
        return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e0fe      	b.n	8002d86 <setup_compass+0x26e>
    delay_ms(1);
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f001 fc34 	bl	80043f6 <stm32_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8002b8e:	231f      	movs	r3, #31
 8002b90:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <setup_compass+0x278>)
 8002b94:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	210a      	movs	r1, #10
 8002b9e:	f001 fd05 	bl	80045ac <stm32_i2c_write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <setup_compass+0x96>
        return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	e0eb      	b.n	8002d86 <setup_compass+0x26e>
    delay_ms(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f001 fc21 	bl	80043f6 <stm32_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8002bb4:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <setup_compass+0x278>)
 8002bb6:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	f001 fd5e 	bl	8004680 <stm32_i2c_read>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <setup_compass+0xb8>
        return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e0da      	b.n	8002d86 <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8002bd0:	793b      	ldrb	r3, [r7, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3380      	adds	r3, #128	; 0x80
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	4b6d      	ldr	r3, [pc, #436]	; (8002d90 <setup_compass+0x278>)
 8002bdc:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3380      	adds	r3, #128	; 0x80
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <setup_compass+0x278>)
 8002bea:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3380      	adds	r3, #128	; 0x80
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <setup_compass+0x278>)
 8002bf8:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8002bfe:	4b64      	ldr	r3, [pc, #400]	; (8002d90 <setup_compass+0x278>)
 8002c00:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2201      	movs	r2, #1
 8002c08:	210a      	movs	r1, #10
 8002c0a:	f001 fccf 	bl	80045ac <stm32_i2c_write>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <setup_compass+0x102>
        return -1;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
 8002c18:	e0b5      	b.n	8002d86 <setup_compass+0x26e>
    delay_ms(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f001 fbeb 	bl	80043f6 <stm32_delay_ms>

    mpu_set_bypass(0);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff fcf7 	bl	8002614 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8002c2a:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <setup_compass+0x278>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	7818      	ldrb	r0, [r3, #0]
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <setup_compass+0x278>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	7e99      	ldrb	r1, [r3, #26]
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f001 fcb7 	bl	80045ac <stm32_i2c_write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <setup_compass+0x132>
        return -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	e09d      	b.n	8002d86 <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <setup_compass+0x278>)
 8002c4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8002c58:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <setup_compass+0x278>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	7818      	ldrb	r0, [r3, #0]
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <setup_compass+0x278>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	7f99      	ldrb	r1, [r3, #30]
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2201      	movs	r2, #1
 8002c68:	f001 fca0 	bl	80045ac <stm32_i2c_write>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <setup_compass+0x160>
        return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e086      	b.n	8002d86 <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8002c7c:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <setup_compass+0x278>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	7818      	ldrb	r0, [r3, #0]
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <setup_compass+0x278>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	7fd9      	ldrb	r1, [r3, #31]
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f001 fc8e 	bl	80045ac <stm32_i2c_write>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <setup_compass+0x184>
        return -1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e074      	b.n	8002d86 <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8002c9c:	2388      	movs	r3, #136	; 0x88
 8002c9e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <setup_compass+0x278>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	7818      	ldrb	r0, [r3, #0]
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <setup_compass+0x278>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f893 1020 	ldrb.w	r1, [r3, #32]
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f001 fc7b 	bl	80045ac <stm32_i2c_write>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <setup_compass+0x1aa>
        return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e061      	b.n	8002d86 <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8002cc2:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <setup_compass+0x278>)
 8002cc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002cc8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <setup_compass+0x278>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	7818      	ldrb	r0, [r3, #0]
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <setup_compass+0x278>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f001 fc66 	bl	80045ac <stm32_i2c_write>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <setup_compass+0x1d4>
        return -1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e04c      	b.n	8002d86 <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8002cec:	230a      	movs	r3, #10
 8002cee:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <setup_compass+0x278>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	7818      	ldrb	r0, [r3, #0]
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <setup_compass+0x278>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2201      	movs	r2, #1
 8002d02:	f001 fc53 	bl	80045ac <stm32_i2c_write>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <setup_compass+0x1fa>
        return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d10:	e039      	b.n	8002d86 <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8002d12:	2381      	movs	r3, #129	; 0x81
 8002d14:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <setup_compass+0x278>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	7818      	ldrb	r0, [r3, #0]
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <setup_compass+0x278>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2201      	movs	r2, #1
 8002d28:	f001 fc40 	bl	80045ac <stm32_i2c_write>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <setup_compass+0x220>
        return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e026      	b.n	8002d86 <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8002d38:	2311      	movs	r3, #17
 8002d3a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <setup_compass+0x278>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	7818      	ldrb	r0, [r3, #0]
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <setup_compass+0x278>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f001 fc2d 	bl	80045ac <stm32_i2c_write>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <setup_compass+0x246>
        return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e013      	b.n	8002d86 <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <setup_compass+0x278>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	7818      	ldrb	r0, [r3, #0]
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <setup_compass+0x278>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2201      	movs	r2, #1
 8002d74:	f001 fc1a 	bl	80045ac <stm32_i2c_write>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <setup_compass+0x26c>
        return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e000      	b.n	8002d86 <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8002d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9c:	23c8      	movs	r3, #200	; 0xc8
 8002d9e:	4904      	ldr	r1, [pc, #16]	; (8002db0 <dmp_load_motion_driver_firmware+0x1c>)
 8002da0:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8002da4:	f7ff fde4 	bl	8002970 <mpu_load_firmware>
 8002da8:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	0800ac84 	.word	0x0800ac84

08002db4 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <dmp_set_fifo_rate+0x88>)
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2bc8      	cmp	r3, #200	; 0xc8
 8002dce:	d902      	bls.n	8002dd6 <dmp_set_fifo_rate+0x22>
        return -1;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	e02e      	b.n	8002e34 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	22c8      	movs	r2, #200	; 0xc8
 8002dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8002de4:	8bfb      	ldrh	r3, [r7, #30]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8002dee:	8bfb      	ldrh	r3, [r7, #30]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8002df4:	f107 0308 	add.w	r3, r7, #8
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	f240 2016 	movw	r0, #534	; 0x216
 8002e00:	f7ff fd12 	bl	8002828 <mpu_write_mem>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <dmp_set_fifo_rate+0x5c>
        return -1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e011      	b.n	8002e34 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	461a      	mov	r2, r3
 8002e16:	210c      	movs	r1, #12
 8002e18:	f640 20c1 	movw	r0, #2753	; 0xac1
 8002e1c:	f7ff fd04 	bl	8002828 <mpu_write_mem>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <dmp_set_fifo_rate+0x78>
        return -1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e003      	b.n	8002e34 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <dmp_set_fifo_rate+0x8c>)
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	8193      	strh	r3, [r2, #12]
    return 0;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0800aba0 	.word	0x0800aba0
 8002e40:	20000104 	.word	0x20000104

08002e44 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <dmp_set_tap_thresh+0x22>
 8002e5e:	88bb      	ldrh	r3, [r7, #4]
 8002e60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002e64:	d902      	bls.n	8002e6c <dmp_set_tap_thresh+0x28>
        return -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e107      	b.n	800307c <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8002e6c:	88bb      	ldrh	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fee0 	bl	8000c34 <__aeabi_ui2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4983      	ldr	r1, [pc, #524]	; (8003084 <dmp_set_tap_thresh+0x240>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ffe7 	bl	8000e4c <__aeabi_fdiv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8002e82:	f107 030b 	add.w	r3, r7, #11
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f800 	bl	8001e8c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	3b02      	subs	r3, #2
 8002e90:	2b0e      	cmp	r3, #14
 8002e92:	d879      	bhi.n	8002f88 <dmp_set_tap_thresh+0x144>
 8002e94:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <dmp_set_tap_thresh+0x58>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002ed9 	.word	0x08002ed9
 8002ea0:	08002f89 	.word	0x08002f89
 8002ea4:	08002f05 	.word	0x08002f05
 8002ea8:	08002f89 	.word	0x08002f89
 8002eac:	08002f89 	.word	0x08002f89
 8002eb0:	08002f89 	.word	0x08002f89
 8002eb4:	08002f31 	.word	0x08002f31
 8002eb8:	08002f89 	.word	0x08002f89
 8002ebc:	08002f89 	.word	0x08002f89
 8002ec0:	08002f89 	.word	0x08002f89
 8002ec4:	08002f89 	.word	0x08002f89
 8002ec8:	08002f89 	.word	0x08002f89
 8002ecc:	08002f89 	.word	0x08002f89
 8002ed0:	08002f89 	.word	0x08002f89
 8002ed4:	08002f5d 	.word	0x08002f5d
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8002ed8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f7fd ff01 	bl	8000ce4 <__aeabi_fmul>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f8e9 	bl	80010bc <__aeabi_f2uiz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8002eee:	4966      	ldr	r1, [pc, #408]	; (8003088 <dmp_set_tap_thresh+0x244>)
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	f7fd fef7 	bl	8000ce4 <__aeabi_fmul>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe f8df 	bl	80010bc <__aeabi_f2uiz>
 8002efe:	4603      	mov	r3, r0
 8002f00:	82bb      	strh	r3, [r7, #20]
        break;
 8002f02:	e044      	b.n	8002f8e <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8002f04:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002f08:	6938      	ldr	r0, [r7, #16]
 8002f0a:	f7fd feeb 	bl	8000ce4 <__aeabi_fmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f8d3 	bl	80010bc <__aeabi_f2uiz>
 8002f16:	4603      	mov	r3, r0
 8002f18:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8002f1a:	495c      	ldr	r1, [pc, #368]	; (800308c <dmp_set_tap_thresh+0x248>)
 8002f1c:	6938      	ldr	r0, [r7, #16]
 8002f1e:	f7fd fee1 	bl	8000ce4 <__aeabi_fmul>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe f8c9 	bl	80010bc <__aeabi_f2uiz>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	82bb      	strh	r3, [r7, #20]
        break;
 8002f2e:	e02e      	b.n	8002f8e <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8002f30:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002f34:	6938      	ldr	r0, [r7, #16]
 8002f36:	f7fd fed5 	bl	8000ce4 <__aeabi_fmul>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f8bd 	bl	80010bc <__aeabi_f2uiz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8002f46:	4952      	ldr	r1, [pc, #328]	; (8003090 <dmp_set_tap_thresh+0x24c>)
 8002f48:	6938      	ldr	r0, [r7, #16]
 8002f4a:	f7fd fecb 	bl	8000ce4 <__aeabi_fmul>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe f8b3 	bl	80010bc <__aeabi_f2uiz>
 8002f56:	4603      	mov	r3, r0
 8002f58:	82bb      	strh	r3, [r7, #20]
        break;
 8002f5a:	e018      	b.n	8002f8e <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8002f5c:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002f60:	6938      	ldr	r0, [r7, #16]
 8002f62:	f7fd febf 	bl	8000ce4 <__aeabi_fmul>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f8a7 	bl	80010bc <__aeabi_f2uiz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8002f72:	4948      	ldr	r1, [pc, #288]	; (8003094 <dmp_set_tap_thresh+0x250>)
 8002f74:	6938      	ldr	r0, [r7, #16]
 8002f76:	f7fd feb5 	bl	8000ce4 <__aeabi_fmul>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f89d 	bl	80010bc <__aeabi_f2uiz>
 8002f82:	4603      	mov	r3, r0
 8002f84:	82bb      	strh	r3, [r7, #20]
        break;
 8002f86:	e002      	b.n	8002f8e <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	e076      	b.n	800307c <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8002f8e:	8afb      	ldrh	r3, [r7, #22]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8002f9e:	8abb      	ldrh	r3, [r7, #20]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8002fa8:	8abb      	ldrh	r3, [r7, #20]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01c      	beq.n	8002ff2 <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8002fc4:	f7ff fc30 	bl	8002828 <mpu_write_mem>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <dmp_set_tap_thresh+0x190>
            return -1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e053      	b.n	800307c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	3302      	adds	r3, #2
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2102      	movs	r1, #2
 8002fde:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002fe2:	f7ff fc21 	bl	8002828 <mpu_write_mem>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <dmp_set_tap_thresh+0x1ae>
            return -1;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff0:	e044      	b.n	800307c <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	461a      	mov	r2, r3
 8003002:	2102      	movs	r1, #2
 8003004:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8003008:	f7ff fc0e 	bl	8002828 <mpu_write_mem>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <dmp_set_tap_thresh+0x1d4>
            return -1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	e031      	b.n	800307c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	3302      	adds	r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	2102      	movs	r1, #2
 8003022:	f44f 7094 	mov.w	r0, #296	; 0x128
 8003026:	f7ff fbff 	bl	8002828 <mpu_write_mem>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <dmp_set_tap_thresh+0x1f2>
            return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	e022      	b.n	800307c <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	461a      	mov	r2, r3
 8003046:	2102      	movs	r1, #2
 8003048:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800304c:	f7ff fbec 	bl	8002828 <mpu_write_mem>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <dmp_set_tap_thresh+0x218>
            return -1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e00f      	b.n	800307c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	3302      	adds	r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	2102      	movs	r1, #2
 8003066:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800306a:	f7ff fbdd 	bl	8002828 <mpu_write_mem>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <dmp_set_tap_thresh+0x236>
            return -1;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	e000      	b.n	800307c <dmp_set_tap_thresh+0x238>
    }
    return 0;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	43480000 	.word	0x43480000
 8003088:	46400000 	.word	0x46400000
 800308c:	45c00000 	.word	0x45c00000
 8003090:	45400000 	.word	0x45400000
 8003094:	44c00000 	.word	0x44c00000

08003098 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	f043 030c 	orr.w	r3, r3, #12
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	f043 0303 	orr.w	r3, r3, #3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80030e2:	f107 030f 	add.w	r3, r7, #15
 80030e6:	461a      	mov	r2, r3
 80030e8:	2101      	movs	r1, #1
 80030ea:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80030ee:	f7ff fb9b 	bl	8002828 <mpu_write_mem>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800310c:	2301      	movs	r3, #1
 800310e:	71fb      	strb	r3, [r7, #7]
 8003110:	e004      	b.n	800311c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d901      	bls.n	800311c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003118:	2304      	movs	r3, #4
 800311a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	3b01      	subs	r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003124:	f107 030f 	add.w	r3, r7, #15
 8003128:	461a      	mov	r2, r3
 800312a:	2101      	movs	r1, #1
 800312c:	f240 104f 	movw	r0, #335	; 0x14f
 8003130:	f7ff fb7a 	bl	8002828 <mpu_write_mem>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <dmp_set_tap_time+0x40>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	461a      	mov	r2, r3
 800316c:	2102      	movs	r1, #2
 800316e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8003172:	f7ff fb59 	bl	8002828 <mpu_write_mem>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	cccccccd 	.word	0xcccccccd

08003184 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <dmp_set_tap_time_multi+0x40>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	461a      	mov	r2, r3
 80031b0:	2102      	movs	r1, #2
 80031b2:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80031b6:	f7ff fb37 	bl	8002828 <mpu_write_mem>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	cccccccd 	.word	0xcccccccd

080031c8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <dmp_set_shake_reject_thresh+0x5c>)
 80031d8:	fb82 1203 	smull	r1, r2, r2, r3
 80031dc:	1192      	asrs	r2, r2, #6
 80031de:	17db      	asrs	r3, r3, #31
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	161b      	asrs	r3, r3, #24
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	141b      	asrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	121b      	asrs	r3, r3, #8
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	461a      	mov	r2, r3
 800320e:	2104      	movs	r1, #4
 8003210:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8003214:	f7ff fb08 	bl	8002828 <mpu_write_mem>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	10624dd3 	.word	0x10624dd3

08003228 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <dmp_set_shake_reject_time+0x40>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	b29b      	uxth	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	461a      	mov	r2, r3
 8003254:	2102      	movs	r1, #2
 8003256:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800325a:	f7ff fae5 	bl	8002828 <mpu_write_mem>
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	cccccccd 	.word	0xcccccccd

0800326c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <dmp_set_shake_reject_timeout+0x40>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	b29b      	uxth	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003292:	f107 030c 	add.w	r3, r7, #12
 8003296:	461a      	mov	r2, r3
 8003298:	2102      	movs	r1, #2
 800329a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800329e:	f7ff fac3 	bl	8002828 <mpu_write_mem>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	cccccccd 	.word	0xcccccccd

080032b0 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80032ba:	2302      	movs	r3, #2
 80032bc:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80032be:	23ca      	movs	r3, #202	; 0xca
 80032c0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80032c2:	23e3      	movs	r3, #227	; 0xe3
 80032c4:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80032c6:	2309      	movs	r3, #9
 80032c8:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	461a      	mov	r2, r3
 80032d0:	2104      	movs	r1, #4
 80032d2:	2068      	movs	r0, #104	; 0x68
 80032d4:	f7ff faa8 	bl	8002828 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80032d8:	23a3      	movs	r3, #163	; 0xa3
 80032da:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80032e6:	23c0      	movs	r3, #192	; 0xc0
 80032e8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80032ea:	23c8      	movs	r3, #200	; 0xc8
 80032ec:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80032ee:	23c2      	movs	r3, #194	; 0xc2
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e005      	b.n	8003300 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80032f4:	23a3      	movs	r3, #163	; 0xa3
 80032f6:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80032f8:	23a3      	movs	r3, #163	; 0xa3
 80032fa:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80032fc:	23a3      	movs	r3, #163	; 0xa3
 80032fe:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800330a:	23c4      	movs	r3, #196	; 0xc4
 800330c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800330e:	23cc      	movs	r3, #204	; 0xcc
 8003310:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003312:	23c6      	movs	r3, #198	; 0xc6
 8003314:	74bb      	strb	r3, [r7, #18]
 8003316:	e005      	b.n	8003324 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003318:	23a3      	movs	r3, #163	; 0xa3
 800331a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800331c:	23a3      	movs	r3, #163	; 0xa3
 800331e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003320:	23a3      	movs	r3, #163	; 0xa3
 8003322:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003324:	23a3      	movs	r3, #163	; 0xa3
 8003326:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003328:	23a3      	movs	r3, #163	; 0xa3
 800332a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800332c:	23a3      	movs	r3, #163	; 0xa3
 800332e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	461a      	mov	r2, r3
 8003336:	210a      	movs	r1, #10
 8003338:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800333c:	f7ff fa74 	bl	8002828 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800334a:	2320      	movs	r3, #32
 800334c:	733b      	strb	r3, [r7, #12]
 800334e:	e001      	b.n	8003354 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003350:	23d8      	movs	r3, #216	; 0xd8
 8003352:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	461a      	mov	r2, r3
 800335a:	2101      	movs	r1, #1
 800335c:	f640 20b6 	movw	r0, #2742	; 0xab6
 8003360:	f7ff fa62 	bl	8002828 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f000 f8c6 	bl	8003500 <dmp_enable_gyro_cal>
 8003374:	e002      	b.n	800337c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8003376:	2000      	movs	r0, #0
 8003378:	f000 f8c2 	bl	8003500 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01d      	beq.n	80033c2 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8003390:	23b2      	movs	r3, #178	; 0xb2
 8003392:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8003394:	238b      	movs	r3, #139	; 0x8b
 8003396:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8003398:	23b6      	movs	r3, #182	; 0xb6
 800339a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800339c:	239b      	movs	r3, #155	; 0x9b
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e007      	b.n	80033b2 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80033a2:	23b0      	movs	r3, #176	; 0xb0
 80033a4:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80033aa:	23b4      	movs	r3, #180	; 0xb4
 80033ac:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80033ae:	2390      	movs	r3, #144	; 0x90
 80033b0:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	461a      	mov	r2, r3
 80033b8:	2104      	movs	r1, #4
 80033ba:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80033be:	f7ff fa33 	bl	8002828 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d025      	beq.n	8003418 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80033cc:	23f8      	movs	r3, #248	; 0xf8
 80033ce:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	461a      	mov	r2, r3
 80033d6:	2101      	movs	r1, #1
 80033d8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80033dc:	f7ff fa24 	bl	8002828 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80033e0:	21fa      	movs	r1, #250	; 0xfa
 80033e2:	2007      	movs	r0, #7
 80033e4:	f7ff fd2e 	bl	8002e44 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80033e8:	2007      	movs	r0, #7
 80033ea:	f7ff fe55 	bl	8003098 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f7ff fe84 	bl	80030fc <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80033f4:	2064      	movs	r0, #100	; 0x64
 80033f6:	f7ff fea3 	bl	8003140 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80033fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033fe:	f7ff fec1 	bl	8003184 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8003402:	21c8      	movs	r1, #200	; 0xc8
 8003404:	483c      	ldr	r0, [pc, #240]	; (80034f8 <dmp_enable_feature+0x248>)
 8003406:	f7ff fedf 	bl	80031c8 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800340a:	2028      	movs	r0, #40	; 0x28
 800340c:	f7ff ff0c 	bl	8003228 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8003410:	200a      	movs	r0, #10
 8003412:	f7ff ff2b 	bl	800326c <dmp_set_shake_reject_timeout>
 8003416:	e009      	b.n	800342c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8003418:	23d8      	movs	r3, #216	; 0xd8
 800341a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	461a      	mov	r2, r3
 8003422:	2101      	movs	r1, #1
 8003424:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8003428:	f7ff f9fe 	bl	8002828 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8003436:	23d9      	movs	r3, #217	; 0xd9
 8003438:	733b      	strb	r3, [r7, #12]
 800343a:	e001      	b.n	8003440 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800343c:	23d8      	movs	r3, #216	; 0xd8
 800343e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	461a      	mov	r2, r3
 8003446:	2101      	movs	r1, #1
 8003448:	f240 703d 	movw	r0, #1853	; 0x73d
 800344c:	f7ff f9ec 	bl	8002828 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800345a:	2001      	movs	r0, #1
 800345c:	f000 f880 	bl	8003560 <dmp_enable_lp_quat>
 8003460:	e002      	b.n	8003468 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8003462:	2000      	movs	r0, #0
 8003464:	f000 f87c 	bl	8003560 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8003472:	2001      	movs	r0, #1
 8003474:	f000 f89b 	bl	80035ae <dmp_enable_6x_lp_quat>
 8003478:	e002      	b.n	8003480 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800347a:	2000      	movs	r0, #0
 800347c:	f000 f897 	bl	80035ae <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <dmp_enable_feature+0x24c>)
 800348a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800348c:	f7fe fba6 	bl	8001bdc <mpu_reset_fifo>

    dmp.packet_length = 0;
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <dmp_enable_feature+0x24c>)
 8003492:	2200      	movs	r2, #0
 8003494:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <dmp_enable_feature+0x24c>)
 80034a2:	7b9b      	ldrb	r3, [r3, #14]
 80034a4:	3306      	adds	r3, #6
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <dmp_enable_feature+0x24c>)
 80034aa:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <dmp_enable_feature+0x24c>)
 80034b8:	7b9b      	ldrb	r3, [r3, #14]
 80034ba:	3306      	adds	r3, #6
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <dmp_enable_feature+0x24c>)
 80034c0:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	f003 0314 	and.w	r3, r3, #20
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <dmp_enable_feature+0x24c>)
 80034ce:	7b9b      	ldrb	r3, [r3, #14]
 80034d0:	3310      	adds	r3, #16
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <dmp_enable_feature+0x24c>)
 80034d6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <dmp_enable_feature+0x24c>)
 80034e4:	7b9b      	ldrb	r3, [r3, #14]
 80034e6:	3304      	adds	r3, #4
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <dmp_enable_feature+0x24c>)
 80034ec:	739a      	strb	r2, [r3, #14]

    return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	02cae309 	.word	0x02cae309
 80034fc:	20000104 	.word	0x20000104

08003500 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <dmp_enable_gyro_cal+0x58>)
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	ca07      	ldmia	r2, {r0, r1, r2}
 8003518:	c303      	stmia	r3!, {r0, r1}
 800351a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	461a      	mov	r2, r3
 8003522:	2109      	movs	r1, #9
 8003524:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8003528:	f7ff f97e 	bl	8002828 <mpu_write_mem>
 800352c:	4603      	mov	r3, r0
 800352e:	e00e      	b.n	800354e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8003530:	4a0a      	ldr	r2, [pc, #40]	; (800355c <dmp_enable_gyro_cal+0x5c>)
 8003532:	f107 0308 	add.w	r3, r7, #8
 8003536:	ca07      	ldmia	r2, {r0, r1, r2}
 8003538:	c303      	stmia	r3!, {r0, r1}
 800353a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800353c:	f107 0308 	add.w	r3, r7, #8
 8003540:	461a      	mov	r2, r3
 8003542:	2109      	movs	r1, #9
 8003544:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8003548:	f7ff f96e 	bl	8002828 <mpu_write_mem>
 800354c:	4603      	mov	r3, r0
    }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800abac 	.word	0x0800abac
 800355c:	0800abb8 	.word	0x0800abb8

08003560 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8003570:	23c0      	movs	r3, #192	; 0xc0
 8003572:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8003574:	23c2      	movs	r3, #194	; 0xc2
 8003576:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8003578:	23c4      	movs	r3, #196	; 0xc4
 800357a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800357c:	23c6      	movs	r3, #198	; 0xc6
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e006      	b.n	8003590 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	2204      	movs	r2, #4
 8003588:	218b      	movs	r1, #139	; 0x8b
 800358a:	4618      	mov	r0, r3
 800358c:	f006 faae 	bl	8009aec <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	461a      	mov	r2, r3
 8003596:	2104      	movs	r1, #4
 8003598:	f640 2098 	movw	r0, #2712	; 0xa98
 800359c:	f7ff f944 	bl	8002828 <mpu_write_mem>

    return mpu_reset_fifo();
 80035a0:	f7fe fb1c 	bl	8001bdc <mpu_reset_fifo>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 80035be:	2320      	movs	r3, #32
 80035c0:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 80035c2:	2328      	movs	r3, #40	; 0x28
 80035c4:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 80035c6:	2330      	movs	r3, #48	; 0x30
 80035c8:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 80035ca:	2338      	movs	r3, #56	; 0x38
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e006      	b.n	80035de <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2204      	movs	r2, #4
 80035d6:	21a3      	movs	r1, #163	; 0xa3
 80035d8:	4618      	mov	r0, r3
 80035da:	f006 fa87 	bl	8009aec <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	461a      	mov	r2, r3
 80035e4:	2104      	movs	r1, #4
 80035e6:	f640 209e 	movw	r0, #2718	; 0xa9e
 80035ea:	f7ff f91d 	bl	8002828 <mpu_write_mem>

    return mpu_reset_fifo();
 80035ee:	f7fe faf5 	bl	8001bdc <mpu_reset_fifo>
 80035f2:	4603      	mov	r3, r0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3303      	adds	r3, #3
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800360e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3303      	adds	r3, #3
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361a:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800362a:	7bbb      	ldrb	r3, [r7, #14]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <decode_gesture+0x84>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <decode_gesture+0x84>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	7b39      	ldrb	r1, [r7, #12]
 800364a:	7b7a      	ldrb	r2, [r7, #13]
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3301      	adds	r3, #1
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <decode_gesture+0x84>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <decode_gesture+0x84>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	0992      	lsrs	r2, r2, #6
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	4610      	mov	r0, r2
 8003672:	4798      	blx	r3
    }

    return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000104 	.word	0x20000104

08003684 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b092      	sub	sp, #72	; 0x48
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8003698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369a:	2200      	movs	r2, #0
 800369c:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800369e:	4bae      	ldr	r3, [pc, #696]	; (8003958 <dmp_read_fifo+0x2d4>)
 80036a0:	7b9b      	ldrb	r3, [r3, #14]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f107 0120 	add.w	r1, r7, #32
 80036a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe ff34 	bl	8002518 <mpu_read_fifo_stream>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <dmp_read_fifo+0x38>
        return -1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e148      	b.n	800394e <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 80036bc:	4ba6      	ldr	r3, [pc, #664]	; (8003958 <dmp_read_fifo+0x2d4>)
 80036be:	895b      	ldrh	r3, [r3, #10]
 80036c0:	f003 0314 	and.w	r3, r3, #20
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 808a 	beq.w	80037de <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80036ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ce:	061a      	lsls	r2, r3, #24
 80036d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80036d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80036dc:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80036de:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80036e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80036e4:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80036ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036ee:	061a      	lsls	r2, r3, #24
 80036f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80036f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036fc:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80036fe:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8003700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003704:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800370a:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800370c:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800370e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003712:	061a      	lsls	r2, r3, #24
 8003714:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800371c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003720:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003722:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8003724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003728:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800372e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003730:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003732:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003736:	061a      	lsls	r2, r3, #24
 8003738:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003740:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003744:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003746:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800374c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8003752:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003754:	601a      	str	r2, [r3, #0]
        ii += 16;
 8003756:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800375a:	3310      	adds	r3, #16
 800375c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	141b      	asrs	r3, r3, #16
 8003766:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	141b      	asrs	r3, r3, #16
 8003770:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3308      	adds	r3, #8
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	141b      	asrs	r3, r3, #16
 800377a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	330c      	adds	r3, #12
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	141b      	asrs	r3, r3, #16
 8003784:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	fb03 f202 	mul.w	r2, r3, r2
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80037a0:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	69f9      	ldr	r1, [r7, #28]
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80037aa:	4413      	add	r3, r2
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80037b4:	db03      	blt.n	80037be <dmp_read_fifo+0x13a>
 80037b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b8:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 80037bc:	dd07      	ble.n	80037ce <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 80037be:	f7fe fa0d 	bl	8001bdc <mpu_reset_fifo>
            sensors[0] = 0;
 80037c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c4:	2200      	movs	r2, #0
 80037c6:	801a      	strh	r2, [r3, #0]
            return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	e0bf      	b.n	800394e <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80037ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	b21a      	sxth	r2, r3
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80037de:	4b5e      	ldr	r3, [pc, #376]	; (8003958 <dmp_read_fifo+0x2d4>)
 80037e0:	895b      	ldrh	r3, [r3, #10]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04c      	beq.n	8003884 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80037ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	443b      	add	r3, r7
 80037f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	b21a      	sxth	r2, r3
 80037fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037fe:	3301      	adds	r3, #1
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	443b      	add	r3, r7
 8003804:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003808:	b21b      	sxth	r3, r3
 800380a:	4313      	orrs	r3, r2
 800380c:	b21a      	sxth	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8003812:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003816:	3302      	adds	r3, #2
 8003818:	3348      	adds	r3, #72	; 0x48
 800381a:	443b      	add	r3, r7
 800381c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	b219      	sxth	r1, r3
 8003824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003828:	3303      	adds	r3, #3
 800382a:	3348      	adds	r3, #72	; 0x48
 800382c:	443b      	add	r3, r7
 800382e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003832:	b21a      	sxth	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3302      	adds	r3, #2
 8003838:	430a      	orrs	r2, r1
 800383a:	b212      	sxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800383e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003842:	3304      	adds	r3, #4
 8003844:	3348      	adds	r3, #72	; 0x48
 8003846:	443b      	add	r3, r7
 8003848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	b219      	sxth	r1, r3
 8003850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003854:	3305      	adds	r3, #5
 8003856:	3348      	adds	r3, #72	; 0x48
 8003858:	443b      	add	r3, r7
 800385a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385e:	b21a      	sxth	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3304      	adds	r3, #4
 8003864:	430a      	orrs	r2, r1
 8003866:	b212      	sxth	r2, r2
 8003868:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800386a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800386e:	3306      	adds	r3, #6
 8003870:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387a:	f043 0308 	orr.w	r3, r3, #8
 800387e:	b21a      	sxth	r2, r3
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <dmp_read_fifo+0x2d4>)
 8003886:	895b      	ldrh	r3, [r3, #10]
 8003888:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800388c:	2b00      	cmp	r3, #0
 800388e:	d04c      	beq.n	800392a <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003890:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003894:	3348      	adds	r3, #72	; 0x48
 8003896:	443b      	add	r3, r7
 8003898:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	b21a      	sxth	r2, r3
 80038a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a4:	3301      	adds	r3, #1
 80038a6:	3348      	adds	r3, #72	; 0x48
 80038a8:	443b      	add	r3, r7
 80038aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b21a      	sxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80038b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038bc:	3302      	adds	r3, #2
 80038be:	3348      	adds	r3, #72	; 0x48
 80038c0:	443b      	add	r3, r7
 80038c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b219      	sxth	r1, r3
 80038ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038ce:	3303      	adds	r3, #3
 80038d0:	3348      	adds	r3, #72	; 0x48
 80038d2:	443b      	add	r3, r7
 80038d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038d8:	b21a      	sxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3302      	adds	r3, #2
 80038de:	430a      	orrs	r2, r1
 80038e0:	b212      	sxth	r2, r2
 80038e2:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80038e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038e8:	3304      	adds	r3, #4
 80038ea:	3348      	adds	r3, #72	; 0x48
 80038ec:	443b      	add	r3, r7
 80038ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	b219      	sxth	r1, r3
 80038f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038fa:	3305      	adds	r3, #5
 80038fc:	3348      	adds	r3, #72	; 0x48
 80038fe:	443b      	add	r3, r7
 8003900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003904:	b21a      	sxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	430a      	orrs	r2, r1
 800390c:	b212      	sxth	r2, r2
 800390e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8003910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003914:	3306      	adds	r3, #6
 8003916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003920:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003924:	b21a      	sxth	r2, r3
 8003926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003928:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <dmp_read_fifo+0x2d4>)
 800392c:	895b      	ldrh	r3, [r3, #10]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8003936:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800393a:	f107 0220 	add.w	r2, r7, #32
 800393e:	4413      	add	r3, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe5b 	bl	80035fc <decode_gesture>

    get_ms(timestamp);
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f000 fd47 	bl	80043da <stm32_get_clock_ms>
    return 0;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3748      	adds	r7, #72	; 0x48
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000104 	.word	0x20000104

0800395c <HAL_UART_ErrorCallback>:
  snprintf(buff, sizeof buff, "%2.2f | %2.2f | %2.2f |  %2.2f\r\n", roll_inside, pitch_inside, yaw_inside, heading);
  HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f004 fee6 	bl	8008736 <HAL_UART_GetError>
 800396a:	61f8      	str	r0, [r7, #28]
	switch (er) {
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3b01      	subs	r3, #1
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d863      	bhi.n	8003a3c <HAL_UART_ErrorCallback+0xe0>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_UART_ErrorCallback+0x20>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039db 	.word	0x080039db
 8003984:	08003a3d 	.word	0x08003a3d
 8003988:	080039f9 	.word	0x080039f9
 800398c:	08003a3d 	.word	0x08003a3d
 8003990:	08003a3d 	.word	0x08003a3d
 8003994:	08003a3d 	.word	0x08003a3d
 8003998:	08003a17 	.word	0x08003a17
 800399c:	08003a3d 	.word	0x08003a3d
 80039a0:	08003a3d 	.word	0x08003a3d
 80039a4:	08003a3d 	.word	0x08003a3d
 80039a8:	08003a3d 	.word	0x08003a3d
 80039ac:	08003a3d 	.word	0x08003a3d
 80039b0:	08003a3d 	.word	0x08003a3d
 80039b4:	08003a3d 	.word	0x08003a3d
 80039b8:	08003a35 	.word	0x08003a35
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80039d8:	e031      	b.n	8003a3e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80039f6:	e022      	b.n	8003a3e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8003a14:	e013      	b.n	8003a3e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8003a32:	e004      	b.n	8003a3e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8003a3c:	bf00      	nop
		}
	if (huart->Instance == USART1) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <HAL_UART_ErrorCallback+0x114>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10f      	bne.n	8003a68 <HAL_UART_ErrorCallback+0x10c>
		new_data = 1;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_UART_ErrorCallback+0x118>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buff, sizeof(uart_buff));
 8003a4e:	2264      	movs	r2, #100	; 0x64
 8003a50:	4909      	ldr	r1, [pc, #36]	; (8003a78 <HAL_UART_ErrorCallback+0x11c>)
 8003a52:	480a      	ldr	r0, [pc, #40]	; (8003a7c <HAL_UART_ErrorCallback+0x120>)
 8003a54:	f004 fb65 	bl	8008122 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_UART_ErrorCallback+0x124>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_UART_ErrorCallback+0x124>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	601a      	str	r2, [r3, #0]
	}
}
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40013800 	.word	0x40013800
 8003a74:	20000284 	.word	0x20000284
 8003a78:	20000220 	.word	0x20000220
 8003a7c:	20000190 	.word	0x20000190
 8003a80:	200001d8 	.word	0x200001d8

08003a84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_UARTEx_RxEventCallback+0x44>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d112      	bne.n	8003ac0 <HAL_UARTEx_RxEventCallback+0x3c>
		new_data = 1;
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_UARTEx_RxEventCallback+0x48>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
		data_size = Size;
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	8013      	strh	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buff, sizeof(uart_buff));
 8003aa6:	2264      	movs	r2, #100	; 0x64
 8003aa8:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_UARTEx_RxEventCallback+0x50>)
 8003aaa:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <HAL_UARTEx_RxEventCallback+0x54>)
 8003aac:	f004 fb39 	bl	8008122 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_UARTEx_RxEventCallback+0x58>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_UARTEx_RxEventCallback+0x58>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	601a      	str	r2, [r3, #0]
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	20000284 	.word	0x20000284
 8003ad0:	20000286 	.word	0x20000286
 8003ad4:	20000220 	.word	0x20000220
 8003ad8:	20000190 	.word	0x20000190
 8003adc:	200001d8 	.word	0x200001d8

08003ae0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003aec:	2100      	movs	r1, #0
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 fc4f 	bl	8005392 <HAL_CAN_GetRxMessage>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8003afa:	f000 fc69 	bl	80043d0 <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200002d4 	.word	0x200002d4
 8003b10:	200002b0 	.word	0x200002b0
 8003b14:	200002e0 	.word	0x200002e0

08003b18 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    NewCanMsg = CAN_GET_MSG_ERROR;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_CAN_ErrorCallback+0x18>)
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	200002e0 	.word	0x200002e0

08003b34 <CanMsgSend>:

	return 1;
}


uint8_t CanMsgSend(CanDataSendTypeDef *canDataSend) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	TxHeader.StdId = canDataSend->canId;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <CanMsgSend+0x88>)
 8003b42:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = canDataSend->canExtId;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <CanMsgSend+0x88>)
 8003b4a:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = canDataSend->canRTR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <CanMsgSend+0x88>)
 8003b52:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <CanMsgSend+0x88>)
 8003b56:	2204      	movs	r2, #4
 8003b58:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8003b5a:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <CanMsgSend+0x88>)
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <CanMsgSend+0x88>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	751a      	strb	r2, [r3, #20]
	//globData.can_mutex = 0;
	for (int i = 0; i < sizeof(TxData); i++) {
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e00c      	b.n	8003b86 <CanMsgSend+0x52>
		TxData[i] = canDataSend->canData[i];
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	330c      	adds	r3, #12
 8003b74:	7819      	ldrb	r1, [r3, #0]
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <CanMsgSend+0x8c>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TxData); i++) {
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	d9ef      	bls.n	8003b6c <CanMsgSend+0x38>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8003b8c:	bf00      	nop
 8003b8e:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <CanMsgSend+0x90>)
 8003b90:	f001 fbcb 	bl	800532a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f9      	beq.n	8003b8e <CanMsgSend+0x5a>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <CanMsgSend+0x94>)
 8003b9c:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <CanMsgSend+0x8c>)
 8003b9e:	4907      	ldr	r1, [pc, #28]	; (8003bbc <CanMsgSend+0x88>)
 8003ba0:	4808      	ldr	r0, [pc, #32]	; (8003bc4 <CanMsgSend+0x90>)
 8003ba2:	f001 faf3 	bl	800518c <HAL_CAN_AddTxMessage>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <CanMsgSend+0x7c>
		//HAL_UART_Transmit(&huart, (uint8_t*) "no_trans\r\n", 10, 100);
		return 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <CanMsgSend+0x7e>
	}
	return 1;
 8003bb0:	2301      	movs	r3, #1
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000298 	.word	0x20000298
 8003bc0:	200002cc 	.word	0x200002cc
 8003bc4:	20000114 	.word	0x20000114
 8003bc8:	200002dc 	.word	0x200002dc

08003bcc <Moving>:

void Moving() {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0

	CanDataSendTypeDef canDataSend;

	static int move_axis_en = 0;
	static int lift_axis_en = 0;
	if (start_stop) {
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <Moving+0x194>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808a 	beq.w	8003cf0 <Moving+0x124>
			canDataSend.canExtId = DRIVER_MOVE_ID + 0x06000000;
 8003bdc:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <Moving+0x198>)
 8003bde:	60bb      	str	r3, [r7, #8]
			canDataSend.canRTR = CAN_RTR_DATA;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
			if (!move_axis_en) {
 8003be4:	4b60      	ldr	r3, [pc, #384]	; (8003d68 <Moving+0x19c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d119      	bne.n	8003c20 <Moving+0x54>
				move_axis_en = 1;
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <Moving+0x19c>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8003bf2:	2323      	movs	r3, #35	; 0x23
 8003bf4:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 8003bf6:	230d      	movs	r3, #13
 8003bf8:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x01;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8003c02:	2300      	movs	r3, #0
 8003c04:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 8003c06:	2300      	movs	r3, #0
 8003c08:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff8d 	bl	8003b34 <CanMsgSend>
				HAL_Delay(10);
 8003c1a:	200a      	movs	r0, #10
 8003c1c:	f001 f88a 	bl	8004d34 <HAL_Delay>
			}
			if (!lift_axis_en) {
 8003c20:	4b52      	ldr	r3, [pc, #328]	; (8003d6c <Moving+0x1a0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <Moving+0x90>
				lift_axis_en = 1;
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <Moving+0x1a0>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8003c2e:	2323      	movs	r3, #35	; 0x23
 8003c30:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 8003c32:	230d      	movs	r3, #13
 8003c34:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 8003c36:	2320      	movs	r3, #32
 8003c38:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x02;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 8003c42:	2300      	movs	r3, #0
 8003c44:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff6f 	bl	8003b34 <CanMsgSend>
				HAL_Delay(10);
 8003c56:	200a      	movs	r0, #10
 8003c58:	f001 f86c 	bl	8004d34 <HAL_Delay>
			}
			static int32_t ch_velocity = 0;
			//if (motor1_speed) { //(l_current_move_comm == MOVE_FORW) {
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)"can_send\r\n", 10, 100);
			canDataSend.canData[0] = 0x23;
 8003c5c:	2323      	movs	r3, #35	; 0x23
 8003c5e:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8003c60:	2300      	movs	r3, #0
 8003c62:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8003c64:	2320      	movs	r3, #32
 8003c66:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed_left;
 8003c6c:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <Moving+0x1a4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <Moving+0x1a8>)
 8003c72:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <Moving+0x1a8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	161b      	asrs	r3, r3, #24
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <Moving+0x1a8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	141b      	asrs	r3, r3, #16
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8003c88:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <Moving+0x1a8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	121b      	asrs	r3, r3, #8
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <Moving+0x1a8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff49 	bl	8003b34 <CanMsgSend>
			HAL_Delay(2);
 8003ca2:	2002      	movs	r0, #2
 8003ca4:	f001 f846 	bl	8004d34 <HAL_Delay>
			//}
			//else if (motor2_speed) {
			canDataSend.canData[0] = 0x23;
 8003ca8:	2323      	movs	r3, #35	; 0x23
 8003caa:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8003cac:	2300      	movs	r3, #0
 8003cae:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed_right;
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <Moving+0x1ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <Moving+0x1a8>)
 8003cbe:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <Moving+0x1a8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	161b      	asrs	r3, r3, #24
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8003cca:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <Moving+0x1a8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	141b      	asrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8003cd4:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <Moving+0x1a8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	121b      	asrs	r3, r3, #8
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <Moving+0x1a8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8003ce6:	1d3b      	adds	r3, r7, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff23 	bl	8003b34 <CanMsgSend>
 8003cee:	e030      	b.n	8003d52 <Moving+0x186>
			//}
		}
		else
		{
			canDataSend.canData[0] = 0x23;
 8003cf0:	2323      	movs	r3, #35	; 0x23
 8003cf2:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8003d00:	2300      	movs	r3, #0
 8003d02:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 8003d04:	2300      	movs	r3, #0
 8003d06:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff0e 	bl	8003b34 <CanMsgSend>
			HAL_Delay(10);
 8003d18:	200a      	movs	r0, #10
 8003d1a:	f001 f80b 	bl	8004d34 <HAL_Delay>
			canDataSend.canData[0] = 0x23;
 8003d1e:	2323      	movs	r3, #35	; 0x23
 8003d20:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8003d22:	2300      	movs	r3, #0
 8003d24:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8003d26:	2320      	movs	r3, #32
 8003d28:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fef7 	bl	8003b34 <CanMsgSend>
			move_axis_en = 0;
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <Moving+0x19c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
			lift_axis_en = 0;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <Moving+0x1a0>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(5);
 8003d52:	2005      	movs	r0, #5
 8003d54:	f000 ffee 	bl	8004d34 <HAL_Delay>
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000028c 	.word	0x2000028c
 8003d64:	06000001 	.word	0x06000001
 8003d68:	200002e4 	.word	0x200002e4
 8003d6c:	200002e8 	.word	0x200002e8
 8003d70:	20000290 	.word	0x20000290
 8003d74:	200002ec 	.word	0x200002ec
 8003d78:	20000294 	.word	0x20000294

08003d7c <logic>:
	}
//	HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
}

void logic()
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
	static uint32_t ultra_forw_trig = 0;
	static uint32_t ultra_back_trig = 0;
	static uint32_t logic_state = 0;
	static float yaw_sv = 0;
	if (start_stop)
 8003d82:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <logic+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80c6 	beq.w	8003f18 <logic+0x19c>
	{
		if (!ULTRA_FORW && status_move == STAT_MOVE_FORW) //npn sensor
 8003d8c:	2110      	movs	r1, #16
 8003d8e:	486d      	ldr	r0, [pc, #436]	; (8003f44 <logic+0x1c8>)
 8003d90:	f002 fc50 	bl	8006634 <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <logic+0x2c>
 8003d9a:	4b6b      	ldr	r3, [pc, #428]	; (8003f48 <logic+0x1cc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d102      	bne.n	8003da8 <logic+0x2c>
		{
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
			ultra_forw_trig = 1;
 8003da2:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <logic+0x1d0>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
		}
		if (!ULTRA_BACK && status_move == STAT_MOVE_BACK) //npn sensor
 8003da8:	2120      	movs	r1, #32
 8003daa:	4866      	ldr	r0, [pc, #408]	; (8003f44 <logic+0x1c8>)
 8003dac:	f002 fc42 	bl	8006634 <HAL_GPIO_ReadPin>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <logic+0x48>
 8003db6:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <logic+0x1cc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d102      	bne.n	8003dc4 <logic+0x48>
		{
			ultra_back_trig = 1;
 8003dbe:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <logic+0x1d4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
		}
//		if (ULTRA_FORW && ULTRA_BACK)
//		{
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
//		}
		if (logic_state == 0)
 8003dc4:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <logic+0x1d8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <logic+0x64>
		{
			yaw_sv = yaw_inside;
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <logic+0x1dc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a62      	ldr	r2, [pc, #392]	; (8003f5c <logic+0x1e0>)
 8003dd2:	6013      	str	r3, [r2, #0]
			logic_state++;
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <logic+0x1d8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <logic+0x1d8>)
 8003ddc:	6013      	str	r3, [r2, #0]
			motor_speed_left = 0;
			motor_speed_right = 0;
			status_move = STAT_MOVE_STOP;
		}
	}
}
 8003dde:	e0ab      	b.n	8003f38 <logic+0x1bc>
		else if (logic_state == 1)
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <logic+0x1d8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d139      	bne.n	8003e5c <logic+0xe0>
			if (ultra_forw_trig || ultra_back_trig)
 8003de8:	4b58      	ldr	r3, [pc, #352]	; (8003f4c <logic+0x1d0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <logic+0x7c>
 8003df0:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <logic+0x1d4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02d      	beq.n	8003e54 <logic+0xd8>
				uint32_t randm = rand()%10;
 8003df8:	f005 fe80 	bl	8009afc <rand>
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <logic+0x1e4>)
 8003e00:	fb83 2301 	smull	r2, r3, r3, r1
 8003e04:	109a      	asrs	r2, r3, #2
 8003e06:	17cb      	asrs	r3, r1, #31
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	1aca      	subs	r2, r1, r3
 8003e14:	603a      	str	r2, [r7, #0]
				if (randm > 5)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d90b      	bls.n	8003e34 <logic+0xb8>
					motor_speed_left = MOTOR_SPEED_ROTATE;
 8003e1c:	4b51      	ldr	r3, [pc, #324]	; (8003f64 <logic+0x1e8>)
 8003e1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e22:	601a      	str	r2, [r3, #0]
					motor_speed_right = MOTOR_SPEED_ROTATE;
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <logic+0x1ec>)
 8003e26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e2a:	601a      	str	r2, [r3, #0]
					status_move = STAT_MOVE_ROT_R;
 8003e2c:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <logic+0x1cc>)
 8003e2e:	2203      	movs	r2, #3
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e008      	b.n	8003e46 <logic+0xca>
					motor_speed_left = -MOTOR_SPEED_ROTATE;
 8003e34:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <logic+0x1e8>)
 8003e36:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <logic+0x1f0>)
 8003e38:	601a      	str	r2, [r3, #0]
					motor_speed_right = -MOTOR_SPEED_ROTATE;
 8003e3a:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <logic+0x1ec>)
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <logic+0x1f0>)
 8003e3e:	601a      	str	r2, [r3, #0]
					status_move = STAT_MOVE_ROT_L;
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <logic+0x1cc>)
 8003e42:	2204      	movs	r2, #4
 8003e44:	601a      	str	r2, [r3, #0]
				logic_state++;
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <logic+0x1d8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <logic+0x1d8>)
 8003e4e:	6013      	str	r3, [r2, #0]
			{
 8003e50:	bf00      	nop
}
 8003e52:	e071      	b.n	8003f38 <logic+0x1bc>
				logic_state = 3;
 8003e54:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <logic+0x1d8>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	e06d      	b.n	8003f38 <logic+0x1bc>
		else if (logic_state == 2)
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <logic+0x1d8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d120      	bne.n	8003ea6 <logic+0x12a>
			float yaw_tmp = abs(yaw_sv - yaw_inside);
 8003e64:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <logic+0x1e0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3b      	ldr	r2, [pc, #236]	; (8003f58 <logic+0x1dc>)
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fe2e 	bl	8000ad0 <__aeabi_fsub>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd f8fa 	bl	8001070 <__aeabi_f2iz>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fed9 	bl	8000c3c <__aeabi_i2f>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	607b      	str	r3, [r7, #4]
			if (yaw_tmp > ANGL_ROT)
 8003e8e:	4938      	ldr	r1, [pc, #224]	; (8003f70 <logic+0x1f4>)
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd f8e3 	bl	800105c <__aeabi_fcmpgt>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d100      	bne.n	8003e9e <logic+0x122>
}
 8003e9c:	e04c      	b.n	8003f38 <logic+0x1bc>
				logic_state = 3;
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <logic+0x1d8>)
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	e048      	b.n	8003f38 <logic+0x1bc>
		else if (logic_state == 3)
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <logic+0x1d8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d124      	bne.n	8003ef8 <logic+0x17c>
			if (ultra_back_trig)
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <logic+0x1d4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <logic+0x150>
				motor_speed_left = MOTOR_SPEED;
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <logic+0x1e8>)
 8003eb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ebc:	601a      	str	r2, [r3, #0]
				motor_speed_right = -MOTOR_SPEED;
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <logic+0x1ec>)
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <logic+0x1f0>)
 8003ec2:	601a      	str	r2, [r3, #0]
				status_move = STAT_MOVE_FORW;
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <logic+0x1cc>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e009      	b.n	8003ee0 <logic+0x164>
				motor_speed_left = -MOTOR_SPEED;
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <logic+0x1e8>)
 8003ece:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <logic+0x1f0>)
 8003ed0:	601a      	str	r2, [r3, #0]
				motor_speed_right = MOTOR_SPEED;
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <logic+0x1ec>)
 8003ed4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ed8:	601a      	str	r2, [r3, #0]
				status_move = STAT_MOVE_BACK;
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <logic+0x1cc>)
 8003edc:	2202      	movs	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]
			ultra_forw_trig = 0;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <logic+0x1d0>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
			ultra_back_trig = 0;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <logic+0x1d4>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
			logic_state++;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <logic+0x1d8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <logic+0x1d8>)
 8003ef4:	6013      	str	r3, [r2, #0]
}
 8003ef6:	e01f      	b.n	8003f38 <logic+0x1bc>
		else if (logic_state == 4)
 8003ef8:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <logic+0x1d8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d11b      	bne.n	8003f38 <logic+0x1bc>
			if (ultra_forw_trig || ultra_back_trig)
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <logic+0x1d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <logic+0x194>
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <logic+0x1d4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <logic+0x1bc>
				logic_state = 0;
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <logic+0x1d8>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	e00f      	b.n	8003f38 <logic+0x1bc>
		logic_state = 0;
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <logic+0x1d8>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
		if (!manual_mode)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <logic+0x1f8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <logic+0x1bc>
			motor_speed_left = 0;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <logic+0x1e8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
			motor_speed_right = 0;
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <logic+0x1ec>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
			status_move = STAT_MOVE_STOP;
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <logic+0x1cc>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	2000028c 	.word	0x2000028c
 8003f44:	40010800 	.word	0x40010800
 8003f48:	2000021c 	.word	0x2000021c
 8003f4c:	200002f0 	.word	0x200002f0
 8003f50:	200002f4 	.word	0x200002f4
 8003f54:	200002f8 	.word	0x200002f8
 8003f58:	20000100 	.word	0x20000100
 8003f5c:	200002fc 	.word	0x200002fc
 8003f60:	66666667 	.word	0x66666667
 8003f64:	20000290 	.word	0x20000290
 8003f68:	20000294 	.word	0x20000294
 8003f6c:	fffffce0 	.word	0xfffffce0
 8003f70:	41f00000 	.word	0x41f00000
 8003f74:	20000288 	.word	0x20000288

08003f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f7e:	f000 fe77 	bl	8004c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f82:	f000 f879 	bl	8004078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f86:	f000 f99b 	bl	80042c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f8a:	f000 f97b 	bl	8004284 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003f8e:	f000 f94f 	bl	8004230 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8003f92:	f000 f8b7 	bl	8004104 <MX_CAN_Init>
  MX_I2C1_Init();
 8003f96:	f000 f91d 	bl	80041d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_buff, sizeof(uart_buff));
 8003f9a:	2264      	movs	r2, #100	; 0x64
 8003f9c:	492e      	ldr	r1, [pc, #184]	; (8004058 <main+0xe0>)
 8003f9e:	482f      	ldr	r0, [pc, #188]	; (800405c <main+0xe4>)
 8003fa0:	f004 f8bf 	bl	8008122 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003fa4:	4b2e      	ldr	r3, [pc, #184]	; (8004060 <main+0xe8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <main+0xe8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1500);
 8003fb4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003fb8:	f000 febc 	bl	8004d34 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)"Start\r\n", 7, HAL_MAX_DELAY);
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	4928      	ldr	r1, [pc, #160]	; (8004064 <main+0xec>)
 8003fc4:	4825      	ldr	r0, [pc, #148]	; (800405c <main+0xe4>)
 8003fc6:	f004 f829 	bl	800801c <HAL_UART_Transmit>
  HAL_Delay(1500);
 8003fca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003fce:	f000 feb1 	bl	8004d34 <HAL_Delay>
  if (MPU9250_begin() != INV_SUCCESS)
 8003fd2:	f7fd f8ad 	bl	8001130 <MPU9250_begin>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <main+0x9c>
  {
	  while(1)
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Error\r\n", 7, HAL_MAX_DELAY);
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4921      	ldr	r1, [pc, #132]	; (8004068 <main+0xf0>)
 8003fe4:	481d      	ldr	r0, [pc, #116]	; (800405c <main+0xe4>)
 8003fe6:	f004 f819 	bl	800801c <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ff0:	481e      	ldr	r0, [pc, #120]	; (800406c <main+0xf4>)
 8003ff2:	f002 fb36 	bl	8006662 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8003ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ffa:	f000 fe9b 	bl	8004d34 <HAL_Delay>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003ffe:	2201      	movs	r2, #1
 8004000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004004:	4819      	ldr	r0, [pc, #100]	; (800406c <main+0xf4>)
 8004006:	f002 fb2c 	bl	8006662 <HAL_GPIO_WritePin>
		  HAL_Delay(1500);
 800400a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800400e:	f000 fe91 	bl	8004d34 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Error\r\n", 7, HAL_MAX_DELAY);
 8004012:	e7e3      	b.n	8003fdc <main+0x64>
	  }
  }
  else
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"begin\r\n", 7, HAL_MAX_DELAY);
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	2207      	movs	r2, #7
 800401a:	4915      	ldr	r1, [pc, #84]	; (8004070 <main+0xf8>)
 800401c:	480f      	ldr	r0, [pc, #60]	; (800405c <main+0xe4>)
 800401e:	f003 fffd 	bl	800801c <HAL_UART_Transmit>
//  MPU9250_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
//  MPU9250_setGyroFSR(2000);
//  MPU9250_setAccelFSR(16);
//  MPU9250_setSampleRate(1000);
//  //MPU9250_setCompassSampleRate(100);
  MPU9250_dmpBegin(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_GYRO_CAL, 20);
 8004022:	2114      	movs	r1, #20
 8004024:	2030      	movs	r0, #48	; 0x30
 8004026:	f7fd f8ff 	bl	8001228 <MPU9250_dmpBegin>
  uint32_t time_u = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
  start_stop = 1; ///////////FOR TEST
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <main+0xfc>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  //MPU9250_update(UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
	  if(MPU9250_fifoAvailable())
 8004034:	f7fd f8c7 	bl	80011c6 <MPU9250_fifoAvailable>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <main+0xd6>
	  {
		  if (MPU9250_dmpUpdateFifo() == INV_SUCCESS)
 800403e:	f7fd f961 	bl	8001304 <MPU9250_dmpUpdateFifo>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <main+0xd6>
		  {
			  MPU9250_computeEulerAngles(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f7fd fa35 	bl	80014b8 <MPU9250_computeEulerAngles>
			  //MPU9250_updateCompass();
			  //MPU9250_computeCompassHeading();
			  //printIMUData();
		  }
	  }
	  logic();
 800404e:	f7ff fe95 	bl	8003d7c <logic>
	  Moving();
 8004052:	f7ff fdbb 	bl	8003bcc <Moving>
	  if(MPU9250_fifoAvailable())
 8004056:	e7ed      	b.n	8004034 <main+0xbc>
 8004058:	20000220 	.word	0x20000220
 800405c:	20000190 	.word	0x20000190
 8004060:	200001d8 	.word	0x200001d8
 8004064:	0800ac00 	.word	0x0800ac00
 8004068:	0800ac08 	.word	0x0800ac08
 800406c:	40011000 	.word	0x40011000
 8004070:	0800ac10 	.word	0x0800ac10
 8004074:	2000028c 	.word	0x2000028c

08004078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b090      	sub	sp, #64	; 0x40
 800407c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800407e:	f107 0318 	add.w	r3, r7, #24
 8004082:	2228      	movs	r2, #40	; 0x28
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f005 fd30 	bl	8009aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800409e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040a8:	2301      	movs	r3, #1
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ac:	2302      	movs	r3, #2
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80040b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80040ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040bc:	f107 0318 	add.w	r3, r7, #24
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 fb4b 	bl	800775c <HAL_RCC_OscConfig>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80040cc:	f000 f980 	bl	80043d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040d0:	230f      	movs	r3, #15
 80040d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d4:	2302      	movs	r3, #2
 80040d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 fdb8 	bl	8007c60 <HAL_RCC_ClockConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80040f6:	f000 f96b 	bl	80043d0 <Error_Handler>
  }
}
 80040fa:	bf00      	nop
 80040fc:	3740      	adds	r7, #64	; 0x40
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <MX_CAN_Init+0xc8>)
 800410c:	4a30      	ldr	r2, [pc, #192]	; (80041d0 <MX_CAN_Init+0xcc>)
 800410e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8004110:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <MX_CAN_Init+0xc8>)
 8004112:	2204      	movs	r2, #4
 8004114:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <MX_CAN_Init+0xc8>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <MX_CAN_Init+0xc8>)
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <MX_CAN_Init+0xc8>)
 8004124:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004128:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800412a:	4b28      	ldr	r3, [pc, #160]	; (80041cc <MX_CAN_Init+0xc8>)
 800412c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004130:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <MX_CAN_Init+0xc8>)
 8004134:	2200      	movs	r2, #0
 8004136:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004138:	4b24      	ldr	r3, [pc, #144]	; (80041cc <MX_CAN_Init+0xc8>)
 800413a:	2200      	movs	r2, #0
 800413c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <MX_CAN_Init+0xc8>)
 8004140:	2200      	movs	r2, #0
 8004142:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <MX_CAN_Init+0xc8>)
 8004146:	2200      	movs	r2, #0
 8004148:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <MX_CAN_Init+0xc8>)
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_CAN_Init+0xc8>)
 8004152:	2200      	movs	r2, #0
 8004154:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004156:	481d      	ldr	r0, [pc, #116]	; (80041cc <MX_CAN_Init+0xc8>)
 8004158:	f000 fe10 	bl	8004d7c <HAL_CAN_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8004162:	f000 f935 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  	sFilterConfig.FilterBank = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
        sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
        sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800416e:	2301      	movs	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
        sFilterConfig.FilterIdHigh = 0x0000;
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
        sFilterConfig.FilterIdLow = 0x0000;
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
        sFilterConfig.FilterMaskIdHigh = 0x0000;
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
        sFilterConfig.FilterMaskIdLow = 0x0000;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
        sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
        sFilterConfig.FilterActivation = ENABLE;
 8004186:	2301      	movs	r3, #1
 8004188:	623b      	str	r3, [r7, #32]
        //sFilterConfig.SlaveStartFilterBank = 14;

        if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800418a:	463b      	mov	r3, r7
 800418c:	4619      	mov	r1, r3
 800418e:	480f      	ldr	r0, [pc, #60]	; (80041cc <MX_CAN_Init+0xc8>)
 8004190:	f000 feef 	bl	8004f72 <HAL_CAN_ConfigFilter>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_CAN_Init+0x9a>
        {
        	Error_Handler();
 800419a:	f000 f919 	bl	80043d0 <Error_Handler>
        }
        if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800419e:	480b      	ldr	r0, [pc, #44]	; (80041cc <MX_CAN_Init+0xc8>)
 80041a0:	f000 ffb0 	bl	8005104 <HAL_CAN_Start>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_CAN_Init+0xaa>
      	Error_Handler();
 80041aa:	f000 f911 	bl	80043d0 <Error_Handler>
        }
        if (HAL_CAN_ActivateNotification(&hcan,
 80041ae:	f648 4102 	movw	r1, #35842	; 0x8c02
 80041b2:	4806      	ldr	r0, [pc, #24]	; (80041cc <MX_CAN_Init+0xc8>)
 80041b4:	f001 fa0e 	bl	80055d4 <HAL_CAN_ActivateNotification>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_CAN_Init+0xbe>
      		  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
  			  	  | CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
      	Error_Handler();
 80041be:	f000 f907 	bl	80043d0 <Error_Handler>
        }
  /* USER CODE END CAN_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	3728      	adds	r7, #40	; 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000114 	.word	0x20000114
 80041d0:	40006400 	.word	0x40006400

080041d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <MX_I2C1_Init+0x50>)
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <MX_I2C1_Init+0x54>)
 80041dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <MX_I2C1_Init+0x50>)
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <MX_I2C1_Init+0x58>)
 80041e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <MX_I2C1_Init+0x50>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <MX_I2C1_Init+0x50>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <MX_I2C1_Init+0x50>)
 80041f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <MX_I2C1_Init+0x50>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <MX_I2C1_Init+0x50>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <MX_I2C1_Init+0x50>)
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <MX_I2C1_Init+0x50>)
 800420c:	2200      	movs	r2, #0
 800420e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004210:	4804      	ldr	r0, [pc, #16]	; (8004224 <MX_I2C1_Init+0x50>)
 8004212:	f002 fa3f 	bl	8006694 <HAL_I2C_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800421c:	f000 f8d8 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2000013c 	.word	0x2000013c
 8004228:	40005400 	.word	0x40005400
 800422c:	00061a80 	.word	0x00061a80

08004230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <MX_USART1_UART_Init+0x50>)
 8004238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <MX_USART1_UART_Init+0x4c>)
 800423c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <MX_USART1_UART_Init+0x4c>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004256:	220c      	movs	r2, #12
 8004258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <MX_USART1_UART_Init+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <MX_USART1_UART_Init+0x4c>)
 8004268:	f003 fe88 	bl	8007f7c <HAL_UART_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004272:	f000 f8ad 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000190 	.word	0x20000190
 8004280:	40013800 	.word	0x40013800

08004284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <MX_DMA_Init+0x38>)
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4a0b      	ldr	r2, [pc, #44]	; (80042bc <MX_DMA_Init+0x38>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6153      	str	r3, [r2, #20]
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <MX_DMA_Init+0x38>)
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2100      	movs	r1, #0
 80042a6:	200f      	movs	r0, #15
 80042a8:	f001 fcab 	bl	8005c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80042ac:	200f      	movs	r0, #15
 80042ae:	f001 fcc4 	bl	8005c3a <HAL_NVIC_EnableIRQ>

}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d4:	4b3a      	ldr	r3, [pc, #232]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4a39      	ldr	r2, [pc, #228]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042da:	f043 0310 	orr.w	r3, r3, #16
 80042de:	6193      	str	r3, [r2, #24]
 80042e0:	4b37      	ldr	r3, [pc, #220]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042ec:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042f2:	f043 0320 	orr.w	r3, r3, #32
 80042f6:	6193      	str	r3, [r2, #24]
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <MX_GPIO_Init+0x100>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <MX_GPIO_Init+0x100>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <MX_GPIO_Init+0x100>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6193      	str	r3, [r2, #24]
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <MX_GPIO_Init+0x100>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <MX_GPIO_Init+0x100>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <MX_GPIO_Init+0x100>)
 8004322:	f043 0308 	orr.w	r3, r3, #8
 8004326:	6193      	str	r3, [r2, #24]
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <MX_GPIO_Init+0x100>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004334:	2201      	movs	r2, #1
 8004336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800433a:	4822      	ldr	r0, [pc, #136]	; (80043c4 <MX_GPIO_Init+0x104>)
 800433c:	f002 f991 	bl	8006662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_RESET);
 8004340:	2200      	movs	r2, #0
 8004342:	2101      	movs	r1, #1
 8004344:	4820      	ldr	r0, [pc, #128]	; (80043c8 <MX_GPIO_Init+0x108>)
 8004346:	f002 f98c 	bl	8006662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800434a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2302      	movs	r3, #2
 800435a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	4619      	mov	r1, r3
 8004362:	4818      	ldr	r0, [pc, #96]	; (80043c4 <MX_GPIO_Init+0x104>)
 8004364:	f001 ff26 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_FORW_Pin ULTRASONIC_BACK_Pin START_Pin STOP_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_FORW_Pin|ULTRASONIC_BACK_Pin|START_Pin|STOP_Pin;
 8004368:	23f0      	movs	r3, #240	; 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004370:	2301      	movs	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	4619      	mov	r1, r3
 800437a:	4814      	ldr	r0, [pc, #80]	; (80043cc <MX_GPIO_Init+0x10c>)
 800437c:	f001 ff1a 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GY_CS_Pin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438c:	2302      	movs	r3, #2
 800438e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8004390:	f107 0310 	add.w	r3, r7, #16
 8004394:	4619      	mov	r1, r3
 8004396:	480c      	ldr	r0, [pc, #48]	; (80043c8 <MX_GPIO_Init+0x108>)
 8004398:	f001 ff0c 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800439c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80043a0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043aa:	f107 0310 	add.w	r3, r7, #16
 80043ae:	4619      	mov	r1, r3
 80043b0:	4805      	ldr	r0, [pc, #20]	; (80043c8 <MX_GPIO_Init+0x108>)
 80043b2:	f001 feff 	bl	80061b4 <HAL_GPIO_Init>

}
 80043b6:	bf00      	nop
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40010c00 	.word	0x40010c00
 80043cc:	40010800 	.word	0x40010800

080043d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043d4:	b672      	cpsid	i
}
 80043d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d8:	e7fe      	b.n	80043d8 <Error_Handler+0x8>

080043da <stm32_get_clock_ms>:
#include "stm32_mpu9250_clk.h"

int stm32_get_clock_ms(unsigned long *count)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	*count = HAL_GetTick();
 80043e2:	f000 fc9d 	bl	8004d20 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	601a      	str	r2, [r3, #0]
	return 0;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <stm32_delay_ms>:

int stm32_delay_ms(unsigned long num_ms)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
	HAL_Delay(num_ms);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fc98 	bl	8004d34 <HAL_Delay>
	return 0;
 8004404:	2300      	movs	r3, #0
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <wait_for_gpio_state_timeout>:
#define I2C_SDA_GPIO_Port MPU_SDA_GPIO_Port

extern I2C_HandleTypeDef hi2c1;

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	817b      	strh	r3, [r7, #10]
 800441c:	4613      	mov	r3, r2
 800441e:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8004420:	f000 fc7e 	bl	8004d20 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800442a:	e011      	b.n	8004450 <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d00c      	beq.n	800444e <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <wait_for_gpio_state_timeout+0x3c>
 800443a:	f000 fc71 	bl	8004d20 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d201      	bcs.n	800444e <wait_for_gpio_state_timeout+0x40>
            {
                ret = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800444e:	bf00      	nop
    for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 8004450:	897b      	ldrh	r3, [r7, #10]
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f002 f8ed 	bl	8006634 <HAL_GPIO_ReadPin>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	7a7b      	ldrb	r3, [r7, #9]
 8004460:	4293      	cmp	r3, r2
 8004462:	d002      	beq.n	800446a <wait_for_gpio_state_timeout+0x5c>
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d0e0      	beq.n	800442c <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_ClearBusyFlagErratum>:

static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f002 fa44 	bl	800691c <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8004494:	2311      	movs	r3, #17
 8004496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C_SCL_Pin;
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	4619      	mov	r1, r3
 80044a6:	4840      	ldr	r0, [pc, #256]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044a8:	f001 fe84 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C_SDA_Pin;
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStructure);
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	4619      	mov	r1, r3
 80044b6:	483c      	ldr	r0, [pc, #240]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044b8:	f001 fe7c 	bl	80061b4 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 80044bc:	2201      	movs	r2, #1
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	4839      	ldr	r0, [pc, #228]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044c2:	f002 f8ce 	bl	8006662 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 80044c6:	2201      	movs	r2, #1
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	4837      	ldr	r0, [pc, #220]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044cc:	f002 f8c9 	bl	8006662 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET, timeout);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4834      	ldr	r0, [pc, #208]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044d8:	f7ff ff99 	bl	800440e <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET, timeout);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	4831      	ldr	r0, [pc, #196]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044e4:	f7ff ff93 	bl	800440e <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 80044e8:	2200      	movs	r2, #0
 80044ea:	2180      	movs	r1, #128	; 0x80
 80044ec:	482e      	ldr	r0, [pc, #184]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044ee:	f002 f8b8 	bl	8006662 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET, timeout);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	482b      	ldr	r0, [pc, #172]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 80044fa:	f7ff ff88 	bl	800440e <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 80044fe:	2200      	movs	r2, #0
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	4829      	ldr	r0, [pc, #164]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004504:	f002 f8ad 	bl	8006662 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET, timeout);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	4826      	ldr	r0, [pc, #152]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004510:	f7ff ff7d 	bl	800440e <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8004514:	2201      	movs	r2, #1
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	4823      	ldr	r0, [pc, #140]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 800451a:	f002 f8a2 	bl	8006662 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET, timeout);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	2140      	movs	r1, #64	; 0x40
 8004524:	4820      	ldr	r0, [pc, #128]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004526:	f7ff ff72 	bl	800440e <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 800452a:	2201      	movs	r2, #1
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	481e      	ldr	r0, [pc, #120]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004530:	f002 f897 	bl	8006662 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET, timeout);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2201      	movs	r2, #1
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	481b      	ldr	r0, [pc, #108]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 800453c:	f7ff ff67 	bl	800440e <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8004540:	2312      	movs	r3, #18
 8004542:	60fb      	str	r3, [r7, #12]

    GPIO_InitStructure.Pin = I2C_SCL_Pin;
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SCL_GPIO_Port, &GPIO_InitStructure);
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	4619      	mov	r1, r3
 800454e:	4816      	ldr	r0, [pc, #88]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004550:	f001 fe30 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C_SDA_Pin;
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStructure);
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	4619      	mov	r1, r3
 800455e:	4812      	ldr	r0, [pc, #72]	; (80045a8 <I2C_ClearBusyFlagErratum+0x134>)
 8004560:	f001 fe28 	bl	80061b4 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]
    asm("nop");
 8004574:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004584:	601a      	str	r2, [r3, #0]
    asm("nop");
 8004586:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    asm("nop");
 8004598:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 f87a 	bl	8006694 <HAL_I2C_Init>
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40010c00 	.word	0x40010c00

080045ac <stm32_i2c_write>:

int stm32_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 80045ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045b0:	b089      	sub	sp, #36	; 0x24
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
 80045ba:	460b      	mov	r3, r1
 80045bc:	71bb      	strb	r3, [r7, #6]
 80045be:	4613      	mov	r3, r2
 80045c0:	717b      	strb	r3, [r7, #5]
 80045c2:	466b      	mov	r3, sp
 80045c4:	461e      	mov	r6, r3
    uint8_t data_for_transmit[length + 1];
 80045c6:	797b      	ldrb	r3, [r7, #5]
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	1e4b      	subs	r3, r1, #1
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	460a      	mov	r2, r1
 80045d0:	2300      	movs	r3, #0
 80045d2:	4690      	mov	r8, r2
 80045d4:	4699      	mov	r9, r3
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ea:	460a      	mov	r2, r1
 80045ec:	2300      	movs	r3, #0
 80045ee:	4614      	mov	r4, r2
 80045f0:	461d      	mov	r5, r3
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	00eb      	lsls	r3, r5, #3
 80045fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004600:	00e2      	lsls	r2, r4, #3
 8004602:	460b      	mov	r3, r1
 8004604:	3307      	adds	r3, #7
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	ebad 0d03 	sub.w	sp, sp, r3
 800460e:	ab02      	add	r3, sp, #8
 8004610:	3300      	adds	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

    data_for_transmit[0] = reg_addr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	79ba      	ldrb	r2, [r7, #6]
 8004618:	701a      	strb	r2, [r3, #0]

    for (unsigned char i = 0; i < length; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
 800461e:	e00a      	b.n	8004636 <stm32_i2c_write+0x8a>
    {
        data_for_transmit[i + 1] = data[i];
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	441a      	add	r2, r3
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	3301      	adds	r3, #1
 800462a:	7811      	ldrb	r1, [r2, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	54d1      	strb	r1, [r2, r3]
    for (unsigned char i = 0; i < length; i++)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	3301      	adds	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
 8004636:	7dfa      	ldrb	r2, [r7, #23]
 8004638:	797b      	ldrb	r3, [r7, #5]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3f0      	bcc.n	8004620 <stm32_i2c_write+0x74>
    }

    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c1, slave_addr << 1, data_for_transmit, (length + 1), 0xff);
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	b29b      	uxth	r3, r3
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	b299      	uxth	r1, r3
 8004646:	797b      	ldrb	r3, [r7, #5]
 8004648:	b29b      	uxth	r3, r3
 800464a:	3301      	adds	r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	9200      	str	r2, [sp, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4809      	ldr	r0, [pc, #36]	; (800467c <stm32_i2c_write+0xd0>)
 8004656:	f002 f991 	bl	800697c <HAL_I2C_Master_Transmit>
 800465a:	4603      	mov	r3, r0
 800465c:	72fb      	strb	r3, [r7, #11]

    if (ret_V != HAL_OK)
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <stm32_i2c_write+0xc0>
    {
        I2C_ClearBusyFlagErratum(&hi2c1, 10);
 8004664:	210a      	movs	r1, #10
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <stm32_i2c_write+0xd0>)
 8004668:	f7ff ff04 	bl	8004474 <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	46b5      	mov	sp, r6
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800467a:	bf00      	nop
 800467c:	2000013c 	.word	0x2000013c

08004680 <stm32_i2c_read>:

int stm32_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	71fb      	strb	r3, [r7, #7]
 800468c:	460b      	mov	r3, r1
 800468e:	71bb      	strb	r3, [r7, #6]
 8004690:	4613      	mov	r3, r2
 8004692:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c1, slave_addr << 1, &reg_addr, 1, 0xff);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	b29b      	uxth	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b299      	uxth	r1, r3
 800469c:	1dba      	adds	r2, r7, #6
 800469e:	23ff      	movs	r3, #255	; 0xff
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2301      	movs	r3, #1
 80046a4:	4813      	ldr	r0, [pc, #76]	; (80046f4 <stm32_i2c_read+0x74>)
 80046a6:	f002 f969 	bl	800697c <HAL_I2C_Master_Transmit>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
    if (ret_V != HAL_OK)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <stm32_i2c_read+0x40>
    {
        I2C_ClearBusyFlagErratum(&hi2c1, 10);
 80046b4:	210a      	movs	r1, #10
 80046b6:	480f      	ldr	r0, [pc, #60]	; (80046f4 <stm32_i2c_read+0x74>)
 80046b8:	f7ff fedc 	bl	8004474 <I2C_ClearBusyFlagErratum>
        return ret_V;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	e015      	b.n	80046ec <stm32_i2c_read+0x6c>
    }

    ret_V = HAL_I2C_Master_Receive(&hi2c1, slave_addr << 1, data, length, 0xff);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b299      	uxth	r1, r3
 80046c8:	797b      	ldrb	r3, [r7, #5]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	22ff      	movs	r2, #255	; 0xff
 80046ce:	9200      	str	r2, [sp, #0]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	4808      	ldr	r0, [pc, #32]	; (80046f4 <stm32_i2c_read+0x74>)
 80046d4:	f002 fa50 	bl	8006b78 <HAL_I2C_Master_Receive>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]

    if (ret_V != HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <stm32_i2c_read+0x6a>
    {
        I2C_ClearBusyFlagErratum(&hi2c1, 10);
 80046e2:	210a      	movs	r1, #10
 80046e4:	4803      	ldr	r0, [pc, #12]	; (80046f4 <stm32_i2c_read+0x74>)
 80046e6:	f7ff fec5 	bl	8004474 <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000013c 	.word	0x2000013c

080046f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_MspInit+0x5c>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4a14      	ldr	r2, [pc, #80]	; (8004754 <HAL_MspInit+0x5c>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6193      	str	r3, [r2, #24]
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_MspInit+0x5c>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_MspInit+0x5c>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <HAL_MspInit+0x5c>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	61d3      	str	r3, [r2, #28]
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_MspInit+0x5c>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <HAL_MspInit+0x60>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_MspInit+0x60>)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	40021000 	.word	0x40021000
 8004758:	40010000 	.word	0x40010000

0800475c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004764:	f107 0314 	add.w	r3, r7, #20
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2d      	ldr	r2, [pc, #180]	; (800482c <HAL_CAN_MspInit+0xd0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d153      	bne.n	8004824 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800477c:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 8004782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004786:	61d3      	str	r3, [r2, #28]
 8004788:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 800479a:	f043 0308 	orr.w	r3, r3, #8
 800479e:	6193      	str	r3, [r2, #24]
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_CAN_MspInit+0xd4>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	4619      	mov	r1, r3
 80047c0:	481c      	ldr	r0, [pc, #112]	; (8004834 <HAL_CAN_MspInit+0xd8>)
 80047c2:	f001 fcf7 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	2302      	movs	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047d0:	2303      	movs	r3, #3
 80047d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	4619      	mov	r1, r3
 80047da:	4816      	ldr	r0, [pc, #88]	; (8004834 <HAL_CAN_MspInit+0xd8>)
 80047dc:	f001 fcea 	bl	80061b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80047e0:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_CAN_MspInit+0xdc>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <HAL_CAN_MspInit+0xdc>)
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004804:	2200      	movs	r2, #0
 8004806:	2100      	movs	r1, #0
 8004808:	2014      	movs	r0, #20
 800480a:	f001 f9fa 	bl	8005c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800480e:	2014      	movs	r0, #20
 8004810:	f001 fa13 	bl	8005c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8004814:	2200      	movs	r2, #0
 8004816:	2100      	movs	r1, #0
 8004818:	2016      	movs	r0, #22
 800481a:	f001 f9f2 	bl	8005c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800481e:	2016      	movs	r0, #22
 8004820:	f001 fa0b 	bl	8005c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004824:	bf00      	nop
 8004826:	3728      	adds	r7, #40	; 0x28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40006400 	.word	0x40006400
 8004830:	40021000 	.word	0x40021000
 8004834:	40010c00 	.word	0x40010c00
 8004838:	40010000 	.word	0x40010000

0800483c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_I2C_MspInit+0x70>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d123      	bne.n	80048a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 8004862:	f043 0308 	orr.w	r3, r3, #8
 8004866:	6193      	str	r3, [r2, #24]
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8004874:	23c0      	movs	r3, #192	; 0xc0
 8004876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004878:	2312      	movs	r3, #18
 800487a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	4619      	mov	r1, r3
 8004886:	480b      	ldr	r0, [pc, #44]	; (80048b4 <HAL_I2C_MspInit+0x78>)
 8004888:	f001 fc94 	bl	80061b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 8004892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004896:	61d3      	str	r3, [r2, #28]
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_I2C_MspInit+0x74>)
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048a4:	bf00      	nop
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40005400 	.word	0x40005400
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40010c00 	.word	0x40010c00

080048b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <HAL_I2C_MspDeInit+0x38>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10d      	bne.n	80048e6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_I2C_MspDeInit+0x3c>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <HAL_I2C_MspDeInit+0x3c>)
 80048d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048d4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(MPU_SCL_GPIO_Port, MPU_SCL_Pin);
 80048d6:	2140      	movs	r1, #64	; 0x40
 80048d8:	4807      	ldr	r0, [pc, #28]	; (80048f8 <HAL_I2C_MspDeInit+0x40>)
 80048da:	f001 fdef 	bl	80064bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(MPU_SDA_GPIO_Port, MPU_SDA_Pin);
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	4805      	ldr	r0, [pc, #20]	; (80048f8 <HAL_I2C_MspDeInit+0x40>)
 80048e2:	f001 fdeb 	bl	80064bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40005400 	.word	0x40005400
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40010c00 	.word	0x40010c00

080048fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a33      	ldr	r2, [pc, #204]	; (80049e4 <HAL_UART_MspInit+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d15f      	bne.n	80049dc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800491c:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <HAL_UART_MspInit+0xec>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4a31      	ldr	r2, [pc, #196]	; (80049e8 <HAL_UART_MspInit+0xec>)
 8004922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004926:	6193      	str	r3, [r2, #24]
 8004928:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <HAL_UART_MspInit+0xec>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_UART_MspInit+0xec>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_UART_MspInit+0xec>)
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	6193      	str	r3, [r2, #24]
 8004940:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <HAL_UART_MspInit+0xec>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800494c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004956:	2303      	movs	r3, #3
 8004958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495a:	f107 0310 	add.w	r3, r7, #16
 800495e:	4619      	mov	r1, r3
 8004960:	4822      	ldr	r0, [pc, #136]	; (80049ec <HAL_UART_MspInit+0xf0>)
 8004962:	f001 fc27 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 0310 	add.w	r3, r7, #16
 8004978:	4619      	mov	r1, r3
 800497a:	481c      	ldr	r0, [pc, #112]	; (80049ec <HAL_UART_MspInit+0xf0>)
 800497c:	f001 fc1a 	bl	80061b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 8004982:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_UART_MspInit+0xf8>)
 8004984:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004986:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 8004988:	2200      	movs	r2, #0
 800498a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049b0:	480f      	ldr	r0, [pc, #60]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049b2:	f001 f95d 	bl	8005c70 <HAL_DMA_Init>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80049bc:	f7ff fd08 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a0b      	ldr	r2, [pc, #44]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_UART_MspInit+0xf4>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2100      	movs	r1, #0
 80049d0:	2025      	movs	r0, #37	; 0x25
 80049d2:	f001 f916 	bl	8005c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049d6:	2025      	movs	r0, #37	; 0x25
 80049d8:	f001 f92f 	bl	8005c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049dc:	bf00      	nop
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010800 	.word	0x40010800
 80049f0:	200001d8 	.word	0x200001d8
 80049f4:	40020058 	.word	0x40020058

080049f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <NMI_Handler+0x4>

080049fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <HardFault_Handler+0x4>

08004a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <MemManage_Handler+0x4>

08004a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a0e:	e7fe      	b.n	8004a0e <BusFault_Handler+0x4>

08004a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <UsageFault_Handler+0x4>

08004a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a3e:	f000 f95d 	bl	8004cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <DMA1_Channel5_IRQHandler+0x10>)
 8004a4e:	f001 fa7d 	bl	8005f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200001d8 	.word	0x200001d8

08004a5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004a62:	f000 fddc 	bl	800561e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000114 	.word	0x20000114

08004a70 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <CAN1_SCE_IRQHandler+0x10>)
 8004a76:	f000 fdd2 	bl	800561e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000114 	.word	0x20000114

08004a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <USART1_IRQHandler+0x10>)
 8004a8a:	f003 fba7 	bl	80081dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000190 	.word	0x20000190

08004a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return 1;
 8004a9c:	2301      	movs	r3, #1
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <_kill>:

int _kill(int pid, int sig)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ab0:	f004 ffe2 	bl	8009a78 <__errno>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2216      	movs	r2, #22
 8004ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_exit>:

void _exit (int status)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ace:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ffe7 	bl	8004aa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ad8:	e7fe      	b.n	8004ad8 <_exit+0x12>

08004ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e00a      	b.n	8004b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004aec:	f3af 8000 	nop.w
 8004af0:	4601      	mov	r1, r0
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	60ba      	str	r2, [r7, #8]
 8004af8:	b2ca      	uxtb	r2, r1
 8004afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	dbf0      	blt.n	8004aec <_read+0x12>
  }

  return len;
 8004b0a:	687b      	ldr	r3, [r7, #4]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e009      	b.n	8004b3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	60ba      	str	r2, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3301      	adds	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	dbf1      	blt.n	8004b26 <_write+0x12>
  }
  return len;
 8004b42:	687b      	ldr	r3, [r7, #4]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_close>:

int _close(int file)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b72:	605a      	str	r2, [r3, #4]
  return 0;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <_isatty>:

int _isatty(int file)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b88:	2301      	movs	r3, #1
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <_sbrk+0x5c>)
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <_sbrk+0x60>)
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <_sbrk+0x64>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <_sbrk+0x64>)
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <_sbrk+0x68>)
 8004bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <_sbrk+0x64>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d207      	bcs.n	8004bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bdc:	f004 ff4c 	bl	8009a78 <__errno>
 8004be0:	4603      	mov	r3, r0
 8004be2:	220c      	movs	r2, #12
 8004be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bea:	e009      	b.n	8004c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <_sbrk+0x64>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <_sbrk+0x64>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <_sbrk+0x64>)
 8004bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20005000 	.word	0x20005000
 8004c0c:	00000400 	.word	0x00000400
 8004c10:	20000300 	.word	0x20000300
 8004c14:	20000318 	.word	0x20000318

08004c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c24:	f7ff fff8 	bl	8004c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c28:	480b      	ldr	r0, [pc, #44]	; (8004c58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004c2a:	490c      	ldr	r1, [pc, #48]	; (8004c5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c30:	e002      	b.n	8004c38 <LoopCopyDataInit>

08004c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c36:	3304      	adds	r3, #4

08004c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c3c:	d3f9      	bcc.n	8004c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004c40:	4c09      	ldr	r4, [pc, #36]	; (8004c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c44:	e001      	b.n	8004c4a <LoopFillZerobss>

08004c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c48:	3204      	adds	r2, #4

08004c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c4c:	d3fb      	bcc.n	8004c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c4e:	f004 ff19 	bl	8009a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c52:	f7ff f991 	bl	8003f78 <main>
  bx lr
 8004c56:	4770      	bx	lr
  ldr r0, =_sdata
 8004c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c5c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004c60:	0800ba68 	.word	0x0800ba68
  ldr r2, =_sbss
 8004c64:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004c68:	20000318 	.word	0x20000318

08004c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c6c:	e7fe      	b.n	8004c6c <ADC1_2_IRQHandler>
	...

08004c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_Init+0x28>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <HAL_Init+0x28>)
 8004c7a:	f043 0310 	orr.w	r3, r3, #16
 8004c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c80:	2003      	movs	r0, #3
 8004c82:	f000 ffb3 	bl	8005bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c86:	200f      	movs	r0, #15
 8004c88:	f000 f808 	bl	8004c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c8c:	f7ff fd34 	bl	80046f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40022000 	.word	0x40022000

08004c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_InitTick+0x54>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_InitTick+0x58>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 ffcb 	bl	8005c56 <HAL_SYSTICK_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00e      	b.n	8004ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b0f      	cmp	r3, #15
 8004cce:	d80a      	bhi.n	8004ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f000 ff93 	bl	8005c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cdc:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <HAL_InitTick+0x5c>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e000      	b.n	8004ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000038 	.word	0x20000038
 8004cf4:	20000040 	.word	0x20000040
 8004cf8:	2000003c 	.word	0x2000003c

08004cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_IncTick+0x1c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_IncTick+0x20>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4a03      	ldr	r2, [pc, #12]	; (8004d1c <HAL_IncTick+0x20>)
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	20000040 	.word	0x20000040
 8004d1c:	20000304 	.word	0x20000304

08004d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return uwTick;
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <HAL_GetTick+0x10>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	20000304 	.word	0x20000304

08004d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d005      	beq.n	8004d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_Delay+0x44>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d5a:	bf00      	nop
 8004d5c:	f7ff ffe0 	bl	8004d20 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8f7      	bhi.n	8004d5c <HAL_Delay+0x28>
  {
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000040 	.word	0x20000040

08004d7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0ed      	b.n	8004f6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fcde 	bl	800475c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004db0:	f7ff ffb6 	bl	8004d20 <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004db6:	e012      	b.n	8004dde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004db8:	f7ff ffb2 	bl	8004d20 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b0a      	cmp	r3, #10
 8004dc4:	d90b      	bls.n	8004dde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0c5      	b.n	8004f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0e5      	beq.n	8004db8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0202 	bic.w	r2, r2, #2
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dfc:	f7ff ff90 	bl	8004d20 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e02:	e012      	b.n	8004e2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e04:	f7ff ff8c 	bl	8004d20 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b0a      	cmp	r3, #10
 8004e10:	d90b      	bls.n	8004e2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2205      	movs	r2, #5
 8004e22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e09f      	b.n	8004f6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7e1b      	ldrb	r3, [r3, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d108      	bne.n	8004e52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e007      	b.n	8004e62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7e5b      	ldrb	r3, [r3, #25]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d108      	bne.n	8004e7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e007      	b.n	8004e8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	7e9b      	ldrb	r3, [r3, #26]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d108      	bne.n	8004ea6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0220 	orr.w	r2, r2, #32
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e007      	b.n	8004eb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0220 	bic.w	r2, r2, #32
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7edb      	ldrb	r3, [r3, #27]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d108      	bne.n	8004ed0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0210 	bic.w	r2, r2, #16
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e007      	b.n	8004ee0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0210 	orr.w	r2, r2, #16
 8004ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7f1b      	ldrb	r3, [r3, #28]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d108      	bne.n	8004efa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0208 	orr.w	r2, r2, #8
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e007      	b.n	8004f0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0208 	bic.w	r2, r2, #8
 8004f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7f5b      	ldrb	r3, [r3, #29]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d108      	bne.n	8004f24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0204 	orr.w	r2, r2, #4
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e007      	b.n	8004f34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0204 	bic.w	r2, r2, #4
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	ea42 0103 	orr.w	r1, r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d003      	beq.n	8004f98 <HAL_CAN_ConfigFilter+0x26>
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	f040 80aa 	bne.w	80050ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d123      	bne.n	800501a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	401a      	ands	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ff4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	3248      	adds	r2, #72	; 0x48
 8004ffa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800500e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	3348      	adds	r3, #72	; 0x48
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d122      	bne.n	8005068 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	431a      	orrs	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005042:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3248      	adds	r2, #72	; 0x48
 8005048:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800505c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	3348      	adds	r3, #72	; 0x48
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005082:	e007      	b.n	8005094 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	431a      	orrs	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	401a      	ands	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80050ae:	e007      	b.n	80050c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e006      	b.n	80050fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d12e      	bne.n	8005176 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005130:	f7ff fdf6 	bl	8004d20 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005136:	e012      	b.n	800515e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005138:	f7ff fdf2 	bl	8004d20 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b0a      	cmp	r3, #10
 8005144:	d90b      	bls.n	800515e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e012      	b.n	8005184 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e006      	b.n	8005184 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d003      	beq.n	80051b8 <HAL_CAN_AddTxMessage+0x2c>
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	f040 80ad 	bne.w	8005312 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8095 	beq.w	8005302 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	0e1b      	lsrs	r3, r3, #24
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051e2:	2201      	movs	r2, #1
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6809      	ldr	r1, [r1, #0]
 8005202:	431a      	orrs	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3318      	adds	r3, #24
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	440b      	add	r3, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e00f      	b.n	8005230 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800521a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005224:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	3318      	adds	r3, #24
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	440b      	add	r3, r1
 800522e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3318      	adds	r3, #24
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	440b      	add	r3, r1
 8005240:	3304      	adds	r3, #4
 8005242:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	7d1b      	ldrb	r3, [r3, #20]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d111      	bne.n	8005270 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3318      	adds	r3, #24
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4413      	add	r3, r2
 8005258:	3304      	adds	r3, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	6811      	ldr	r1, [r2, #0]
 8005260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3318      	adds	r3, #24
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	440b      	add	r3, r1
 800526c:	3304      	adds	r3, #4
 800526e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3307      	adds	r3, #7
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	061a      	lsls	r2, r3, #24
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3306      	adds	r3, #6
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3305      	adds	r3, #5
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	4313      	orrs	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	3204      	adds	r2, #4
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	4610      	mov	r0, r2
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	6811      	ldr	r1, [r2, #0]
 8005298:	ea43 0200 	orr.w	r2, r3, r0
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3303      	adds	r3, #3
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	061a      	lsls	r2, r3, #24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3302      	adds	r3, #2
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3301      	adds	r3, #1
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	4313      	orrs	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	4610      	mov	r0, r2
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	ea43 0200 	orr.w	r2, r3, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	440b      	add	r3, r1
 80052d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	3318      	adds	r3, #24
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	4413      	add	r3, r2
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	6811      	ldr	r1, [r2, #0]
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3318      	adds	r3, #24
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	440b      	add	r3, r1
 80052fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e00e      	b.n	8005320 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e006      	b.n	8005320 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3724      	adds	r7, #36	; 0x24
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800533c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d002      	beq.n	800534a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d11d      	bne.n	8005386 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005386:	68fb      	ldr	r3, [r7, #12]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005392:	b480      	push	{r7}
 8005394:	b087      	sub	sp, #28
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <HAL_CAN_GetRxMessage+0x24>
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	f040 8103 	bne.w	80055bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10e      	bne.n	80053da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d116      	bne.n	80053f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0f7      	b.n	80055ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0e8      	b.n	80055ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	331b      	adds	r3, #27
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4413      	add	r3, r2
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0204 	and.w	r2, r3, #4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10c      	bne.n	8005430 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	331b      	adds	r3, #27
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	0d5b      	lsrs	r3, r3, #21
 8005426:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e00b      	b.n	8005448 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	331b      	adds	r3, #27
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4413      	add	r3, r2
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	331b      	adds	r3, #27
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	4413      	add	r3, r2
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0202 	and.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	331b      	adds	r3, #27
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4413      	add	r3, r2
 800546a:	3304      	adds	r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2208      	movs	r2, #8
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	e00b      	b.n	8005496 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	331b      	adds	r3, #27
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	331b      	adds	r3, #27
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	4413      	add	r3, r2
 80054a2:	3304      	adds	r3, #4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	331b      	adds	r3, #27
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	4413      	add	r3, r2
 80054ba:	3304      	adds	r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	0a1a      	lsrs	r2, r3, #8
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	4413      	add	r3, r2
 8005500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0c1a      	lsrs	r2, r3, #16
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3302      	adds	r3, #2
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	4413      	add	r3, r2
 800551a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e1a      	lsrs	r2, r3, #24
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3303      	adds	r3, #3
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	4413      	add	r3, r2
 8005534:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	3304      	adds	r3, #4
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	4413      	add	r3, r2
 800554c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	0a1a      	lsrs	r2, r3, #8
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3305      	adds	r3, #5
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0c1a      	lsrs	r2, r3, #16
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3306      	adds	r3, #6
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0e1a      	lsrs	r2, r3, #24
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	3307      	adds	r3, #7
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0220 	orr.w	r2, r2, #32
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e007      	b.n	80055b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0220 	orr.w	r2, r2, #32
 80055b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e006      	b.n	80055ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <HAL_CAN_ActivateNotification+0x1e>
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d109      	bne.n	8005606 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6959      	ldr	r1, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e006      	b.n	8005614 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d07c      	beq.n	800575e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d023      	beq.n	80056b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2201      	movs	r2, #1
 8005674:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f983 	bl	800598c <HAL_CAN_TxMailbox0CompleteCallback>
 8005686:	e016      	b.n	80056b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	e00c      	b.n	80056b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
 80056ae:	e002      	b.n	80056b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f986 	bl	80059c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d024      	beq.n	800570a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f962 	bl	800599e <HAL_CAN_TxMailbox1CompleteCallback>
 80056da:	e016      	b.n	800570a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	e00c      	b.n	800570a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
 8005702:	e002      	b.n	800570a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f965 	bl	80059d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d024      	beq.n	800575e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800571c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f941 	bl	80059b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800572e:	e016      	b.n	800575e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e00c      	b.n	800575e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	e002      	b.n	800575e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f944 	bl	80059e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2208      	movs	r2, #8
 800579c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f92a 	bl	80059f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fe f98f 	bl	8003ae0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2210      	movs	r2, #16
 80057e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2208      	movs	r2, #8
 8005800:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f90a 	bl	8005a1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8f2 	bl	8005a0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8f3 	bl	8005a2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2208      	movs	r2, #8
 8005862:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8eb 	bl	8005a40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d07b      	beq.n	800596c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d072      	beq.n	8005964 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d043      	beq.n	8005964 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d03e      	beq.n	8005964 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ec:	2b60      	cmp	r3, #96	; 0x60
 80058ee:	d02b      	beq.n	8005948 <HAL_CAN_IRQHandler+0x32a>
 80058f0:	2b60      	cmp	r3, #96	; 0x60
 80058f2:	d82e      	bhi.n	8005952 <HAL_CAN_IRQHandler+0x334>
 80058f4:	2b50      	cmp	r3, #80	; 0x50
 80058f6:	d022      	beq.n	800593e <HAL_CAN_IRQHandler+0x320>
 80058f8:	2b50      	cmp	r3, #80	; 0x50
 80058fa:	d82a      	bhi.n	8005952 <HAL_CAN_IRQHandler+0x334>
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d019      	beq.n	8005934 <HAL_CAN_IRQHandler+0x316>
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d826      	bhi.n	8005952 <HAL_CAN_IRQHandler+0x334>
 8005904:	2b30      	cmp	r3, #48	; 0x30
 8005906:	d010      	beq.n	800592a <HAL_CAN_IRQHandler+0x30c>
 8005908:	2b30      	cmp	r3, #48	; 0x30
 800590a:	d822      	bhi.n	8005952 <HAL_CAN_IRQHandler+0x334>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d002      	beq.n	8005916 <HAL_CAN_IRQHandler+0x2f8>
 8005910:	2b20      	cmp	r3, #32
 8005912:	d005      	beq.n	8005920 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005914:	e01d      	b.n	8005952 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	f043 0308 	orr.w	r3, r3, #8
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800591e:	e019      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	f043 0310 	orr.w	r3, r3, #16
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005928:	e014      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	f043 0320 	orr.w	r3, r3, #32
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005932:	e00f      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800593c:	e00a      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005946:	e005      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005950:	e000      	b.n	8005954 <HAL_CAN_IRQHandler+0x336>
            break;
 8005952:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005962:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2204      	movs	r2, #4
 800596a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe f8ca 	bl	8003b18 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005984:	bf00      	nop
 8005986:	3728      	adds	r7, #40	; 0x28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
	...

08005a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <__NVIC_SetPriorityGrouping+0x44>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a86:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <__NVIC_SetPriorityGrouping+0x44>)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	60d3      	str	r3, [r2, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	f003 0307 	and.w	r3, r3, #7
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db0b      	blt.n	8005ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	f003 021f 	and.w	r2, r3, #31
 8005ad0:	4906      	ldr	r1, [pc, #24]	; (8005aec <__NVIC_EnableIRQ+0x34>)
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2001      	movs	r0, #1
 8005ada:	fa00 f202 	lsl.w	r2, r0, r2
 8005ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr
 8005aec:	e000e100 	.word	0xe000e100

08005af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	db0a      	blt.n	8005b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	490c      	ldr	r1, [pc, #48]	; (8005b3c <__NVIC_SetPriority+0x4c>)
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	0112      	lsls	r2, r2, #4
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	440b      	add	r3, r1
 8005b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b18:	e00a      	b.n	8005b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <__NVIC_SetPriority+0x50>)
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	3b04      	subs	r3, #4
 8005b28:	0112      	lsls	r2, r2, #4
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	761a      	strb	r2, [r3, #24]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e100 	.word	0xe000e100
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f1c3 0307 	rsb	r3, r3, #7
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	bf28      	it	cs
 8005b62:	2304      	movcs	r3, #4
 8005b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d902      	bls.n	8005b74 <NVIC_EncodePriority+0x30>
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3b03      	subs	r3, #3
 8005b72:	e000      	b.n	8005b76 <NVIC_EncodePriority+0x32>
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b78:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43da      	mvns	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	401a      	ands	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	43d9      	mvns	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b9c:	4313      	orrs	r3, r2
         );
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3724      	adds	r7, #36	; 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bb8:	d301      	bcc.n	8005bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e00f      	b.n	8005bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bbe:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <SysTick_Config+0x40>)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bc6:	210f      	movs	r1, #15
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	f7ff ff90 	bl	8005af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <SysTick_Config+0x40>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bd6:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <SysTick_Config+0x40>)
 8005bd8:	2207      	movs	r2, #7
 8005bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	e000e010 	.word	0xe000e010

08005bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ff2d 	bl	8005a54 <__NVIC_SetPriorityGrouping>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	4603      	mov	r3, r0
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c14:	f7ff ff42 	bl	8005a9c <__NVIC_GetPriorityGrouping>
 8005c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	6978      	ldr	r0, [r7, #20]
 8005c20:	f7ff ff90 	bl	8005b44 <NVIC_EncodePriority>
 8005c24:	4602      	mov	r2, r0
 8005c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff5f 	bl	8005af0 <__NVIC_SetPriority>
}
 8005c32:	bf00      	nop
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff ff35 	bl	8005ab8 <__NVIC_EnableIRQ>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ffa2 	bl	8005ba8 <SysTick_Config>
 8005c64:	4603      	mov	r3, r0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e043      	b.n	8005d0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <HAL_DMA_Init+0xa8>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <HAL_DMA_Init+0xac>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	009a      	lsls	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_DMA_Init+0xb0>)
 8005ca2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005cba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005cbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	bffdfff8 	.word	0xbffdfff8
 8005d1c:	cccccccd 	.word	0xcccccccd
 8005d20:	40020000 	.word	0x40020000

08005d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_DMA_Start_IT+0x20>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e04b      	b.n	8005ddc <HAL_DMA_Start_IT+0xb8>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d13a      	bne.n	8005dce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f9eb 	bl	8006158 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 020e 	orr.w	r2, r2, #14
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e00f      	b.n	8005dbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 020a 	orr.w	r2, r2, #10
 8005dba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e005      	b.n	8005dda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d008      	beq.n	8005e0e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e020      	b.n	8005e50 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020e 	bic.w	r2, r2, #14
 8005e1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	2101      	movs	r1, #1
 8005e38:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d005      	beq.n	8005e80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2204      	movs	r2, #4
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
 8005e7e:	e051      	b.n	8005f24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 020e 	bic.w	r2, r2, #14
 8005e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <HAL_DMA_Abort_IT+0xd4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d029      	beq.n	8005efe <HAL_DMA_Abort_IT+0xa2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <HAL_DMA_Abort_IT+0xd8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <HAL_DMA_Abort_IT+0x9e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <HAL_DMA_Abort_IT+0xdc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01a      	beq.n	8005ef4 <HAL_DMA_Abort_IT+0x98>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_DMA_Abort_IT+0xe0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d012      	beq.n	8005eee <HAL_DMA_Abort_IT+0x92>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_DMA_Abort_IT+0xe4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_DMA_Abort_IT+0x8c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_DMA_Abort_IT+0xe8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d102      	bne.n	8005ee2 <HAL_DMA_Abort_IT+0x86>
 8005edc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ee0:	e00e      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ee6:	e00b      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eec:	e008      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef2:	e005      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef8:	e002      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005efa:	2310      	movs	r3, #16
 8005efc:	e000      	b.n	8005f00 <HAL_DMA_Abort_IT+0xa4>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <HAL_DMA_Abort_IT+0xec>)
 8005f02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
    } 
  }
  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40020008 	.word	0x40020008
 8005f34:	4002001c 	.word	0x4002001c
 8005f38:	40020030 	.word	0x40020030
 8005f3c:	40020044 	.word	0x40020044
 8005f40:	40020058 	.word	0x40020058
 8005f44:	4002006c 	.word	0x4002006c
 8005f48:	40020000 	.word	0x40020000

08005f4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2204      	movs	r2, #4
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d04f      	beq.n	8006014 <HAL_DMA_IRQHandler+0xc8>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04a      	beq.n	8006014 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a66      	ldr	r2, [pc, #408]	; (800613c <HAL_DMA_IRQHandler+0x1f0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d029      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xae>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_DMA_IRQHandler+0x1f4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0xaa>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a63      	ldr	r2, [pc, #396]	; (8006144 <HAL_DMA_IRQHandler+0x1f8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01a      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0xa4>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a62      	ldr	r2, [pc, #392]	; (8006148 <HAL_DMA_IRQHandler+0x1fc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d012      	beq.n	8005fea <HAL_DMA_IRQHandler+0x9e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a60      	ldr	r2, [pc, #384]	; (800614c <HAL_DMA_IRQHandler+0x200>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x98>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5f      	ldr	r2, [pc, #380]	; (8006150 <HAL_DMA_IRQHandler+0x204>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d102      	bne.n	8005fde <HAL_DMA_IRQHandler+0x92>
 8005fd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005fdc:	e00e      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005fde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fe2:	e00b      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005fe4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005fe8:	e008      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fee:	e005      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff4:	e002      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	e000      	b.n	8005ffc <HAL_DMA_IRQHandler+0xb0>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	4a55      	ldr	r2, [pc, #340]	; (8006154 <HAL_DMA_IRQHandler+0x208>)
 8005ffe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8094 	beq.w	8006132 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006012:	e08e      	b.n	8006132 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	2202      	movs	r2, #2
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d056      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x186>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d051      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 020a 	bic.w	r2, r2, #10
 800604a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a38      	ldr	r2, [pc, #224]	; (800613c <HAL_DMA_IRQHandler+0x1f0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d029      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x166>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a37      	ldr	r2, [pc, #220]	; (8006140 <HAL_DMA_IRQHandler+0x1f4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d022      	beq.n	80060ae <HAL_DMA_IRQHandler+0x162>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a35      	ldr	r2, [pc, #212]	; (8006144 <HAL_DMA_IRQHandler+0x1f8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01a      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x15c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a34      	ldr	r2, [pc, #208]	; (8006148 <HAL_DMA_IRQHandler+0x1fc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d012      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x156>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a32      	ldr	r2, [pc, #200]	; (800614c <HAL_DMA_IRQHandler+0x200>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00a      	beq.n	800609c <HAL_DMA_IRQHandler+0x150>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_DMA_IRQHandler+0x204>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d102      	bne.n	8006096 <HAL_DMA_IRQHandler+0x14a>
 8006090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006094:	e00e      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 8006096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800609a:	e00b      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 800609c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a0:	e008      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 80060a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060a6:	e005      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 80060a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ac:	e002      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 80060ae:	2320      	movs	r3, #32
 80060b0:	e000      	b.n	80060b4 <HAL_DMA_IRQHandler+0x168>
 80060b2:	2302      	movs	r3, #2
 80060b4:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_DMA_IRQHandler+0x208>)
 80060b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d034      	beq.n	8006132 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80060d0:	e02f      	b.n	8006132 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	2208      	movs	r2, #8
 80060d8:	409a      	lsls	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d028      	beq.n	8006134 <HAL_DMA_IRQHandler+0x1e8>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d023      	beq.n	8006134 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 020e 	bic.w	r2, r2, #14
 80060fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f202 	lsl.w	r2, r1, r2
 800610a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
    }
  }
  return;
 8006132:	bf00      	nop
 8006134:	bf00      	nop
}
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40020008 	.word	0x40020008
 8006140:	4002001c 	.word	0x4002001c
 8006144:	40020030 	.word	0x40020030
 8006148:	40020044 	.word	0x40020044
 800614c:	40020058 	.word	0x40020058
 8006150:	4002006c 	.word	0x4002006c
 8006154:	40020000 	.word	0x40020000

08006158 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	2101      	movs	r1, #1
 8006170:	fa01 f202 	lsl.w	r2, r1, r2
 8006174:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b10      	cmp	r3, #16
 8006184:	d108      	bne.n	8006198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006196:	e007      	b.n	80061a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b08b      	sub	sp, #44	; 0x2c
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80061c2:	2300      	movs	r3, #0
 80061c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061c6:	e169      	b.n	800649c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80061c8:	2201      	movs	r2, #1
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	f040 8158 	bne.w	8006496 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4a9a      	ldr	r2, [pc, #616]	; (8006454 <HAL_GPIO_Init+0x2a0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d05e      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
 80061f0:	4a98      	ldr	r2, [pc, #608]	; (8006454 <HAL_GPIO_Init+0x2a0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d875      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 80061f6:	4a98      	ldr	r2, [pc, #608]	; (8006458 <HAL_GPIO_Init+0x2a4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d058      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
 80061fc:	4a96      	ldr	r2, [pc, #600]	; (8006458 <HAL_GPIO_Init+0x2a4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d86f      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 8006202:	4a96      	ldr	r2, [pc, #600]	; (800645c <HAL_GPIO_Init+0x2a8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d052      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
 8006208:	4a94      	ldr	r2, [pc, #592]	; (800645c <HAL_GPIO_Init+0x2a8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d869      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 800620e:	4a94      	ldr	r2, [pc, #592]	; (8006460 <HAL_GPIO_Init+0x2ac>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d04c      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
 8006214:	4a92      	ldr	r2, [pc, #584]	; (8006460 <HAL_GPIO_Init+0x2ac>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d863      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 800621a:	4a92      	ldr	r2, [pc, #584]	; (8006464 <HAL_GPIO_Init+0x2b0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d046      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
 8006220:	4a90      	ldr	r2, [pc, #576]	; (8006464 <HAL_GPIO_Init+0x2b0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d85d      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 8006226:	2b12      	cmp	r3, #18
 8006228:	d82a      	bhi.n	8006280 <HAL_GPIO_Init+0xcc>
 800622a:	2b12      	cmp	r3, #18
 800622c:	d859      	bhi.n	80062e2 <HAL_GPIO_Init+0x12e>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <HAL_GPIO_Init+0x80>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	080062af 	.word	0x080062af
 8006238:	08006289 	.word	0x08006289
 800623c:	0800629b 	.word	0x0800629b
 8006240:	080062dd 	.word	0x080062dd
 8006244:	080062e3 	.word	0x080062e3
 8006248:	080062e3 	.word	0x080062e3
 800624c:	080062e3 	.word	0x080062e3
 8006250:	080062e3 	.word	0x080062e3
 8006254:	080062e3 	.word	0x080062e3
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062e3 	.word	0x080062e3
 8006260:	080062e3 	.word	0x080062e3
 8006264:	080062e3 	.word	0x080062e3
 8006268:	080062e3 	.word	0x080062e3
 800626c:	080062e3 	.word	0x080062e3
 8006270:	080062e3 	.word	0x080062e3
 8006274:	080062e3 	.word	0x080062e3
 8006278:	08006291 	.word	0x08006291
 800627c:	080062a5 	.word	0x080062a5
 8006280:	4a79      	ldr	r2, [pc, #484]	; (8006468 <HAL_GPIO_Init+0x2b4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006286:	e02c      	b.n	80062e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	623b      	str	r3, [r7, #32]
          break;
 800628e:	e029      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	623b      	str	r3, [r7, #32]
          break;
 8006298:	e024      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	3308      	adds	r3, #8
 80062a0:	623b      	str	r3, [r7, #32]
          break;
 80062a2:	e01f      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	330c      	adds	r3, #12
 80062aa:	623b      	str	r3, [r7, #32]
          break;
 80062ac:	e01a      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80062b6:	2304      	movs	r3, #4
 80062b8:	623b      	str	r3, [r7, #32]
          break;
 80062ba:	e013      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062c4:	2308      	movs	r3, #8
 80062c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	611a      	str	r2, [r3, #16]
          break;
 80062ce:	e009      	b.n	80062e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062d0:	2308      	movs	r3, #8
 80062d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	615a      	str	r2, [r3, #20]
          break;
 80062da:	e003      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062dc:	2300      	movs	r3, #0
 80062de:	623b      	str	r3, [r7, #32]
          break;
 80062e0:	e000      	b.n	80062e4 <HAL_GPIO_Init+0x130>
          break;
 80062e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2bff      	cmp	r3, #255	; 0xff
 80062e8:	d801      	bhi.n	80062ee <HAL_GPIO_Init+0x13a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	e001      	b.n	80062f2 <HAL_GPIO_Init+0x13e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2bff      	cmp	r3, #255	; 0xff
 80062f8:	d802      	bhi.n	8006300 <HAL_GPIO_Init+0x14c>
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	e002      	b.n	8006306 <HAL_GPIO_Init+0x152>
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	3b08      	subs	r3, #8
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	210f      	movs	r1, #15
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	401a      	ands	r2, r3
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	431a      	orrs	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80b1 	beq.w	8006496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006334:	4b4d      	ldr	r3, [pc, #308]	; (800646c <HAL_GPIO_Init+0x2b8>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	4a4c      	ldr	r2, [pc, #304]	; (800646c <HAL_GPIO_Init+0x2b8>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6193      	str	r3, [r2, #24]
 8006340:	4b4a      	ldr	r3, [pc, #296]	; (800646c <HAL_GPIO_Init+0x2b8>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800634c:	4a48      	ldr	r2, [pc, #288]	; (8006470 <HAL_GPIO_Init+0x2bc>)
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	3302      	adds	r3, #2
 8006354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	220f      	movs	r2, #15
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a40      	ldr	r2, [pc, #256]	; (8006474 <HAL_GPIO_Init+0x2c0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_GPIO_Init+0x1ec>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <HAL_GPIO_Init+0x2c4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00d      	beq.n	800639c <HAL_GPIO_Init+0x1e8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a3e      	ldr	r2, [pc, #248]	; (800647c <HAL_GPIO_Init+0x2c8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <HAL_GPIO_Init+0x1e4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3d      	ldr	r2, [pc, #244]	; (8006480 <HAL_GPIO_Init+0x2cc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <HAL_GPIO_Init+0x1e0>
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <HAL_GPIO_Init+0x1ee>
 8006394:	2304      	movs	r3, #4
 8006396:	e004      	b.n	80063a2 <HAL_GPIO_Init+0x1ee>
 8006398:	2302      	movs	r3, #2
 800639a:	e002      	b.n	80063a2 <HAL_GPIO_Init+0x1ee>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_GPIO_Init+0x1ee>
 80063a0:	2300      	movs	r3, #0
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	f002 0203 	and.w	r2, r2, #3
 80063a8:	0092      	lsls	r2, r2, #2
 80063aa:	4093      	lsls	r3, r2
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80063b2:	492f      	ldr	r1, [pc, #188]	; (8006470 <HAL_GPIO_Init+0x2bc>)
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	3302      	adds	r3, #2
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d006      	beq.n	80063da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80063cc:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	492c      	ldr	r1, [pc, #176]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]
 80063d8:	e006      	b.n	80063e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80063da:	4b2a      	ldr	r3, [pc, #168]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	4928      	ldr	r1, [pc, #160]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80063f4:	4b23      	ldr	r3, [pc, #140]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	4922      	ldr	r1, [pc, #136]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60cb      	str	r3, [r1, #12]
 8006400:	e006      	b.n	8006410 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	43db      	mvns	r3, r3
 800640a:	491e      	ldr	r1, [pc, #120]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 800640c:	4013      	ands	r3, r2
 800640e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	4918      	ldr	r1, [pc, #96]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	e006      	b.n	8006438 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800642a:	4b16      	ldr	r3, [pc, #88]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	43db      	mvns	r3, r3
 8006432:	4914      	ldr	r1, [pc, #80]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 8006434:	4013      	ands	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d021      	beq.n	8006488 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	490e      	ldr	r1, [pc, #56]	; (8006484 <HAL_GPIO_Init+0x2d0>)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]
 8006450:	e021      	b.n	8006496 <HAL_GPIO_Init+0x2e2>
 8006452:	bf00      	nop
 8006454:	10320000 	.word	0x10320000
 8006458:	10310000 	.word	0x10310000
 800645c:	10220000 	.word	0x10220000
 8006460:	10210000 	.word	0x10210000
 8006464:	10120000 	.word	0x10120000
 8006468:	10110000 	.word	0x10110000
 800646c:	40021000 	.word	0x40021000
 8006470:	40010000 	.word	0x40010000
 8006474:	40010800 	.word	0x40010800
 8006478:	40010c00 	.word	0x40010c00
 800647c:	40011000 	.word	0x40011000
 8006480:	40011400 	.word	0x40011400
 8006484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_GPIO_Init+0x304>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	43db      	mvns	r3, r3
 8006490:	4909      	ldr	r1, [pc, #36]	; (80064b8 <HAL_GPIO_Init+0x304>)
 8006492:	4013      	ands	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	3301      	adds	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	fa22 f303 	lsr.w	r3, r2, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f47f ae8e 	bne.w	80061c8 <HAL_GPIO_Init+0x14>
  }
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	372c      	adds	r7, #44	; 0x2c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	40010400 	.word	0x40010400

080064bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80064ca:	e09a      	b.n	8006602 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80064cc:	2201      	movs	r2, #1
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 808d 	beq.w	80065fc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80064e2:	4a4e      	ldr	r2, [pc, #312]	; (800661c <HAL_GPIO_DeInit+0x160>)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3302      	adds	r3, #2
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4013      	ands	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a46      	ldr	r2, [pc, #280]	; (8006620 <HAL_GPIO_DeInit+0x164>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_GPIO_DeInit+0x78>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a45      	ldr	r2, [pc, #276]	; (8006624 <HAL_GPIO_DeInit+0x168>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00d      	beq.n	8006530 <HAL_GPIO_DeInit+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a44      	ldr	r2, [pc, #272]	; (8006628 <HAL_GPIO_DeInit+0x16c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d007      	beq.n	800652c <HAL_GPIO_DeInit+0x70>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a43      	ldr	r2, [pc, #268]	; (800662c <HAL_GPIO_DeInit+0x170>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_GPIO_DeInit+0x6c>
 8006524:	2303      	movs	r3, #3
 8006526:	e006      	b.n	8006536 <HAL_GPIO_DeInit+0x7a>
 8006528:	2304      	movs	r3, #4
 800652a:	e004      	b.n	8006536 <HAL_GPIO_DeInit+0x7a>
 800652c:	2302      	movs	r3, #2
 800652e:	e002      	b.n	8006536 <HAL_GPIO_DeInit+0x7a>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <HAL_GPIO_DeInit+0x7a>
 8006534:	2300      	movs	r3, #0
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	f002 0203 	and.w	r2, r2, #3
 800653c:	0092      	lsls	r2, r2, #2
 800653e:	4093      	lsls	r3, r2
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	429a      	cmp	r2, r3
 8006544:	d132      	bne.n	80065ac <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006546:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	43db      	mvns	r3, r3
 800654e:	4938      	ldr	r1, [pc, #224]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 8006550:	4013      	ands	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006554:	4b36      	ldr	r3, [pc, #216]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	43db      	mvns	r3, r3
 800655c:	4934      	ldr	r1, [pc, #208]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 800655e:	4013      	ands	r3, r2
 8006560:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006562:	4b33      	ldr	r3, [pc, #204]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	43db      	mvns	r3, r3
 800656a:	4931      	ldr	r1, [pc, #196]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 800656c:	4013      	ands	r3, r2
 800656e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006570:	4b2f      	ldr	r3, [pc, #188]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	43db      	mvns	r3, r3
 8006578:	492d      	ldr	r1, [pc, #180]	; (8006630 <HAL_GPIO_DeInit+0x174>)
 800657a:	4013      	ands	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	220f      	movs	r2, #15
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800658e:	4a23      	ldr	r2, [pc, #140]	; (800661c <HAL_GPIO_DeInit+0x160>)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	3302      	adds	r3, #2
 8006596:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43da      	mvns	r2, r3
 800659e:	481f      	ldr	r0, [pc, #124]	; (800661c <HAL_GPIO_DeInit+0x160>)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	089b      	lsrs	r3, r3, #2
 80065a4:	400a      	ands	r2, r1
 80065a6:	3302      	adds	r3, #2
 80065a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	d801      	bhi.n	80065b6 <HAL_GPIO_DeInit+0xfa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	e001      	b.n	80065ba <HAL_GPIO_DeInit+0xfe>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2bff      	cmp	r3, #255	; 0xff
 80065c0:	d802      	bhi.n	80065c8 <HAL_GPIO_DeInit+0x10c>
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	e002      	b.n	80065ce <HAL_GPIO_DeInit+0x112>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	3b08      	subs	r3, #8
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	210f      	movs	r1, #15
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	43db      	mvns	r3, r3
 80065de:	401a      	ands	r2, r3
 80065e0:	2104      	movs	r1, #4
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	431a      	orrs	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	401a      	ands	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	3301      	adds	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	f47f af5e 	bne.w	80064cc <HAL_GPIO_DeInit+0x10>
  }
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3724      	adds	r7, #36	; 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr
 800661c:	40010000 	.word	0x40010000
 8006620:	40010800 	.word	0x40010800
 8006624:	40010c00 	.word	0x40010c00
 8006628:	40011000 	.word	0x40011000
 800662c:	40011400 	.word	0x40011400
 8006630:	40010400 	.word	0x40010400

08006634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e001      	b.n	8006656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	807b      	strh	r3, [r7, #2]
 800666e:	4613      	mov	r3, r2
 8006670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006672:	787b      	ldrb	r3, [r7, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800667e:	e003      	b.n	8006688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	041a      	lsls	r2, r3, #16
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	611a      	str	r2, [r3, #16]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e12b      	b.n	80068fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fe f8be 	bl	800483c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	; 0x24
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066f8:	f001 fbfa 	bl	8007ef0 <HAL_RCC_GetPCLK1Freq>
 80066fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a81      	ldr	r2, [pc, #516]	; (8006908 <HAL_I2C_Init+0x274>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d807      	bhi.n	8006718 <HAL_I2C_Init+0x84>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a80      	ldr	r2, [pc, #512]	; (800690c <HAL_I2C_Init+0x278>)
 800670c:	4293      	cmp	r3, r2
 800670e:	bf94      	ite	ls
 8006710:	2301      	movls	r3, #1
 8006712:	2300      	movhi	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e006      	b.n	8006726 <HAL_I2C_Init+0x92>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a7d      	ldr	r2, [pc, #500]	; (8006910 <HAL_I2C_Init+0x27c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0e7      	b.n	80068fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a78      	ldr	r2, [pc, #480]	; (8006914 <HAL_I2C_Init+0x280>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	0c9b      	lsrs	r3, r3, #18
 8006738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a6a      	ldr	r2, [pc, #424]	; (8006908 <HAL_I2C_Init+0x274>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d802      	bhi.n	8006768 <HAL_I2C_Init+0xd4>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	e009      	b.n	800677c <HAL_I2C_Init+0xe8>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	4a69      	ldr	r2, [pc, #420]	; (8006918 <HAL_I2C_Init+0x284>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	099b      	lsrs	r3, r3, #6
 800677a:	3301      	adds	r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	430b      	orrs	r3, r1
 8006782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800678e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	495c      	ldr	r1, [pc, #368]	; (8006908 <HAL_I2C_Init+0x274>)
 8006798:	428b      	cmp	r3, r1
 800679a:	d819      	bhi.n	80067d0 <HAL_I2C_Init+0x13c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1e59      	subs	r1, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067b0:	400b      	ands	r3, r1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_I2C_Init+0x138>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1e59      	subs	r1, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067c4:	3301      	adds	r3, #1
 80067c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ca:	e051      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067cc:	2304      	movs	r3, #4
 80067ce:	e04f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <HAL_I2C_Init+0x168>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	440b      	add	r3, r1
 80067e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e012      	b.n	8006822 <HAL_I2C_Init+0x18e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e58      	subs	r0, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	0099      	lsls	r1, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006812:	3301      	adds	r3, #1
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_I2C_Init+0x196>
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10e      	bne.n	8006850 <HAL_I2C_Init+0x1bc>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1e58      	subs	r0, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	440b      	add	r3, r1
 8006840:	fbb0 f3f3 	udiv	r3, r0, r3
 8006844:	3301      	adds	r3, #1
 8006846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684e:	e00f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e58      	subs	r0, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	0099      	lsls	r1, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	fbb0 f3f3 	udiv	r3, r0, r3
 8006866:	3301      	adds	r3, #1
 8006868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	6809      	ldr	r1, [r1, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800689e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6911      	ldr	r1, [r2, #16]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68d2      	ldr	r2, [r2, #12]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	000186a0 	.word	0x000186a0
 800690c:	001e847f 	.word	0x001e847f
 8006910:	003d08ff 	.word	0x003d08ff
 8006914:	431bde83 	.word	0x431bde83
 8006918:	10624dd3 	.word	0x10624dd3

0800691c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e021      	b.n	8006972 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2224      	movs	r2, #36	; 0x24
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fd ffb6 	bl	80048b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	817b      	strh	r3, [r7, #10]
 800698c:	4613      	mov	r3, r2
 800698e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7fe f9c6 	bl	8004d20 <HAL_GetTick>
 8006994:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b20      	cmp	r3, #32
 80069a0:	f040 80e0 	bne.w	8006b64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2319      	movs	r3, #25
 80069aa:	2201      	movs	r2, #1
 80069ac:	4970      	ldr	r1, [pc, #448]	; (8006b70 <HAL_I2C_Master_Transmit+0x1f4>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fc9e 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	e0d3      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_I2C_Master_Transmit+0x50>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e0cc      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d007      	beq.n	80069f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2221      	movs	r2, #33	; 0x21
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	893a      	ldrh	r2, [r7, #8]
 8006a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a50      	ldr	r2, [pc, #320]	; (8006b74 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a34:	8979      	ldrh	r1, [r7, #10]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fb08 	bl	8007050 <I2C_MasterRequestWrite>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e08d      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a60:	e066      	b.n	8006b30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	6a39      	ldr	r1, [r7, #32]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fd5c 	bl	8007524 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d107      	bne.n	8006a8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e06b      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d11b      	bne.n	8006b04 <HAL_I2C_Master_Transmit+0x188>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d017      	beq.n	8006b04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	6a39      	ldr	r1, [r7, #32]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fd53 	bl	80075b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00d      	beq.n	8006b30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d107      	bne.n	8006b2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e01a      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d194      	bne.n	8006a62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	00100002 	.word	0x00100002
 8006b74:	ffff0000 	.word	0xffff0000

08006b78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	461a      	mov	r2, r3
 8006b84:	460b      	mov	r3, r1
 8006b86:	817b      	strh	r3, [r7, #10]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b90:	f7fe f8c6 	bl	8004d20 <HAL_GetTick>
 8006b94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	f040 824b 	bne.w	800703a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2319      	movs	r3, #25
 8006baa:	2201      	movs	r2, #1
 8006bac:	497f      	ldr	r1, [pc, #508]	; (8006dac <HAL_I2C_Master_Receive+0x234>)
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fb9e 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e23e      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_I2C_Master_Receive+0x54>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e237      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d007      	beq.n	8006bf2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2222      	movs	r2, #34	; 0x22
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	893a      	ldrh	r2, [r7, #8]
 8006c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a5f      	ldr	r2, [pc, #380]	; (8006db0 <HAL_I2C_Master_Receive+0x238>)
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c34:	8979      	ldrh	r1, [r7, #10]
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fa8a 	bl	8007154 <I2C_MasterRequestRead>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e1f8      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d113      	bne.n	8006c7a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e1cc      	b.n	8007014 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d11e      	bne.n	8006cc0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c92:	b672      	cpsid	i
}
 8006c94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006cbc:	b662      	cpsie	i
}
 8006cbe:	e035      	b.n	8006d2c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d11e      	bne.n	8006d06 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006cd8:	b672      	cpsid	i
}
 8006cda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006d02:	b662      	cpsie	i
}
 8006d04:	e012      	b.n	8006d2c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006d2c:	e172      	b.n	8007014 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f200 811f 	bhi.w	8006f76 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d123      	bne.n	8006d88 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fc7d 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e173      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d86:	e145      	b.n	8007014 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d152      	bne.n	8006e36 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	2200      	movs	r2, #0
 8006d98:	4906      	ldr	r1, [pc, #24]	; (8006db4 <HAL_I2C_Master_Receive+0x23c>)
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 faa8 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e148      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
 8006daa:	bf00      	nop
 8006dac:	00100002 	.word	0x00100002
 8006db0:	ffff0000 	.word	0xffff0000
 8006db4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006db8:	b672      	cpsid	i
}
 8006dba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006dfe:	b662      	cpsie	i
}
 8006e00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e34:	e0ee      	b.n	8007014 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4981      	ldr	r1, [pc, #516]	; (8007044 <HAL_I2C_Master_Receive+0x4cc>)
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fa55 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0f5      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e60:	b672      	cpsid	i
}
 8006e62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e96:	4b6c      	ldr	r3, [pc, #432]	; (8007048 <HAL_I2C_Master_Receive+0x4d0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	4a6b      	ldr	r2, [pc, #428]	; (800704c <HAL_I2C_Master_Receive+0x4d4>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	0a1a      	lsrs	r2, r3, #8
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	00da      	lsls	r2, r3, #3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d118      	bne.n	8006eee <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006ede:	b662      	cpsie	i
}
 8006ee0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e0a6      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d1d9      	bne.n	8006eb0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006f3e:	b662      	cpsie	i
}
 8006f40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f74:	e04e      	b.n	8007014 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fb62 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e058      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d124      	bne.n	8007014 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d107      	bne.n	8006fe2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f ae88 	bne.w	8006d2e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e000      	b.n	800703c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800703a:	2302      	movs	r3, #2
  }
}
 800703c:	4618      	mov	r0, r3
 800703e:	3728      	adds	r7, #40	; 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	00010004 	.word	0x00010004
 8007048:	20000038 	.word	0x20000038
 800704c:	14f8b589 	.word	0x14f8b589

08007050 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	460b      	mov	r3, r1
 800705e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d006      	beq.n	800707a <I2C_MasterRequestWrite+0x2a>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d003      	beq.n	800707a <I2C_MasterRequestWrite+0x2a>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007078:	d108      	bne.n	800708c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e00b      	b.n	80070a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	2b12      	cmp	r3, #18
 8007092:	d107      	bne.n	80070a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f91d 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d103      	bne.n	80070d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e035      	b.n	8007144 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e0:	d108      	bne.n	80070f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070f0:	611a      	str	r2, [r3, #16]
 80070f2:	e01b      	b.n	800712c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070f4:	897b      	ldrh	r3, [r7, #10]
 80070f6:	11db      	asrs	r3, r3, #7
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 0306 	and.w	r3, r3, #6
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f063 030f 	orn	r3, r3, #15
 8007104:	b2da      	uxtb	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	490e      	ldr	r1, [pc, #56]	; (800714c <I2C_MasterRequestWrite+0xfc>)
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f966 	bl	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e010      	b.n	8007144 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	b2da      	uxtb	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4907      	ldr	r1, [pc, #28]	; (8007150 <I2C_MasterRequestWrite+0x100>)
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f956 	bl	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	00010008 	.word	0x00010008
 8007150:	00010002 	.word	0x00010002

08007154 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	460b      	mov	r3, r1
 8007162:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007178:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d006      	beq.n	800718e <I2C_MasterRequestRead+0x3a>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d003      	beq.n	800718e <I2C_MasterRequestRead+0x3a>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800718c:	d108      	bne.n	80071a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e00b      	b.n	80071b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	2b11      	cmp	r3, #17
 80071a6:	d107      	bne.n	80071b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f893 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071de:	d103      	bne.n	80071e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e079      	b.n	80072e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f4:	d108      	bne.n	8007208 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071f6:	897b      	ldrh	r3, [r7, #10]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	611a      	str	r2, [r3, #16]
 8007206:	e05f      	b.n	80072c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007208:	897b      	ldrh	r3, [r7, #10]
 800720a:	11db      	asrs	r3, r3, #7
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 0306 	and.w	r3, r3, #6
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f063 030f 	orn	r3, r3, #15
 8007218:	b2da      	uxtb	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4930      	ldr	r1, [pc, #192]	; (80072e8 <I2C_MasterRequestRead+0x194>)
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f8dc 	bl	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e054      	b.n	80072e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4929      	ldr	r1, [pc, #164]	; (80072ec <I2C_MasterRequestRead+0x198>)
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f8cc 	bl	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e044      	b.n	80072e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800727a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f831 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00d      	beq.n	80072b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	d103      	bne.n	80072ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e017      	b.n	80072e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80072b0:	897b      	ldrh	r3, [r7, #10]
 80072b2:	11db      	asrs	r3, r3, #7
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0306 	and.w	r3, r3, #6
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f063 030e 	orn	r3, r3, #14
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <I2C_MasterRequestRead+0x198>)
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f888 	bl	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	00010008 	.word	0x00010008
 80072ec:	00010002 	.word	0x00010002

080072f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007300:	e048      	b.n	8007394 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d044      	beq.n	8007394 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730a:	f7fd fd09 	bl	8004d20 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d139      	bne.n	8007394 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b01      	cmp	r3, #1
 8007328:	d10d      	bne.n	8007346 <I2C_WaitOnFlagUntilTimeout+0x56>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	43da      	mvns	r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4013      	ands	r3, r2
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	e00c      	b.n	8007360 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	43da      	mvns	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4013      	ands	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	429a      	cmp	r2, r3
 8007364:	d116      	bne.n	8007394 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e023      	b.n	80073dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	0c1b      	lsrs	r3, r3, #16
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10d      	bne.n	80073ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	43da      	mvns	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bf0c      	ite	eq
 80073b0:	2301      	moveq	r3, #1
 80073b2:	2300      	movne	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	e00c      	b.n	80073d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	43da      	mvns	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf0c      	ite	eq
 80073cc:	2301      	moveq	r3, #1
 80073ce:	2300      	movne	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d093      	beq.n	8007302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073f2:	e071      	b.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007402:	d123      	bne.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007412:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800741c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f043 0204 	orr.w	r2, r3, #4
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e067      	b.n	800751c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d041      	beq.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007454:	f7fd fc64 	bl	8004d20 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d302      	bcc.n	800746a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d136      	bne.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b01      	cmp	r3, #1
 8007472:	d10c      	bne.n	800748e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	43da      	mvns	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4013      	ands	r3, r2
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	e00b      	b.n	80074a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	43da      	mvns	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4013      	ands	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e021      	b.n	800751c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d10c      	bne.n	80074fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	43da      	mvns	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf14      	ite	ne
 80074f4:	2301      	movne	r3, #1
 80074f6:	2300      	moveq	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e00b      	b.n	8007514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	43da      	mvns	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2301      	movne	r3, #1
 8007510:	2300      	moveq	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	f47f af6d 	bne.w	80073f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007530:	e034      	b.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f8e3 	bl	80076fe <I2C_IsAcknowledgeFailed>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e034      	b.n	80075ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d028      	beq.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754a:	f7fd fbe9 	bl	8004d20 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11d      	bne.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d016      	beq.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f043 0220 	orr.w	r2, r3, #32
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e007      	b.n	80075ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d1c3      	bne.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075c0:	e034      	b.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f89b 	bl	80076fe <I2C_IsAcknowledgeFailed>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e034      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d028      	beq.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075da:	f7fd fba1 	bl	8004d20 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11d      	bne.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d016      	beq.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e007      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d1c3      	bne.n	80075c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007650:	e049      	b.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b10      	cmp	r3, #16
 800765e:	d119      	bne.n	8007694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0210 	mvn.w	r2, #16
 8007668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e030      	b.n	80076f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007694:	f7fd fb44 	bl	8004d20 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d11d      	bne.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d016      	beq.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0220 	orr.w	r2, r3, #32
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e007      	b.n	80076f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d1ae      	bne.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007714:	d11b      	bne.n	800774e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800771e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f043 0204 	orr.w	r2, r3, #4
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
	...

0800775c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e272      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8087 	beq.w	800788a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800777c:	4b92      	ldr	r3, [pc, #584]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 030c 	and.w	r3, r3, #12
 8007784:	2b04      	cmp	r3, #4
 8007786:	d00c      	beq.n	80077a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007788:	4b8f      	ldr	r3, [pc, #572]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f003 030c 	and.w	r3, r3, #12
 8007790:	2b08      	cmp	r3, #8
 8007792:	d112      	bne.n	80077ba <HAL_RCC_OscConfig+0x5e>
 8007794:	4b8c      	ldr	r3, [pc, #560]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d10b      	bne.n	80077ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a2:	4b89      	ldr	r3, [pc, #548]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d06c      	beq.n	8007888 <HAL_RCC_OscConfig+0x12c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d168      	bne.n	8007888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e24c      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c2:	d106      	bne.n	80077d2 <HAL_RCC_OscConfig+0x76>
 80077c4:	4b80      	ldr	r3, [pc, #512]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a7f      	ldr	r2, [pc, #508]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e02e      	b.n	8007830 <HAL_RCC_OscConfig+0xd4>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCC_OscConfig+0x98>
 80077da:	4b7b      	ldr	r3, [pc, #492]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a7a      	ldr	r2, [pc, #488]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b78      	ldr	r3, [pc, #480]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a77      	ldr	r2, [pc, #476]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80077ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e01d      	b.n	8007830 <HAL_RCC_OscConfig+0xd4>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077fc:	d10c      	bne.n	8007818 <HAL_RCC_OscConfig+0xbc>
 80077fe:	4b72      	ldr	r3, [pc, #456]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a71      	ldr	r2, [pc, #452]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4b6f      	ldr	r3, [pc, #444]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a6e      	ldr	r2, [pc, #440]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	e00b      	b.n	8007830 <HAL_RCC_OscConfig+0xd4>
 8007818:	4b6b      	ldr	r3, [pc, #428]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800781e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	4b68      	ldr	r3, [pc, #416]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a67      	ldr	r2, [pc, #412]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800782a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800782e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d013      	beq.n	8007860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007838:	f7fd fa72 	bl	8004d20 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007840:	f7fd fa6e 	bl	8004d20 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b64      	cmp	r3, #100	; 0x64
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e200      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007852:	4b5d      	ldr	r3, [pc, #372]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f0      	beq.n	8007840 <HAL_RCC_OscConfig+0xe4>
 800785e:	e014      	b.n	800788a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007860:	f7fd fa5e 	bl	8004d20 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007868:	f7fd fa5a 	bl	8004d20 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b64      	cmp	r3, #100	; 0x64
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e1ec      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800787a:	4b53      	ldr	r3, [pc, #332]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f0      	bne.n	8007868 <HAL_RCC_OscConfig+0x10c>
 8007886:	e000      	b.n	800788a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d063      	beq.n	800795e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007896:	4b4c      	ldr	r3, [pc, #304]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80078a2:	4b49      	ldr	r3, [pc, #292]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f003 030c 	and.w	r3, r3, #12
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d11c      	bne.n	80078e8 <HAL_RCC_OscConfig+0x18c>
 80078ae:	4b46      	ldr	r3, [pc, #280]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d116      	bne.n	80078e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ba:	4b43      	ldr	r3, [pc, #268]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_RCC_OscConfig+0x176>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d001      	beq.n	80078d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e1c0      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d2:	4b3d      	ldr	r3, [pc, #244]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4939      	ldr	r1, [pc, #228]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078e6:	e03a      	b.n	800795e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d020      	beq.n	8007932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078f0:	4b36      	ldr	r3, [pc, #216]	; (80079cc <HAL_RCC_OscConfig+0x270>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f6:	f7fd fa13 	bl	8004d20 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078fe:	f7fd fa0f 	bl	8004d20 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e1a1      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4927      	ldr	r1, [pc, #156]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	600b      	str	r3, [r1, #0]
 8007930:	e015      	b.n	800795e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007932:	4b26      	ldr	r3, [pc, #152]	; (80079cc <HAL_RCC_OscConfig+0x270>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007938:	f7fd f9f2 	bl	8004d20 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007940:	f7fd f9ee 	bl	8004d20 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e180      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007952:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d03a      	beq.n	80079e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d019      	beq.n	80079a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <HAL_RCC_OscConfig+0x274>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007978:	f7fd f9d2 	bl	8004d20 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007980:	f7fd f9ce 	bl	8004d20 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e160      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007992:	4b0d      	ldr	r3, [pc, #52]	; (80079c8 <HAL_RCC_OscConfig+0x26c>)
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800799e:	2001      	movs	r0, #1
 80079a0:	f000 face 	bl	8007f40 <RCC_Delay>
 80079a4:	e01c      	b.n	80079e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <HAL_RCC_OscConfig+0x274>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ac:	f7fd f9b8 	bl	8004d20 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b2:	e00f      	b.n	80079d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b4:	f7fd f9b4 	bl	8004d20 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d908      	bls.n	80079d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e146      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
 80079c6:	bf00      	nop
 80079c8:	40021000 	.word	0x40021000
 80079cc:	42420000 	.word	0x42420000
 80079d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079d4:	4b92      	ldr	r3, [pc, #584]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e9      	bne.n	80079b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80a6 	beq.w	8007b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ee:	2300      	movs	r3, #0
 80079f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079f2:	4b8b      	ldr	r3, [pc, #556]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fe:	4b88      	ldr	r3, [pc, #544]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	4a87      	ldr	r2, [pc, #540]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a08:	61d3      	str	r3, [r2, #28]
 8007a0a:	4b85      	ldr	r3, [pc, #532]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a16:	2301      	movs	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1a:	4b82      	ldr	r3, [pc, #520]	; (8007c24 <HAL_RCC_OscConfig+0x4c8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d118      	bne.n	8007a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a26:	4b7f      	ldr	r3, [pc, #508]	; (8007c24 <HAL_RCC_OscConfig+0x4c8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a7e      	ldr	r2, [pc, #504]	; (8007c24 <HAL_RCC_OscConfig+0x4c8>)
 8007a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a32:	f7fd f975 	bl	8004d20 <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a3a:	f7fd f971 	bl	8004d20 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b64      	cmp	r3, #100	; 0x64
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e103      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a4c:	4b75      	ldr	r3, [pc, #468]	; (8007c24 <HAL_RCC_OscConfig+0x4c8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCC_OscConfig+0x312>
 8007a60:	4b6f      	ldr	r3, [pc, #444]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	4a6e      	ldr	r2, [pc, #440]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a66:	f043 0301 	orr.w	r3, r3, #1
 8007a6a:	6213      	str	r3, [r2, #32]
 8007a6c:	e02d      	b.n	8007aca <HAL_RCC_OscConfig+0x36e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10c      	bne.n	8007a90 <HAL_RCC_OscConfig+0x334>
 8007a76:	4b6a      	ldr	r3, [pc, #424]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	4a69      	ldr	r2, [pc, #420]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	6213      	str	r3, [r2, #32]
 8007a82:	4b67      	ldr	r3, [pc, #412]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	4a66      	ldr	r2, [pc, #408]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a88:	f023 0304 	bic.w	r3, r3, #4
 8007a8c:	6213      	str	r3, [r2, #32]
 8007a8e:	e01c      	b.n	8007aca <HAL_RCC_OscConfig+0x36e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d10c      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x356>
 8007a98:	4b61      	ldr	r3, [pc, #388]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	4a60      	ldr	r2, [pc, #384]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6213      	str	r3, [r2, #32]
 8007aa4:	4b5e      	ldr	r3, [pc, #376]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	4a5d      	ldr	r2, [pc, #372]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6213      	str	r3, [r2, #32]
 8007ab0:	e00b      	b.n	8007aca <HAL_RCC_OscConfig+0x36e>
 8007ab2:	4b5b      	ldr	r3, [pc, #364]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	4a5a      	ldr	r2, [pc, #360]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	6213      	str	r3, [r2, #32]
 8007abe:	4b58      	ldr	r3, [pc, #352]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	4a57      	ldr	r2, [pc, #348]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007ac4:	f023 0304 	bic.w	r3, r3, #4
 8007ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d015      	beq.n	8007afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ad2:	f7fd f925 	bl	8004d20 <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad8:	e00a      	b.n	8007af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ada:	f7fd f921 	bl	8004d20 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d901      	bls.n	8007af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e0b1      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af0:	4b4b      	ldr	r3, [pc, #300]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0ee      	beq.n	8007ada <HAL_RCC_OscConfig+0x37e>
 8007afc:	e014      	b.n	8007b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007afe:	f7fd f90f 	bl	8004d20 <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b04:	e00a      	b.n	8007b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b06:	f7fd f90b 	bl	8004d20 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e09b      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b1c:	4b40      	ldr	r3, [pc, #256]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1ee      	bne.n	8007b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d105      	bne.n	8007b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b2e:	4b3c      	ldr	r3, [pc, #240]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	4a3b      	ldr	r2, [pc, #236]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8087 	beq.w	8007c52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b44:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 030c 	and.w	r3, r3, #12
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d061      	beq.n	8007c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d146      	bne.n	8007be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b58:	4b33      	ldr	r3, [pc, #204]	; (8007c28 <HAL_RCC_OscConfig+0x4cc>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5e:	f7fd f8df 	bl	8004d20 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b66:	f7fd f8db 	bl	8004d20 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e06d      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b78:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f0      	bne.n	8007b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d108      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4921      	ldr	r1, [pc, #132]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ba0:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a19      	ldr	r1, [r3, #32]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	491b      	ldr	r1, [pc, #108]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bb8:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <HAL_RCC_OscConfig+0x4cc>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbe:	f7fd f8af 	bl	8004d20 <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc6:	f7fd f8ab 	bl	8004d20 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e03d      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f0      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x46a>
 8007be4:	e035      	b.n	8007c52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_RCC_OscConfig+0x4cc>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fd f898 	bl	8004d20 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fd f894 	bl	8004d20 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e026      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c06:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <HAL_RCC_OscConfig+0x4c4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x498>
 8007c12:	e01e      	b.n	8007c52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e019      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
 8007c20:	40021000 	.word	0x40021000
 8007c24:	40007000 	.word	0x40007000
 8007c28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_RCC_OscConfig+0x500>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d001      	beq.n	8007c52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40021000 	.word	0x40021000

08007c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0d0      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c74:	4b6a      	ldr	r3, [pc, #424]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d910      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b67      	ldr	r3, [pc, #412]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 0207 	bic.w	r2, r3, #7
 8007c8a:	4965      	ldr	r1, [pc, #404]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b63      	ldr	r3, [pc, #396]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e0b8      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d020      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cbc:	4b59      	ldr	r3, [pc, #356]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a58      	ldr	r2, [pc, #352]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cd4:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a52      	ldr	r2, [pc, #328]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007cda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ce0:	4b50      	ldr	r3, [pc, #320]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	494d      	ldr	r1, [pc, #308]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d040      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d107      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d06:	4b47      	ldr	r3, [pc, #284]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d115      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e07f      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d1e:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e073      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e06b      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d3e:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f023 0203 	bic.w	r2, r3, #3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4936      	ldr	r1, [pc, #216]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d50:	f7fc ffe6 	bl	8004d20 <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d58:	f7fc ffe2 	bl	8004d20 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e053      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6e:	4b2d      	ldr	r3, [pc, #180]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 020c 	and.w	r2, r3, #12
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1eb      	bne.n	8007d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d80:	4b27      	ldr	r3, [pc, #156]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d210      	bcs.n	8007db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 0207 	bic.w	r2, r3, #7
 8007d96:	4922      	ldr	r1, [pc, #136]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <HAL_RCC_ClockConfig+0x1c0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d001      	beq.n	8007db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e032      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d008      	beq.n	8007dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dbc:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4916      	ldr	r1, [pc, #88]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	490e      	ldr	r1, [pc, #56]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dee:	f000 f821 	bl	8007e34 <HAL_RCC_GetSysClockFreq>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <HAL_RCC_ClockConfig+0x1c4>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	091b      	lsrs	r3, r3, #4
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	490a      	ldr	r1, [pc, #40]	; (8007e28 <HAL_RCC_ClockConfig+0x1c8>)
 8007e00:	5ccb      	ldrb	r3, [r1, r3]
 8007e02:	fa22 f303 	lsr.w	r3, r2, r3
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <HAL_RCC_ClockConfig+0x1cc>)
 8007e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <HAL_RCC_ClockConfig+0x1d0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc ff44 	bl	8004c9c <HAL_InitTick>

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40022000 	.word	0x40022000
 8007e24:	40021000 	.word	0x40021000
 8007e28:	0800b87c 	.word	0x0800b87c
 8007e2c:	20000038 	.word	0x20000038
 8007e30:	2000003c 	.word	0x2000003c

08007e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007e4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d002      	beq.n	8007e64 <HAL_RCC_GetSysClockFreq+0x30>
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d003      	beq.n	8007e6a <HAL_RCC_GetSysClockFreq+0x36>
 8007e62:	e027      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e64:	4b19      	ldr	r3, [pc, #100]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8007e66:	613b      	str	r3, [r7, #16]
      break;
 8007e68:	e027      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	0c9b      	lsrs	r3, r3, #18
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e74:	5cd3      	ldrb	r3, [r2, r3]
 8007e76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d010      	beq.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	0c5b      	lsrs	r3, r3, #17
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	4a11      	ldr	r2, [pc, #68]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e8e:	5cd3      	ldrb	r3, [r2, r3]
 8007e90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a0d      	ldr	r2, [pc, #52]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8007e96:	fb03 f202 	mul.w	r2, r3, r2
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e004      	b.n	8007eae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ea8:	fb02 f303 	mul.w	r3, r2, r3
 8007eac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	613b      	str	r3, [r7, #16]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8007eb6:	613b      	str	r3, [r7, #16]
      break;
 8007eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eba:	693b      	ldr	r3, [r7, #16]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	007a1200 	.word	0x007a1200
 8007ed0:	0800b894 	.word	0x0800b894
 8007ed4:	0800b8a4 	.word	0x0800b8a4
 8007ed8:	003d0900 	.word	0x003d0900

08007edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <HAL_RCC_GetHCLKFreq+0x10>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr
 8007eec:	20000038 	.word	0x20000038

08007ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ef4:	f7ff fff2 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	4903      	ldr	r1, [pc, #12]	; (8007f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f06:	5ccb      	ldrb	r3, [r1, r3]
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40021000 	.word	0x40021000
 8007f14:	0800b88c 	.word	0x0800b88c

08007f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f1c:	f7ff ffde 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	0adb      	lsrs	r3, r3, #11
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	4903      	ldr	r1, [pc, #12]	; (8007f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f2e:	5ccb      	ldrb	r3, [r1, r3]
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40021000 	.word	0x40021000
 8007f3c:	0800b88c 	.word	0x0800b88c

08007f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <RCC_Delay+0x34>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <RCC_Delay+0x38>)
 8007f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f52:	0a5b      	lsrs	r3, r3, #9
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007f5c:	bf00      	nop
  }
  while (Delay --);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	60fa      	str	r2, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1f9      	bne.n	8007f5c <RCC_Delay+0x1c>
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr
 8007f74:	20000038 	.word	0x20000038
 8007f78:	10624dd3 	.word	0x10624dd3

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e042      	b.n	8008014 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fc fcaa 	bl	80048fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 ff8b 	bl	8008edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b20      	cmp	r3, #32
 800803a:	d16d      	bne.n	8008118 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_UART_Transmit+0x2c>
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e066      	b.n	800811a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2221      	movs	r2, #33	; 0x21
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800805a:	f7fc fe61 	bl	8004d20 <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d108      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e003      	b.n	8008090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008090:	e02a      	b.n	80080e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2200      	movs	r2, #0
 800809a:	2180      	movs	r1, #128	; 0x80
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fc53 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e036      	b.n	800811a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	3302      	adds	r3, #2
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	e007      	b.n	80080da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	3301      	adds	r3, #1
 80080d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1cf      	bne.n	8008092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	2140      	movs	r1, #64	; 0x40
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fc23 	bl	8008948 <UART_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e006      	b.n	800811a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	e000      	b.n	800811a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008118:	2302      	movs	r3, #2
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b08c      	sub	sp, #48	; 0x30
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b20      	cmp	r3, #32
 800813a:	d14a      	bne.n	80081d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e043      	b.n	80081d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	461a      	mov	r2, r3
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fc60 	bl	8008a24 <UART_Start_Receive_DMA>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800816a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800816e:	2b00      	cmp	r3, #0
 8008170:	d12c      	bne.n	80081cc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	2b01      	cmp	r3, #1
 8008178:	d125      	bne.n	80081c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	617b      	str	r3, [r7, #20]
   return(result);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f043 0310 	orr.w	r3, r3, #16
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	330c      	adds	r3, #12
 80081ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b0:	627a      	str	r2, [r7, #36]	; 0x24
 80081b2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6a39      	ldr	r1, [r7, #32]
 80081b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e5      	bne.n	8008190 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80081c4:	e002      	b.n	80081cc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80081cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081d0:	e000      	b.n	80081d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80081d2:	2302      	movs	r3, #2
  }
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3730      	adds	r7, #48	; 0x30
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b0ba      	sub	sp, #232	; 0xe8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008208:	2300      	movs	r3, #0
 800820a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800820e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800821a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10f      	bne.n	8008242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <HAL_UART_IRQHandler+0x66>
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fd90 	bl	8008d60 <UART_Receive_IT>
      return;
 8008240:	e25b      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80de 	beq.w	8008408 <HAL_UART_IRQHandler+0x22c>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80d1 	beq.w	8008408 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <HAL_UART_IRQHandler+0xae>
 8008272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800828a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <HAL_UART_IRQHandler+0xd2>
 8008296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	f043 0202 	orr.w	r2, r3, #2
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <HAL_UART_IRQHandler+0xf6>
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	f043 0204 	orr.w	r2, r3, #4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <HAL_UART_IRQHandler+0x126>
 80082de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	f043 0208 	orr.w	r2, r3, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 81f2 	beq.w	80086f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <HAL_UART_IRQHandler+0x14e>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd1b 	bl	8008d60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d103      	bne.n	8008356 <HAL_UART_IRQHandler+0x17a>
 800834e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d04f      	beq.n	80083f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc25 	bl	8008ba6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d041      	beq.n	80083ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3314      	adds	r3, #20
 8008392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800839a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1d9      	bne.n	800836a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	4a7e      	ldr	r2, [pc, #504]	; (80085bc <HAL_UART_IRQHandler+0x3e0>)
 80083c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fd46 	bl	8005e5c <HAL_DMA_Abort_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e00e      	b.n	8008404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fb fab8 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	e00a      	b.n	8008404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fb fab4 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	e006      	b.n	8008404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fb fab0 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008402:	e175      	b.n	80086f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	bf00      	nop
    return;
 8008406:	e173      	b.n	80086f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	2b01      	cmp	r3, #1
 800840e:	f040 814f 	bne.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8148 	beq.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8141 	beq.w	80086b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80b6 	beq.w	80085c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8145 	beq.w	80086f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800846e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008472:	429a      	cmp	r2, r3
 8008474:	f080 813e 	bcs.w	80086f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800847e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b20      	cmp	r3, #32
 8008488:	f000 8088 	beq.w	800859c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	330c      	adds	r3, #12
 80084b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1d9      	bne.n	800848c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3314      	adds	r3, #20
 80084de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3314      	adds	r3, #20
 80084f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008500:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008504:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800850e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e1      	bne.n	80084d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3314      	adds	r3, #20
 800851a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3314      	adds	r3, #20
 8008534:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008538:	66fa      	str	r2, [r7, #108]	; 0x6c
 800853a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800853e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e3      	bne.n	8008514 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330c      	adds	r3, #12
 8008560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800856a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856c:	f023 0310 	bic.w	r3, r3, #16
 8008570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800857e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008580:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800858c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fc24 	bl	8005de4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fb fa66 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085b8:	e09c      	b.n	80086f4 <HAL_UART_IRQHandler+0x518>
 80085ba:	bf00      	nop
 80085bc:	08008c6b 	.word	0x08008c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 808e 	beq.w	80086f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8089 	beq.w	80086f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800860a:	647a      	str	r2, [r7, #68]	; 0x44
 800860c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e3      	bne.n	80085e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3314      	adds	r3, #20
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	623b      	str	r3, [r7, #32]
   return(result);
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008642:	633a      	str	r2, [r7, #48]	; 0x30
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e3      	bne.n	800861e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	330c      	adds	r3, #12
 800866a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	60fb      	str	r3, [r7, #12]
   return(result);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0310 	bic.w	r3, r3, #16
 800867a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	330c      	adds	r3, #12
 8008684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008688:	61fa      	str	r2, [r7, #28]
 800868a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	69b9      	ldr	r1, [r7, #24]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	617b      	str	r3, [r7, #20]
   return(result);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e3      	bne.n	8008664 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fb f9eb 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ae:	e023      	b.n	80086f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <HAL_UART_IRQHandler+0x4f4>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fae2 	bl	8008c92 <UART_Transmit_IT>
    return;
 80086ce:	e014      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <HAL_UART_IRQHandler+0x51e>
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fb21 	bl	8008d30 <UART_EndTransmit_IT>
    return;
 80086ee:	e004      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
    return;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
      return;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <HAL_UART_IRQHandler+0x51e>
      return;
 80086f8:	bf00      	nop
  }
}
 80086fa:	37e8      	adds	r7, #232	; 0xe8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b09c      	sub	sp, #112	; 0x70
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d172      	bne.n	800884e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876a:	2200      	movs	r2, #0
 800876c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	330c      	adds	r3, #12
 8008774:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800877e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008784:	66bb      	str	r3, [r7, #104]	; 0x68
 8008786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800878e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008790:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800879c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	667b      	str	r3, [r7, #100]	; 0x64
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3314      	adds	r3, #20
 80087c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087c2:	647a      	str	r2, [r7, #68]	; 0x44
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3314      	adds	r3, #20
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	623b      	str	r3, [r7, #32]
   return(result);
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	663b      	str	r3, [r7, #96]	; 0x60
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3314      	adds	r3, #20
 80087f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087f6:	633a      	str	r2, [r7, #48]	; 0x30
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e5      	bne.n	80087d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800880a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880c:	2220      	movs	r2, #32
 800880e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	2b01      	cmp	r3, #1
 8008818:	d119      	bne.n	800884e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	330c      	adds	r3, #12
 8008820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	60fb      	str	r3, [r7, #12]
   return(result);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 0310 	bic.w	r3, r3, #16
 8008830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	330c      	adds	r3, #12
 8008838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800883a:	61fa      	str	r2, [r7, #28]
 800883c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	69b9      	ldr	r1, [r7, #24]
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	617b      	str	r3, [r7, #20]
   return(result);
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e5      	bne.n	800881a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	2200      	movs	r2, #0
 8008852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	2b01      	cmp	r3, #1
 800885a:	d106      	bne.n	800886a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800885c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008860:	4619      	mov	r1, r3
 8008862:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008864:	f7fb f90e 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008868:	e002      	b.n	8008870 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800886a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800886c:	f7ff ff51 	bl	8008712 <HAL_UART_RxCpltCallback>
}
 8008870:	bf00      	nop
 8008872:	3770      	adds	r7, #112	; 0x70
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	2b01      	cmp	r3, #1
 8008892:	d108      	bne.n	80088a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	b29b      	uxth	r3, r3
 800889c:	4619      	mov	r1, r3
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7fb f8f0 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088a4:	e002      	b.n	80088ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7ff ff3c 	bl	8008724 <HAL_UART_RxHalfCpltCallback>
}
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bf14      	ite	ne
 80088d4:	2301      	movne	r3, #1
 80088d6:	2300      	moveq	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b21      	cmp	r3, #33	; 0x21
 80088e6:	d108      	bne.n	80088fa <UART_DMAError+0x46>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2200      	movs	r2, #0
 80088f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80088f4:	68b8      	ldr	r0, [r7, #8]
 80088f6:	f000 f92f 	bl	8008b58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b22      	cmp	r3, #34	; 0x22
 800891a:	d108      	bne.n	800892e <UART_DMAError+0x7a>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008928:	68b8      	ldr	r0, [r7, #8]
 800892a:	f000 f93c 	bl	8008ba6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	f043 0210 	orr.w	r2, r3, #16
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800893a:	68b8      	ldr	r0, [r7, #8]
 800893c:	f7fb f80e 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b090      	sub	sp, #64	; 0x40
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008958:	e050      	b.n	80089fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800895a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d04c      	beq.n	80089fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <UART_WaitOnFlagUntilTimeout+0x30>
 8008968:	f7fc f9da 	bl	8004d20 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008974:	429a      	cmp	r2, r3
 8008976:	d241      	bcs.n	80089fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	330c      	adds	r3, #12
 800897e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008998:	637a      	str	r2, [r7, #52]	; 0x34
 800899a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800899e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e5      	bne.n	8008978 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3314      	adds	r3, #20
 80089b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	613b      	str	r3, [r7, #16]
   return(result);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3314      	adds	r3, #20
 80089ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089cc:	623a      	str	r2, [r7, #32]
 80089ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	69f9      	ldr	r1, [r7, #28]
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e5      	bne.n	80089ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e00f      	b.n	8008a1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4013      	ands	r3, r2
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	461a      	mov	r2, r3
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d09f      	beq.n	800895a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3740      	adds	r7, #64	; 0x40
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b098      	sub	sp, #96	; 0x60
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2222      	movs	r2, #34	; 0x22
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a50:	4a3e      	ldr	r2, [pc, #248]	; (8008b4c <UART_Start_Receive_DMA+0x128>)
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a58:	4a3d      	ldr	r2, [pc, #244]	; (8008b50 <UART_Start_Receive_DMA+0x12c>)
 8008a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a60:	4a3c      	ldr	r2, [pc, #240]	; (8008b54 <UART_Start_Receive_DMA+0x130>)
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	2200      	movs	r2, #0
 8008a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008a6c:	f107 0308 	add.w	r3, r7, #8
 8008a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	f7fd f94e 	bl	8005d24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d019      	beq.n	8008ada <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ac6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3314      	adds	r3, #20
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	f043 0301 	orr.w	r3, r3, #1
 8008af0:	657b      	str	r3, [r7, #84]	; 0x54
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3314      	adds	r3, #20
 8008af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008afa:	63ba      	str	r2, [r7, #56]	; 0x38
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e5      	bne.n	8008ada <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3314      	adds	r3, #20
 8008b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b24:	653b      	str	r3, [r7, #80]	; 0x50
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6a39      	ldr	r1, [r7, #32]
 8008b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3760      	adds	r7, #96	; 0x60
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	0800874d 	.word	0x0800874d
 8008b50:	08008879 	.word	0x08008879
 8008b54:	080088b5 	.word	0x080088b5

08008b58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	61ba      	str	r2, [r7, #24]
 8008b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6979      	ldr	r1, [r7, #20]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008b9c:	bf00      	nop
 8008b9e:	3724      	adds	r7, #36	; 0x24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr

08008ba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b095      	sub	sp, #84	; 0x54
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bce:	643a      	str	r2, [r7, #64]	; 0x40
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e5      	bne.n	8008bae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3314      	adds	r3, #20
 8008be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	f023 0301 	bic.w	r3, r3, #1
 8008bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3314      	adds	r3, #20
 8008c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e5      	bne.n	8008be2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d119      	bne.n	8008c52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f023 0310 	bic.w	r3, r3, #16
 8008c34:	647b      	str	r3, [r7, #68]	; 0x44
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c3e:	61ba      	str	r2, [r7, #24]
 8008c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6979      	ldr	r1, [r7, #20]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e5      	bne.n	8008c1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c60:	bf00      	nop
 8008c62:	3754      	adds	r7, #84	; 0x54
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7fa fe69 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b21      	cmp	r3, #33	; 0x21
 8008ca4:	d13e      	bne.n	8008d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cae:	d114      	bne.n	8008cda <UART_Transmit_IT+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d110      	bne.n	8008cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]
 8008cd8:	e008      	b.n	8008cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6211      	str	r1, [r2, #32]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10f      	bne.n	8008d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
  }
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fcd5 	bl	8008700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08c      	sub	sp, #48	; 0x30
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b22      	cmp	r3, #34	; 0x22
 8008d72:	f040 80ae 	bne.w	8008ed2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7e:	d117      	bne.n	8008db0 <UART_Receive_IT+0x50>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d113      	bne.n	8008db0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	1c9a      	adds	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	629a      	str	r2, [r3, #40]	; 0x28
 8008dae:	e026      	b.n	8008dfe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc2:	d007      	beq.n	8008dd4 <UART_Receive_IT+0x74>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <UART_Receive_IT+0x82>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e008      	b.n	8008df4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d15d      	bne.n	8008ece <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0220 	bic.w	r2, r2, #32
 8008e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695a      	ldr	r2, [r3, #20]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d135      	bne.n	8008ec4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	330c      	adds	r3, #12
 8008e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f023 0310 	bic.w	r3, r3, #16
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	330c      	adds	r3, #12
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	623a      	str	r2, [r7, #32]
 8008e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	69f9      	ldr	r1, [r7, #28]
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e5      	bne.n	8008e5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	d10a      	bne.n	8008eb6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fa fde1 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
 8008ec2:	e002      	b.n	8008eca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fc24 	bl	8008712 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e002      	b.n	8008ed4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e000      	b.n	8008ed4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
  }
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3730      	adds	r7, #48	; 0x30
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f16:	f023 030c 	bic.w	r3, r3, #12
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	430b      	orrs	r3, r1
 8008f22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <UART_SetConfig+0x114>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d103      	bne.n	8008f4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f44:	f7fe ffe8 	bl	8007f18 <HAL_RCC_GetPCLK2Freq>
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	e002      	b.n	8008f52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f4c:	f7fe ffd0 	bl	8007ef0 <HAL_RCC_GetPCLK1Freq>
 8008f50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009a      	lsls	r2, r3, #2
 8008f5c:	441a      	add	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f68:	4a22      	ldr	r2, [pc, #136]	; (8008ff4 <UART_SetConfig+0x118>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	0119      	lsls	r1, r3, #4
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009a      	lsls	r2, r3, #2
 8008f7c:	441a      	add	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f88:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <UART_SetConfig+0x118>)
 8008f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	2064      	movs	r0, #100	; 0x64
 8008f92:	fb00 f303 	mul.w	r3, r0, r3
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	3332      	adds	r3, #50	; 0x32
 8008f9c:	4a15      	ldr	r2, [pc, #84]	; (8008ff4 <UART_SetConfig+0x118>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa8:	4419      	add	r1, r3
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009a      	lsls	r2, r3, #2
 8008fb4:	441a      	add	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <UART_SetConfig+0x118>)
 8008fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	2064      	movs	r0, #100	; 0x64
 8008fca:	fb00 f303 	mul.w	r3, r0, r3
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	3332      	adds	r3, #50	; 0x32
 8008fd4:	4a07      	ldr	r2, [pc, #28]	; (8008ff4 <UART_SetConfig+0x118>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40013800 	.word	0x40013800
 8008ff4:	51eb851f 	.word	0x51eb851f

08008ff8 <asin>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	f000 f827 	bl	8009050 <__ieee754_asin>
 8009002:	4622      	mov	r2, r4
 8009004:	4606      	mov	r6, r0
 8009006:	460f      	mov	r7, r1
 8009008:	462b      	mov	r3, r5
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 fcf5 	bl	80009fc <__aeabi_dcmpun>
 8009012:	b988      	cbnz	r0, 8009038 <asin+0x40>
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f000 fd24 	bl	8009a64 <fabs>
 800901c:	2200      	movs	r2, #0
 800901e:	4b08      	ldr	r3, [pc, #32]	; (8009040 <asin+0x48>)
 8009020:	f7f7 fce2 	bl	80009e8 <__aeabi_dcmpgt>
 8009024:	b140      	cbz	r0, 8009038 <asin+0x40>
 8009026:	f000 fd27 	bl	8009a78 <__errno>
 800902a:	2321      	movs	r3, #33	; 0x21
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	4805      	ldr	r0, [pc, #20]	; (8009044 <asin+0x4c>)
 8009030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009034:	f000 bd1a 	b.w	8009a6c <nan>
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800903e:	bf00      	nop
 8009040:	3ff00000 	.word	0x3ff00000
 8009044:	0800b9c9 	.word	0x0800b9c9

08009048 <atan2>:
 8009048:	f000 b9fe 	b.w	8009448 <__ieee754_atan2>
 800904c:	0000      	movs	r0, r0
	...

08009050 <__ieee754_asin>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4bc4      	ldr	r3, [pc, #784]	; (8009368 <__ieee754_asin+0x318>)
 8009056:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800905a:	b087      	sub	sp, #28
 800905c:	429e      	cmp	r6, r3
 800905e:	4602      	mov	r2, r0
 8009060:	4604      	mov	r4, r0
 8009062:	460d      	mov	r5, r1
 8009064:	9105      	str	r1, [sp, #20]
 8009066:	dd29      	ble.n	80090bc <__ieee754_asin+0x6c>
 8009068:	4603      	mov	r3, r0
 800906a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800906e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009072:	4333      	orrs	r3, r6
 8009074:	d114      	bne.n	80090a0 <__ieee754_asin+0x50>
 8009076:	a3a2      	add	r3, pc, #648	; (adr r3, 8009300 <__ieee754_asin+0x2b0>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 fa24 	bl	80004c8 <__aeabi_dmul>
 8009080:	a3a1      	add	r3, pc, #644	; (adr r3, 8009308 <__ieee754_asin+0x2b8>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	4606      	mov	r6, r0
 8009088:	460f      	mov	r7, r1
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 fa1b 	bl	80004c8 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	f7f7 f85f 	bl	800015c <__adddf3>
 800909e:	e006      	b.n	80090ae <__ieee754_asin+0x5e>
 80090a0:	460b      	mov	r3, r1
 80090a2:	f7f7 f859 	bl	8000158 <__aeabi_dsub>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	f7f7 fb37 	bl	800071c <__aeabi_ddiv>
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	4620      	mov	r0, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	b007      	add	sp, #28
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	4bab      	ldr	r3, [pc, #684]	; (800936c <__ieee754_asin+0x31c>)
 80090be:	429e      	cmp	r6, r3
 80090c0:	dc0e      	bgt.n	80090e0 <__ieee754_asin+0x90>
 80090c2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80090c6:	f280 80ab 	bge.w	8009220 <__ieee754_asin+0x1d0>
 80090ca:	a391      	add	r3, pc, #580	; (adr r3, 8009310 <__ieee754_asin+0x2c0>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 f844 	bl	800015c <__adddf3>
 80090d4:	2200      	movs	r2, #0
 80090d6:	4ba6      	ldr	r3, [pc, #664]	; (8009370 <__ieee754_asin+0x320>)
 80090d8:	f7f7 fc86 	bl	80009e8 <__aeabi_dcmpgt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1e8      	bne.n	80090b2 <__ieee754_asin+0x62>
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f000 fcbe 	bl	8009a64 <fabs>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	2000      	movs	r0, #0
 80090ee:	49a0      	ldr	r1, [pc, #640]	; (8009370 <__ieee754_asin+0x320>)
 80090f0:	f7f7 f832 	bl	8000158 <__aeabi_dsub>
 80090f4:	2200      	movs	r2, #0
 80090f6:	4b9f      	ldr	r3, [pc, #636]	; (8009374 <__ieee754_asin+0x324>)
 80090f8:	f7f7 f9e6 	bl	80004c8 <__aeabi_dmul>
 80090fc:	a386      	add	r3, pc, #536	; (adr r3, 8009318 <__ieee754_asin+0x2c8>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	4604      	mov	r4, r0
 8009104:	460d      	mov	r5, r1
 8009106:	f7f7 f9df 	bl	80004c8 <__aeabi_dmul>
 800910a:	a385      	add	r3, pc, #532	; (adr r3, 8009320 <__ieee754_asin+0x2d0>)
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 f824 	bl	800015c <__adddf3>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 f9d6 	bl	80004c8 <__aeabi_dmul>
 800911c:	a382      	add	r3, pc, #520	; (adr r3, 8009328 <__ieee754_asin+0x2d8>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f7f7 f819 	bl	8000158 <__aeabi_dsub>
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	f7f7 f9cd 	bl	80004c8 <__aeabi_dmul>
 800912e:	a380      	add	r3, pc, #512	; (adr r3, 8009330 <__ieee754_asin+0x2e0>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 f812 	bl	800015c <__adddf3>
 8009138:	4622      	mov	r2, r4
 800913a:	462b      	mov	r3, r5
 800913c:	f7f7 f9c4 	bl	80004c8 <__aeabi_dmul>
 8009140:	a37d      	add	r3, pc, #500	; (adr r3, 8009338 <__ieee754_asin+0x2e8>)
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 f807 	bl	8000158 <__aeabi_dsub>
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	f7f7 f9bb 	bl	80004c8 <__aeabi_dmul>
 8009152:	a37b      	add	r3, pc, #492	; (adr r3, 8009340 <__ieee754_asin+0x2f0>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 f800 	bl	800015c <__adddf3>
 800915c:	4622      	mov	r2, r4
 800915e:	462b      	mov	r3, r5
 8009160:	f7f7 f9b2 	bl	80004c8 <__aeabi_dmul>
 8009164:	a378      	add	r3, pc, #480	; (adr r3, 8009348 <__ieee754_asin+0x2f8>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	e9cd 0100 	strd	r0, r1, [sp]
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f9a9 	bl	80004c8 <__aeabi_dmul>
 8009176:	a376      	add	r3, pc, #472	; (adr r3, 8009350 <__ieee754_asin+0x300>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f6 ffec 	bl	8000158 <__aeabi_dsub>
 8009180:	4622      	mov	r2, r4
 8009182:	462b      	mov	r3, r5
 8009184:	f7f7 f9a0 	bl	80004c8 <__aeabi_dmul>
 8009188:	a373      	add	r3, pc, #460	; (adr r3, 8009358 <__ieee754_asin+0x308>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f6 ffe5 	bl	800015c <__adddf3>
 8009192:	4622      	mov	r2, r4
 8009194:	462b      	mov	r3, r5
 8009196:	f7f7 f997 	bl	80004c8 <__aeabi_dmul>
 800919a:	a371      	add	r3, pc, #452	; (adr r3, 8009360 <__ieee754_asin+0x310>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f6 ffda 	bl	8000158 <__aeabi_dsub>
 80091a4:	4622      	mov	r2, r4
 80091a6:	462b      	mov	r3, r5
 80091a8:	f7f7 f98e 	bl	80004c8 <__aeabi_dmul>
 80091ac:	4b70      	ldr	r3, [pc, #448]	; (8009370 <__ieee754_asin+0x320>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7f6 ffd4 	bl	800015c <__adddf3>
 80091b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b8:	4620      	mov	r0, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	f000 fa16 	bl	80095ec <__ieee754_sqrt>
 80091c0:	4b6d      	ldr	r3, [pc, #436]	; (8009378 <__ieee754_asin+0x328>)
 80091c2:	4682      	mov	sl, r0
 80091c4:	429e      	cmp	r6, r3
 80091c6:	468b      	mov	fp, r1
 80091c8:	f340 80d8 	ble.w	800937c <__ieee754_asin+0x32c>
 80091cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091d4:	f7f7 faa2 	bl	800071c <__aeabi_ddiv>
 80091d8:	4652      	mov	r2, sl
 80091da:	465b      	mov	r3, fp
 80091dc:	f7f7 f974 	bl	80004c8 <__aeabi_dmul>
 80091e0:	4652      	mov	r2, sl
 80091e2:	465b      	mov	r3, fp
 80091e4:	f7f6 ffba 	bl	800015c <__adddf3>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	f7f6 ffb6 	bl	800015c <__adddf3>
 80091f0:	a345      	add	r3, pc, #276	; (adr r3, 8009308 <__ieee754_asin+0x2b8>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f6 ffaf 	bl	8000158 <__aeabi_dsub>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	a140      	add	r1, pc, #256	; (adr r1, 8009300 <__ieee754_asin+0x2b0>)
 8009200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009204:	f7f6 ffa8 	bl	8000158 <__aeabi_dsub>
 8009208:	9b05      	ldr	r3, [sp, #20]
 800920a:	4604      	mov	r4, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfdc      	itt	le
 8009210:	4602      	movle	r2, r0
 8009212:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009216:	460d      	mov	r5, r1
 8009218:	bfdc      	itt	le
 800921a:	4614      	movle	r4, r2
 800921c:	461d      	movle	r5, r3
 800921e:	e748      	b.n	80090b2 <__ieee754_asin+0x62>
 8009220:	460b      	mov	r3, r1
 8009222:	f7f7 f951 	bl	80004c8 <__aeabi_dmul>
 8009226:	a33c      	add	r3, pc, #240	; (adr r3, 8009318 <__ieee754_asin+0x2c8>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	4606      	mov	r6, r0
 800922e:	460f      	mov	r7, r1
 8009230:	f7f7 f94a 	bl	80004c8 <__aeabi_dmul>
 8009234:	a33a      	add	r3, pc, #232	; (adr r3, 8009320 <__ieee754_asin+0x2d0>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f6 ff8f 	bl	800015c <__adddf3>
 800923e:	4632      	mov	r2, r6
 8009240:	463b      	mov	r3, r7
 8009242:	f7f7 f941 	bl	80004c8 <__aeabi_dmul>
 8009246:	a338      	add	r3, pc, #224	; (adr r3, 8009328 <__ieee754_asin+0x2d8>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f6 ff84 	bl	8000158 <__aeabi_dsub>
 8009250:	4632      	mov	r2, r6
 8009252:	463b      	mov	r3, r7
 8009254:	f7f7 f938 	bl	80004c8 <__aeabi_dmul>
 8009258:	a335      	add	r3, pc, #212	; (adr r3, 8009330 <__ieee754_asin+0x2e0>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f6 ff7d 	bl	800015c <__adddf3>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f92f 	bl	80004c8 <__aeabi_dmul>
 800926a:	a333      	add	r3, pc, #204	; (adr r3, 8009338 <__ieee754_asin+0x2e8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f6 ff72 	bl	8000158 <__aeabi_dsub>
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	f7f7 f926 	bl	80004c8 <__aeabi_dmul>
 800927c:	a330      	add	r3, pc, #192	; (adr r3, 8009340 <__ieee754_asin+0x2f0>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 ff6b 	bl	800015c <__adddf3>
 8009286:	4632      	mov	r2, r6
 8009288:	463b      	mov	r3, r7
 800928a:	f7f7 f91d 	bl	80004c8 <__aeabi_dmul>
 800928e:	a32e      	add	r3, pc, #184	; (adr r3, 8009348 <__ieee754_asin+0x2f8>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	4680      	mov	r8, r0
 8009296:	4689      	mov	r9, r1
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 f914 	bl	80004c8 <__aeabi_dmul>
 80092a0:	a32b      	add	r3, pc, #172	; (adr r3, 8009350 <__ieee754_asin+0x300>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 ff57 	bl	8000158 <__aeabi_dsub>
 80092aa:	4632      	mov	r2, r6
 80092ac:	463b      	mov	r3, r7
 80092ae:	f7f7 f90b 	bl	80004c8 <__aeabi_dmul>
 80092b2:	a329      	add	r3, pc, #164	; (adr r3, 8009358 <__ieee754_asin+0x308>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f6 ff50 	bl	800015c <__adddf3>
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	f7f7 f902 	bl	80004c8 <__aeabi_dmul>
 80092c4:	a326      	add	r3, pc, #152	; (adr r3, 8009360 <__ieee754_asin+0x310>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 ff45 	bl	8000158 <__aeabi_dsub>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	f7f7 f8f9 	bl	80004c8 <__aeabi_dmul>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b25      	ldr	r3, [pc, #148]	; (8009370 <__ieee754_asin+0x320>)
 80092da:	f7f6 ff3f 	bl	800015c <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 fa19 	bl	800071c <__aeabi_ddiv>
 80092ea:	4622      	mov	r2, r4
 80092ec:	462b      	mov	r3, r5
 80092ee:	f7f7 f8eb 	bl	80004c8 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	e6ce      	b.n	800909a <__ieee754_asin+0x4a>
 80092fc:	f3af 8000 	nop.w
 8009300:	54442d18 	.word	0x54442d18
 8009304:	3ff921fb 	.word	0x3ff921fb
 8009308:	33145c07 	.word	0x33145c07
 800930c:	3c91a626 	.word	0x3c91a626
 8009310:	8800759c 	.word	0x8800759c
 8009314:	7e37e43c 	.word	0x7e37e43c
 8009318:	0dfdf709 	.word	0x0dfdf709
 800931c:	3f023de1 	.word	0x3f023de1
 8009320:	7501b288 	.word	0x7501b288
 8009324:	3f49efe0 	.word	0x3f49efe0
 8009328:	b5688f3b 	.word	0xb5688f3b
 800932c:	3fa48228 	.word	0x3fa48228
 8009330:	0e884455 	.word	0x0e884455
 8009334:	3fc9c155 	.word	0x3fc9c155
 8009338:	03eb6f7d 	.word	0x03eb6f7d
 800933c:	3fd4d612 	.word	0x3fd4d612
 8009340:	55555555 	.word	0x55555555
 8009344:	3fc55555 	.word	0x3fc55555
 8009348:	b12e9282 	.word	0xb12e9282
 800934c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009350:	1b8d0159 	.word	0x1b8d0159
 8009354:	3fe6066c 	.word	0x3fe6066c
 8009358:	9c598ac8 	.word	0x9c598ac8
 800935c:	40002ae5 	.word	0x40002ae5
 8009360:	1c8a2d4b 	.word	0x1c8a2d4b
 8009364:	40033a27 	.word	0x40033a27
 8009368:	3fefffff 	.word	0x3fefffff
 800936c:	3fdfffff 	.word	0x3fdfffff
 8009370:	3ff00000 	.word	0x3ff00000
 8009374:	3fe00000 	.word	0x3fe00000
 8009378:	3fef3332 	.word	0x3fef3332
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	f7f6 feec 	bl	800015c <__adddf3>
 8009384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009388:	4606      	mov	r6, r0
 800938a:	460f      	mov	r7, r1
 800938c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009390:	f7f7 f9c4 	bl	800071c <__aeabi_ddiv>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 f894 	bl	80004c8 <__aeabi_dmul>
 80093a0:	f04f 0800 	mov.w	r8, #0
 80093a4:	4606      	mov	r6, r0
 80093a6:	460f      	mov	r7, r1
 80093a8:	4642      	mov	r2, r8
 80093aa:	465b      	mov	r3, fp
 80093ac:	4640      	mov	r0, r8
 80093ae:	4659      	mov	r1, fp
 80093b0:	f7f7 f88a 	bl	80004c8 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 fecc 	bl	8000158 <__aeabi_dsub>
 80093c0:	4642      	mov	r2, r8
 80093c2:	4604      	mov	r4, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	465b      	mov	r3, fp
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	f7f6 fec6 	bl	800015c <__adddf3>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f9a0 	bl	800071c <__aeabi_ddiv>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	f7f6 febc 	bl	800015c <__adddf3>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	a113      	add	r1, pc, #76	; (adr r1, 8009438 <__ieee754_asin+0x3e8>)
 80093ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ee:	f7f6 feb3 	bl	8000158 <__aeabi_dsub>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4630      	mov	r0, r6
 80093f8:	4639      	mov	r1, r7
 80093fa:	f7f6 fead 	bl	8000158 <__aeabi_dsub>
 80093fe:	4642      	mov	r2, r8
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	465b      	mov	r3, fp
 8009406:	4640      	mov	r0, r8
 8009408:	4659      	mov	r1, fp
 800940a:	f7f6 fea7 	bl	800015c <__adddf3>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	a10b      	add	r1, pc, #44	; (adr r1, 8009440 <__ieee754_asin+0x3f0>)
 8009414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009418:	f7f6 fe9e 	bl	8000158 <__aeabi_dsub>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	f7f6 fe98 	bl	8000158 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	a104      	add	r1, pc, #16	; (adr r1, 8009440 <__ieee754_asin+0x3f0>)
 800942e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009432:	e6e7      	b.n	8009204 <__ieee754_asin+0x1b4>
 8009434:	f3af 8000 	nop.w
 8009438:	33145c07 	.word	0x33145c07
 800943c:	3c91a626 	.word	0x3c91a626
 8009440:	54442d18 	.word	0x54442d18
 8009444:	3fe921fb 	.word	0x3fe921fb

08009448 <__ieee754_atan2>:
 8009448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	4692      	mov	sl, r2
 800944e:	4699      	mov	r9, r3
 8009450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009454:	461f      	mov	r7, r3
 8009456:	f1ca 0300 	rsb	r3, sl, #0
 800945a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80095e0 <__ieee754_atan2+0x198>
 800945e:	ea43 030a 	orr.w	r3, r3, sl
 8009462:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009466:	4573      	cmp	r3, lr
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	d808      	bhi.n	8009480 <__ieee754_atan2+0x38>
 800946e:	4246      	negs	r6, r0
 8009470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009474:	4306      	orrs	r6, r0
 8009476:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800947a:	4576      	cmp	r6, lr
 800947c:	468c      	mov	ip, r1
 800947e:	d908      	bls.n	8009492 <__ieee754_atan2+0x4a>
 8009480:	4652      	mov	r2, sl
 8009482:	464b      	mov	r3, r9
 8009484:	4620      	mov	r0, r4
 8009486:	4629      	mov	r1, r5
 8009488:	f7f6 fe68 	bl	800015c <__adddf3>
 800948c:	4604      	mov	r4, r0
 800948e:	460d      	mov	r5, r1
 8009490:	e019      	b.n	80094c6 <__ieee754_atan2+0x7e>
 8009492:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8009496:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800949a:	ea56 060a 	orrs.w	r6, r6, sl
 800949e:	d103      	bne.n	80094a8 <__ieee754_atan2+0x60>
 80094a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	f000 b954 	b.w	8009750 <atan>
 80094a8:	17be      	asrs	r6, r7, #30
 80094aa:	f006 0602 	and.w	r6, r6, #2
 80094ae:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80094b2:	ea53 0100 	orrs.w	r1, r3, r0
 80094b6:	d10a      	bne.n	80094ce <__ieee754_atan2+0x86>
 80094b8:	2e02      	cmp	r6, #2
 80094ba:	d067      	beq.n	800958c <__ieee754_atan2+0x144>
 80094bc:	2e03      	cmp	r6, #3
 80094be:	d102      	bne.n	80094c6 <__ieee754_atan2+0x7e>
 80094c0:	a53b      	add	r5, pc, #236	; (adr r5, 80095b0 <__ieee754_atan2+0x168>)
 80094c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	ea52 010a 	orrs.w	r1, r2, sl
 80094d2:	d106      	bne.n	80094e2 <__ieee754_atan2+0x9a>
 80094d4:	f1bc 0f00 	cmp.w	ip, #0
 80094d8:	da63      	bge.n	80095a2 <__ieee754_atan2+0x15a>
 80094da:	a537      	add	r5, pc, #220	; (adr r5, 80095b8 <__ieee754_atan2+0x170>)
 80094dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094e0:	e7f1      	b.n	80094c6 <__ieee754_atan2+0x7e>
 80094e2:	4572      	cmp	r2, lr
 80094e4:	d10f      	bne.n	8009506 <__ieee754_atan2+0xbe>
 80094e6:	4293      	cmp	r3, r2
 80094e8:	f106 36ff 	add.w	r6, r6, #4294967295
 80094ec:	d107      	bne.n	80094fe <__ieee754_atan2+0xb6>
 80094ee:	2e02      	cmp	r6, #2
 80094f0:	d850      	bhi.n	8009594 <__ieee754_atan2+0x14c>
 80094f2:	4b3c      	ldr	r3, [pc, #240]	; (80095e4 <__ieee754_atan2+0x19c>)
 80094f4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80094f8:	e9d6 4500 	ldrd	r4, r5, [r6]
 80094fc:	e7e3      	b.n	80094c6 <__ieee754_atan2+0x7e>
 80094fe:	2e02      	cmp	r6, #2
 8009500:	d84c      	bhi.n	800959c <__ieee754_atan2+0x154>
 8009502:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <__ieee754_atan2+0x1a0>)
 8009504:	e7f6      	b.n	80094f4 <__ieee754_atan2+0xac>
 8009506:	4573      	cmp	r3, lr
 8009508:	d0e4      	beq.n	80094d4 <__ieee754_atan2+0x8c>
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009510:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009514:	da20      	bge.n	8009558 <__ieee754_atan2+0x110>
 8009516:	2f00      	cmp	r7, #0
 8009518:	da01      	bge.n	800951e <__ieee754_atan2+0xd6>
 800951a:	323c      	adds	r2, #60	; 0x3c
 800951c:	db20      	blt.n	8009560 <__ieee754_atan2+0x118>
 800951e:	4652      	mov	r2, sl
 8009520:	464b      	mov	r3, r9
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7f7 f8f9 	bl	800071c <__aeabi_ddiv>
 800952a:	f000 fa9b 	bl	8009a64 <fabs>
 800952e:	f000 f90f 	bl	8009750 <atan>
 8009532:	4604      	mov	r4, r0
 8009534:	460d      	mov	r5, r1
 8009536:	2e01      	cmp	r6, #1
 8009538:	d015      	beq.n	8009566 <__ieee754_atan2+0x11e>
 800953a:	2e02      	cmp	r6, #2
 800953c:	d017      	beq.n	800956e <__ieee754_atan2+0x126>
 800953e:	2e00      	cmp	r6, #0
 8009540:	d0c1      	beq.n	80094c6 <__ieee754_atan2+0x7e>
 8009542:	a31f      	add	r3, pc, #124	; (adr r3, 80095c0 <__ieee754_atan2+0x178>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 fe04 	bl	8000158 <__aeabi_dsub>
 8009550:	a31d      	add	r3, pc, #116	; (adr r3, 80095c8 <__ieee754_atan2+0x180>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	e016      	b.n	8009586 <__ieee754_atan2+0x13e>
 8009558:	a51d      	add	r5, pc, #116	; (adr r5, 80095d0 <__ieee754_atan2+0x188>)
 800955a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800955e:	e7ea      	b.n	8009536 <__ieee754_atan2+0xee>
 8009560:	2400      	movs	r4, #0
 8009562:	2500      	movs	r5, #0
 8009564:	e7e7      	b.n	8009536 <__ieee754_atan2+0xee>
 8009566:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800956a:	461d      	mov	r5, r3
 800956c:	e7ab      	b.n	80094c6 <__ieee754_atan2+0x7e>
 800956e:	a314      	add	r3, pc, #80	; (adr r3, 80095c0 <__ieee754_atan2+0x178>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f6 fdee 	bl	8000158 <__aeabi_dsub>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	a111      	add	r1, pc, #68	; (adr r1, 80095c8 <__ieee754_atan2+0x180>)
 8009582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009586:	f7f6 fde7 	bl	8000158 <__aeabi_dsub>
 800958a:	e77f      	b.n	800948c <__ieee754_atan2+0x44>
 800958c:	a50e      	add	r5, pc, #56	; (adr r5, 80095c8 <__ieee754_atan2+0x180>)
 800958e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009592:	e798      	b.n	80094c6 <__ieee754_atan2+0x7e>
 8009594:	a510      	add	r5, pc, #64	; (adr r5, 80095d8 <__ieee754_atan2+0x190>)
 8009596:	e9d5 4500 	ldrd	r4, r5, [r5]
 800959a:	e794      	b.n	80094c6 <__ieee754_atan2+0x7e>
 800959c:	2400      	movs	r4, #0
 800959e:	2500      	movs	r5, #0
 80095a0:	e791      	b.n	80094c6 <__ieee754_atan2+0x7e>
 80095a2:	a50b      	add	r5, pc, #44	; (adr r5, 80095d0 <__ieee754_atan2+0x188>)
 80095a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095a8:	e78d      	b.n	80094c6 <__ieee754_atan2+0x7e>
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w
 80095b0:	54442d18 	.word	0x54442d18
 80095b4:	c00921fb 	.word	0xc00921fb
 80095b8:	54442d18 	.word	0x54442d18
 80095bc:	bff921fb 	.word	0xbff921fb
 80095c0:	33145c07 	.word	0x33145c07
 80095c4:	3ca1a626 	.word	0x3ca1a626
 80095c8:	54442d18 	.word	0x54442d18
 80095cc:	400921fb 	.word	0x400921fb
 80095d0:	54442d18 	.word	0x54442d18
 80095d4:	3ff921fb 	.word	0x3ff921fb
 80095d8:	54442d18 	.word	0x54442d18
 80095dc:	3fe921fb 	.word	0x3fe921fb
 80095e0:	7ff00000 	.word	0x7ff00000
 80095e4:	0800b8a8 	.word	0x0800b8a8
 80095e8:	0800b8c0 	.word	0x0800b8c0

080095ec <__ieee754_sqrt>:
 80095ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009748 <__ieee754_sqrt+0x15c>
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80095f8:	4606      	mov	r6, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	460c      	mov	r4, r1
 80095fe:	460a      	mov	r2, r1
 8009600:	4607      	mov	r7, r0
 8009602:	4603      	mov	r3, r0
 8009604:	d10f      	bne.n	8009626 <__ieee754_sqrt+0x3a>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	f7f6 ff5d 	bl	80004c8 <__aeabi_dmul>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4630      	mov	r0, r6
 8009614:	4629      	mov	r1, r5
 8009616:	f7f6 fda1 	bl	800015c <__adddf3>
 800961a:	4606      	mov	r6, r0
 800961c:	460d      	mov	r5, r1
 800961e:	4630      	mov	r0, r6
 8009620:	4629      	mov	r1, r5
 8009622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009626:	2900      	cmp	r1, #0
 8009628:	dc0e      	bgt.n	8009648 <__ieee754_sqrt+0x5c>
 800962a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800962e:	ea5c 0707 	orrs.w	r7, ip, r7
 8009632:	d0f4      	beq.n	800961e <__ieee754_sqrt+0x32>
 8009634:	b141      	cbz	r1, 8009648 <__ieee754_sqrt+0x5c>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	f7f6 fd8d 	bl	8000158 <__aeabi_dsub>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	f7f7 f86b 	bl	800071c <__aeabi_ddiv>
 8009646:	e7e8      	b.n	800961a <__ieee754_sqrt+0x2e>
 8009648:	1521      	asrs	r1, r4, #20
 800964a:	d075      	beq.n	8009738 <__ieee754_sqrt+0x14c>
 800964c:	07cc      	lsls	r4, r1, #31
 800964e:	f04f 0400 	mov.w	r4, #0
 8009652:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009656:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800965a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800965e:	bf5e      	ittt	pl
 8009660:	0fd9      	lsrpl	r1, r3, #31
 8009662:	005b      	lslpl	r3, r3, #1
 8009664:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009668:	0fd9      	lsrs	r1, r3, #31
 800966a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800966e:	2516      	movs	r5, #22
 8009670:	4620      	mov	r0, r4
 8009672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009676:	107f      	asrs	r7, r7, #1
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	1846      	adds	r6, r0, r1
 800967c:	4296      	cmp	r6, r2
 800967e:	bfde      	ittt	le
 8009680:	1b92      	suble	r2, r2, r6
 8009682:	1870      	addle	r0, r6, r1
 8009684:	1864      	addle	r4, r4, r1
 8009686:	0052      	lsls	r2, r2, #1
 8009688:	3d01      	subs	r5, #1
 800968a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800968e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009692:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009696:	d1f0      	bne.n	800967a <__ieee754_sqrt+0x8e>
 8009698:	4629      	mov	r1, r5
 800969a:	f04f 0e20 	mov.w	lr, #32
 800969e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096a2:	4282      	cmp	r2, r0
 80096a4:	eb06 0c05 	add.w	ip, r6, r5
 80096a8:	dc02      	bgt.n	80096b0 <__ieee754_sqrt+0xc4>
 80096aa:	d113      	bne.n	80096d4 <__ieee754_sqrt+0xe8>
 80096ac:	459c      	cmp	ip, r3
 80096ae:	d811      	bhi.n	80096d4 <__ieee754_sqrt+0xe8>
 80096b0:	f1bc 0f00 	cmp.w	ip, #0
 80096b4:	eb0c 0506 	add.w	r5, ip, r6
 80096b8:	da43      	bge.n	8009742 <__ieee754_sqrt+0x156>
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	db41      	blt.n	8009742 <__ieee754_sqrt+0x156>
 80096be:	f100 0801 	add.w	r8, r0, #1
 80096c2:	1a12      	subs	r2, r2, r0
 80096c4:	4640      	mov	r0, r8
 80096c6:	459c      	cmp	ip, r3
 80096c8:	bf88      	it	hi
 80096ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096ce:	eba3 030c 	sub.w	r3, r3, ip
 80096d2:	4431      	add	r1, r6
 80096d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80096d8:	f1be 0e01 	subs.w	lr, lr, #1
 80096dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80096e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096e8:	d1db      	bne.n	80096a2 <__ieee754_sqrt+0xb6>
 80096ea:	4313      	orrs	r3, r2
 80096ec:	d006      	beq.n	80096fc <__ieee754_sqrt+0x110>
 80096ee:	1c48      	adds	r0, r1, #1
 80096f0:	bf0b      	itete	eq
 80096f2:	4671      	moveq	r1, lr
 80096f4:	3101      	addne	r1, #1
 80096f6:	3401      	addeq	r4, #1
 80096f8:	f021 0101 	bicne.w	r1, r1, #1
 80096fc:	1063      	asrs	r3, r4, #1
 80096fe:	0849      	lsrs	r1, r1, #1
 8009700:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009704:	07e2      	lsls	r2, r4, #31
 8009706:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800970a:	bf48      	it	mi
 800970c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009710:	460e      	mov	r6, r1
 8009712:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009716:	e782      	b.n	800961e <__ieee754_sqrt+0x32>
 8009718:	0ada      	lsrs	r2, r3, #11
 800971a:	3815      	subs	r0, #21
 800971c:	055b      	lsls	r3, r3, #21
 800971e:	2a00      	cmp	r2, #0
 8009720:	d0fa      	beq.n	8009718 <__ieee754_sqrt+0x12c>
 8009722:	02d5      	lsls	r5, r2, #11
 8009724:	d50a      	bpl.n	800973c <__ieee754_sqrt+0x150>
 8009726:	f1c1 0420 	rsb	r4, r1, #32
 800972a:	fa23 f404 	lsr.w	r4, r3, r4
 800972e:	1e4d      	subs	r5, r1, #1
 8009730:	408b      	lsls	r3, r1
 8009732:	4322      	orrs	r2, r4
 8009734:	1b41      	subs	r1, r0, r5
 8009736:	e789      	b.n	800964c <__ieee754_sqrt+0x60>
 8009738:	4608      	mov	r0, r1
 800973a:	e7f0      	b.n	800971e <__ieee754_sqrt+0x132>
 800973c:	0052      	lsls	r2, r2, #1
 800973e:	3101      	adds	r1, #1
 8009740:	e7ef      	b.n	8009722 <__ieee754_sqrt+0x136>
 8009742:	4680      	mov	r8, r0
 8009744:	e7bd      	b.n	80096c2 <__ieee754_sqrt+0xd6>
 8009746:	bf00      	nop
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	00000000 	.word	0x00000000

08009750 <atan>:
 8009750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	4bb6      	ldr	r3, [pc, #728]	; (8009a30 <atan+0x2e0>)
 8009756:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800975a:	429e      	cmp	r6, r3
 800975c:	4604      	mov	r4, r0
 800975e:	460d      	mov	r5, r1
 8009760:	468b      	mov	fp, r1
 8009762:	dd17      	ble.n	8009794 <atan+0x44>
 8009764:	4bb3      	ldr	r3, [pc, #716]	; (8009a34 <atan+0x2e4>)
 8009766:	429e      	cmp	r6, r3
 8009768:	dc01      	bgt.n	800976e <atan+0x1e>
 800976a:	d109      	bne.n	8009780 <atan+0x30>
 800976c:	b140      	cbz	r0, 8009780 <atan+0x30>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f7f6 fcf1 	bl	800015c <__adddf3>
 800977a:	4604      	mov	r4, r0
 800977c:	460d      	mov	r5, r1
 800977e:	e005      	b.n	800978c <atan+0x3c>
 8009780:	f1bb 0f00 	cmp.w	fp, #0
 8009784:	4cac      	ldr	r4, [pc, #688]	; (8009a38 <atan+0x2e8>)
 8009786:	f300 8121 	bgt.w	80099cc <atan+0x27c>
 800978a:	4dac      	ldr	r5, [pc, #688]	; (8009a3c <atan+0x2ec>)
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	4baa      	ldr	r3, [pc, #680]	; (8009a40 <atan+0x2f0>)
 8009796:	429e      	cmp	r6, r3
 8009798:	dc11      	bgt.n	80097be <atan+0x6e>
 800979a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800979e:	429e      	cmp	r6, r3
 80097a0:	dc0a      	bgt.n	80097b8 <atan+0x68>
 80097a2:	a38b      	add	r3, pc, #556	; (adr r3, 80099d0 <atan+0x280>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fcd8 	bl	800015c <__adddf3>
 80097ac:	2200      	movs	r2, #0
 80097ae:	4ba5      	ldr	r3, [pc, #660]	; (8009a44 <atan+0x2f4>)
 80097b0:	f7f7 f91a 	bl	80009e8 <__aeabi_dcmpgt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1e9      	bne.n	800978c <atan+0x3c>
 80097b8:	f04f 3aff 	mov.w	sl, #4294967295
 80097bc:	e027      	b.n	800980e <atan+0xbe>
 80097be:	f000 f951 	bl	8009a64 <fabs>
 80097c2:	4ba1      	ldr	r3, [pc, #644]	; (8009a48 <atan+0x2f8>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	429e      	cmp	r6, r3
 80097c8:	460d      	mov	r5, r1
 80097ca:	f300 80b8 	bgt.w	800993e <atan+0x1ee>
 80097ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097d2:	429e      	cmp	r6, r3
 80097d4:	f300 809c 	bgt.w	8009910 <atan+0x1c0>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	f7f6 fcbe 	bl	800015c <__adddf3>
 80097e0:	2200      	movs	r2, #0
 80097e2:	4b98      	ldr	r3, [pc, #608]	; (8009a44 <atan+0x2f4>)
 80097e4:	f7f6 fcb8 	bl	8000158 <__aeabi_dsub>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4606      	mov	r6, r0
 80097ec:	460f      	mov	r7, r1
 80097ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7f6 fcb1 	bl	800015c <__adddf3>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	f7f6 ff8b 	bl	800071c <__aeabi_ddiv>
 8009806:	f04f 0a00 	mov.w	sl, #0
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fe57 	bl	80004c8 <__aeabi_dmul>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4680      	mov	r8, r0
 8009820:	4689      	mov	r9, r1
 8009822:	f7f6 fe51 	bl	80004c8 <__aeabi_dmul>
 8009826:	a36c      	add	r3, pc, #432	; (adr r3, 80099d8 <atan+0x288>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	f7f6 fe4a 	bl	80004c8 <__aeabi_dmul>
 8009834:	a36a      	add	r3, pc, #424	; (adr r3, 80099e0 <atan+0x290>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fc8f 	bl	800015c <__adddf3>
 800983e:	4632      	mov	r2, r6
 8009840:	463b      	mov	r3, r7
 8009842:	f7f6 fe41 	bl	80004c8 <__aeabi_dmul>
 8009846:	a368      	add	r3, pc, #416	; (adr r3, 80099e8 <atan+0x298>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fc86 	bl	800015c <__adddf3>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	f7f6 fe38 	bl	80004c8 <__aeabi_dmul>
 8009858:	a365      	add	r3, pc, #404	; (adr r3, 80099f0 <atan+0x2a0>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fc7d 	bl	800015c <__adddf3>
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	f7f6 fe2f 	bl	80004c8 <__aeabi_dmul>
 800986a:	a363      	add	r3, pc, #396	; (adr r3, 80099f8 <atan+0x2a8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fc74 	bl	800015c <__adddf3>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe26 	bl	80004c8 <__aeabi_dmul>
 800987c:	a360      	add	r3, pc, #384	; (adr r3, 8009a00 <atan+0x2b0>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fc6b 	bl	800015c <__adddf3>
 8009886:	4642      	mov	r2, r8
 8009888:	464b      	mov	r3, r9
 800988a:	f7f6 fe1d 	bl	80004c8 <__aeabi_dmul>
 800988e:	a35e      	add	r3, pc, #376	; (adr r3, 8009a08 <atan+0x2b8>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	4680      	mov	r8, r0
 8009896:	4689      	mov	r9, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f6 fe14 	bl	80004c8 <__aeabi_dmul>
 80098a0:	a35b      	add	r3, pc, #364	; (adr r3, 8009a10 <atan+0x2c0>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 fc57 	bl	8000158 <__aeabi_dsub>
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	f7f6 fe0b 	bl	80004c8 <__aeabi_dmul>
 80098b2:	a359      	add	r3, pc, #356	; (adr r3, 8009a18 <atan+0x2c8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fc4e 	bl	8000158 <__aeabi_dsub>
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	f7f6 fe02 	bl	80004c8 <__aeabi_dmul>
 80098c4:	a356      	add	r3, pc, #344	; (adr r3, 8009a20 <atan+0x2d0>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fc45 	bl	8000158 <__aeabi_dsub>
 80098ce:	4632      	mov	r2, r6
 80098d0:	463b      	mov	r3, r7
 80098d2:	f7f6 fdf9 	bl	80004c8 <__aeabi_dmul>
 80098d6:	a354      	add	r3, pc, #336	; (adr r3, 8009a28 <atan+0x2d8>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 fc3c 	bl	8000158 <__aeabi_dsub>
 80098e0:	4632      	mov	r2, r6
 80098e2:	463b      	mov	r3, r7
 80098e4:	f7f6 fdf0 	bl	80004c8 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4640      	mov	r0, r8
 80098ee:	4649      	mov	r1, r9
 80098f0:	f7f6 fc34 	bl	800015c <__adddf3>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	f7f6 fde6 	bl	80004c8 <__aeabi_dmul>
 80098fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	d144      	bne.n	8009990 <atan+0x240>
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fc25 	bl	8000158 <__aeabi_dsub>
 800990e:	e734      	b.n	800977a <atan+0x2a>
 8009910:	2200      	movs	r2, #0
 8009912:	4b4c      	ldr	r3, [pc, #304]	; (8009a44 <atan+0x2f4>)
 8009914:	f7f6 fc20 	bl	8000158 <__aeabi_dsub>
 8009918:	2200      	movs	r2, #0
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	4620      	mov	r0, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4b48      	ldr	r3, [pc, #288]	; (8009a44 <atan+0x2f4>)
 8009924:	f7f6 fc1a 	bl	800015c <__adddf3>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 fef4 	bl	800071c <__aeabi_ddiv>
 8009934:	f04f 0a01 	mov.w	sl, #1
 8009938:	4604      	mov	r4, r0
 800993a:	460d      	mov	r5, r1
 800993c:	e767      	b.n	800980e <atan+0xbe>
 800993e:	4b43      	ldr	r3, [pc, #268]	; (8009a4c <atan+0x2fc>)
 8009940:	429e      	cmp	r6, r3
 8009942:	da1a      	bge.n	800997a <atan+0x22a>
 8009944:	2200      	movs	r2, #0
 8009946:	4b42      	ldr	r3, [pc, #264]	; (8009a50 <atan+0x300>)
 8009948:	f7f6 fc06 	bl	8000158 <__aeabi_dsub>
 800994c:	2200      	movs	r2, #0
 800994e:	4606      	mov	r6, r0
 8009950:	460f      	mov	r7, r1
 8009952:	4620      	mov	r0, r4
 8009954:	4629      	mov	r1, r5
 8009956:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <atan+0x300>)
 8009958:	f7f6 fdb6 	bl	80004c8 <__aeabi_dmul>
 800995c:	2200      	movs	r2, #0
 800995e:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <atan+0x2f4>)
 8009960:	f7f6 fbfc 	bl	800015c <__adddf3>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f6 fed6 	bl	800071c <__aeabi_ddiv>
 8009970:	f04f 0a02 	mov.w	sl, #2
 8009974:	4604      	mov	r4, r0
 8009976:	460d      	mov	r5, r1
 8009978:	e749      	b.n	800980e <atan+0xbe>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	2000      	movs	r0, #0
 8009980:	4934      	ldr	r1, [pc, #208]	; (8009a54 <atan+0x304>)
 8009982:	f7f6 fecb 	bl	800071c <__aeabi_ddiv>
 8009986:	f04f 0a03 	mov.w	sl, #3
 800998a:	4604      	mov	r4, r0
 800998c:	460d      	mov	r5, r1
 800998e:	e73e      	b.n	800980e <atan+0xbe>
 8009990:	4b31      	ldr	r3, [pc, #196]	; (8009a58 <atan+0x308>)
 8009992:	4e32      	ldr	r6, [pc, #200]	; (8009a5c <atan+0x30c>)
 8009994:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009998:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800999c:	e9da 2300 	ldrd	r2, r3, [sl]
 80099a0:	f7f6 fbda 	bl	8000158 <__aeabi_dsub>
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	f7f6 fbd6 	bl	8000158 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099b4:	f7f6 fbd0 	bl	8000158 <__aeabi_dsub>
 80099b8:	f1bb 0f00 	cmp.w	fp, #0
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	f6bf aee4 	bge.w	800978c <atan+0x3c>
 80099c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099c8:	461d      	mov	r5, r3
 80099ca:	e6df      	b.n	800978c <atan+0x3c>
 80099cc:	4d24      	ldr	r5, [pc, #144]	; (8009a60 <atan+0x310>)
 80099ce:	e6dd      	b.n	800978c <atan+0x3c>
 80099d0:	8800759c 	.word	0x8800759c
 80099d4:	7e37e43c 	.word	0x7e37e43c
 80099d8:	e322da11 	.word	0xe322da11
 80099dc:	3f90ad3a 	.word	0x3f90ad3a
 80099e0:	24760deb 	.word	0x24760deb
 80099e4:	3fa97b4b 	.word	0x3fa97b4b
 80099e8:	a0d03d51 	.word	0xa0d03d51
 80099ec:	3fb10d66 	.word	0x3fb10d66
 80099f0:	c54c206e 	.word	0xc54c206e
 80099f4:	3fb745cd 	.word	0x3fb745cd
 80099f8:	920083ff 	.word	0x920083ff
 80099fc:	3fc24924 	.word	0x3fc24924
 8009a00:	5555550d 	.word	0x5555550d
 8009a04:	3fd55555 	.word	0x3fd55555
 8009a08:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a0c:	bfa2b444 	.word	0xbfa2b444
 8009a10:	52defd9a 	.word	0x52defd9a
 8009a14:	3fadde2d 	.word	0x3fadde2d
 8009a18:	af749a6d 	.word	0xaf749a6d
 8009a1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a20:	fe231671 	.word	0xfe231671
 8009a24:	3fbc71c6 	.word	0x3fbc71c6
 8009a28:	9998ebc4 	.word	0x9998ebc4
 8009a2c:	3fc99999 	.word	0x3fc99999
 8009a30:	440fffff 	.word	0x440fffff
 8009a34:	7ff00000 	.word	0x7ff00000
 8009a38:	54442d18 	.word	0x54442d18
 8009a3c:	bff921fb 	.word	0xbff921fb
 8009a40:	3fdbffff 	.word	0x3fdbffff
 8009a44:	3ff00000 	.word	0x3ff00000
 8009a48:	3ff2ffff 	.word	0x3ff2ffff
 8009a4c:	40038000 	.word	0x40038000
 8009a50:	3ff80000 	.word	0x3ff80000
 8009a54:	bff00000 	.word	0xbff00000
 8009a58:	0800b8f8 	.word	0x0800b8f8
 8009a5c:	0800b8d8 	.word	0x0800b8d8
 8009a60:	3ff921fb 	.word	0x3ff921fb

08009a64 <fabs>:
 8009a64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a68:	4770      	bx	lr
	...

08009a6c <nan>:
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4901      	ldr	r1, [pc, #4]	; (8009a74 <nan+0x8>)
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	7ff80000 	.word	0x7ff80000

08009a78 <__errno>:
 8009a78:	4b01      	ldr	r3, [pc, #4]	; (8009a80 <__errno+0x8>)
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	20000044 	.word	0x20000044

08009a84 <__libc_init_array>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	2600      	movs	r6, #0
 8009a88:	4d0c      	ldr	r5, [pc, #48]	; (8009abc <__libc_init_array+0x38>)
 8009a8a:	4c0d      	ldr	r4, [pc, #52]	; (8009ac0 <__libc_init_array+0x3c>)
 8009a8c:	1b64      	subs	r4, r4, r5
 8009a8e:	10a4      	asrs	r4, r4, #2
 8009a90:	42a6      	cmp	r6, r4
 8009a92:	d109      	bne.n	8009aa8 <__libc_init_array+0x24>
 8009a94:	f001 f870 	bl	800ab78 <_init>
 8009a98:	2600      	movs	r6, #0
 8009a9a:	4d0a      	ldr	r5, [pc, #40]	; (8009ac4 <__libc_init_array+0x40>)
 8009a9c:	4c0a      	ldr	r4, [pc, #40]	; (8009ac8 <__libc_init_array+0x44>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	d105      	bne.n	8009ab2 <__libc_init_array+0x2e>
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aac:	4798      	blx	r3
 8009aae:	3601      	adds	r6, #1
 8009ab0:	e7ee      	b.n	8009a90 <__libc_init_array+0xc>
 8009ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab6:	4798      	blx	r3
 8009ab8:	3601      	adds	r6, #1
 8009aba:	e7f2      	b.n	8009aa2 <__libc_init_array+0x1e>
 8009abc:	0800ba60 	.word	0x0800ba60
 8009ac0:	0800ba60 	.word	0x0800ba60
 8009ac4:	0800ba60 	.word	0x0800ba60
 8009ac8:	0800ba64 	.word	0x0800ba64

08009acc <memcmp>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	3901      	subs	r1, #1
 8009ad0:	4402      	add	r2, r0
 8009ad2:	4290      	cmp	r0, r2
 8009ad4:	d101      	bne.n	8009ada <memcmp+0xe>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	e005      	b.n	8009ae6 <memcmp+0x1a>
 8009ada:	7803      	ldrb	r3, [r0, #0]
 8009adc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d001      	beq.n	8009ae8 <memcmp+0x1c>
 8009ae4:	1b18      	subs	r0, r3, r4
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	3001      	adds	r0, #1
 8009aea:	e7f2      	b.n	8009ad2 <memcmp+0x6>

08009aec <memset>:
 8009aec:	4603      	mov	r3, r0
 8009aee:	4402      	add	r2, r0
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d100      	bne.n	8009af6 <memset+0xa>
 8009af4:	4770      	bx	lr
 8009af6:	f803 1b01 	strb.w	r1, [r3], #1
 8009afa:	e7f9      	b.n	8009af0 <memset+0x4>

08009afc <rand>:
 8009afc:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <rand+0x5c>)
 8009afe:	b510      	push	{r4, lr}
 8009b00:	681c      	ldr	r4, [r3, #0]
 8009b02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b04:	b9b3      	cbnz	r3, 8009b34 <rand+0x38>
 8009b06:	2018      	movs	r0, #24
 8009b08:	f000 f866 	bl	8009bd8 <malloc>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	63a0      	str	r0, [r4, #56]	; 0x38
 8009b10:	b920      	cbnz	r0, 8009b1c <rand+0x20>
 8009b12:	214e      	movs	r1, #78	; 0x4e
 8009b14:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <rand+0x60>)
 8009b16:	4812      	ldr	r0, [pc, #72]	; (8009b60 <rand+0x64>)
 8009b18:	f000 f82e 	bl	8009b78 <__assert_func>
 8009b1c:	4911      	ldr	r1, [pc, #68]	; (8009b64 <rand+0x68>)
 8009b1e:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <rand+0x6c>)
 8009b20:	e9c0 1300 	strd	r1, r3, [r0]
 8009b24:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <rand+0x70>)
 8009b26:	2100      	movs	r1, #0
 8009b28:	6083      	str	r3, [r0, #8]
 8009b2a:	230b      	movs	r3, #11
 8009b2c:	8183      	strh	r3, [r0, #12]
 8009b2e:	2001      	movs	r0, #1
 8009b30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009b34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009b36:	4a0e      	ldr	r2, [pc, #56]	; (8009b70 <rand+0x74>)
 8009b38:	6920      	ldr	r0, [r4, #16]
 8009b3a:	6963      	ldr	r3, [r4, #20]
 8009b3c:	4342      	muls	r2, r0
 8009b3e:	490d      	ldr	r1, [pc, #52]	; (8009b74 <rand+0x78>)
 8009b40:	fb01 2203 	mla	r2, r1, r3, r2
 8009b44:	fba0 0101 	umull	r0, r1, r0, r1
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	eb42 0001 	adc.w	r0, r2, r1
 8009b4e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009b52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b56:	bd10      	pop	{r4, pc}
 8009b58:	20000044 	.word	0x20000044
 8009b5c:	0800b91c 	.word	0x0800b91c
 8009b60:	0800b933 	.word	0x0800b933
 8009b64:	abcd330e 	.word	0xabcd330e
 8009b68:	e66d1234 	.word	0xe66d1234
 8009b6c:	0005deec 	.word	0x0005deec
 8009b70:	5851f42d 	.word	0x5851f42d
 8009b74:	4c957f2d 	.word	0x4c957f2d

08009b78 <__assert_func>:
 8009b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <__assert_func+0x2c>)
 8009b80:	4605      	mov	r5, r0
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68d8      	ldr	r0, [r3, #12]
 8009b86:	b14c      	cbz	r4, 8009b9c <__assert_func+0x24>
 8009b88:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <__assert_func+0x30>)
 8009b8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b8e:	9100      	str	r1, [sp, #0]
 8009b90:	462b      	mov	r3, r5
 8009b92:	4906      	ldr	r1, [pc, #24]	; (8009bac <__assert_func+0x34>)
 8009b94:	f000 f80e 	bl	8009bb4 <fiprintf>
 8009b98:	f000 fcc0 	bl	800a51c <abort>
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <__assert_func+0x38>)
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	e7f3      	b.n	8009b8a <__assert_func+0x12>
 8009ba2:	bf00      	nop
 8009ba4:	20000044 	.word	0x20000044
 8009ba8:	0800b98e 	.word	0x0800b98e
 8009bac:	0800b99b 	.word	0x0800b99b
 8009bb0:	0800b9c9 	.word	0x0800b9c9

08009bb4 <fiprintf>:
 8009bb4:	b40e      	push	{r1, r2, r3}
 8009bb6:	b503      	push	{r0, r1, lr}
 8009bb8:	4601      	mov	r1, r0
 8009bba:	ab03      	add	r3, sp, #12
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <fiprintf+0x20>)
 8009bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc2:	6800      	ldr	r0, [r0, #0]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f000 f913 	bl	8009df0 <_vfiprintf_r>
 8009bca:	b002      	add	sp, #8
 8009bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd0:	b003      	add	sp, #12
 8009bd2:	4770      	bx	lr
 8009bd4:	20000044 	.word	0x20000044

08009bd8 <malloc>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <malloc+0xc>)
 8009bda:	4601      	mov	r1, r0
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f000 b86b 	b.w	8009cb8 <_malloc_r>
 8009be2:	bf00      	nop
 8009be4:	20000044 	.word	0x20000044

08009be8 <_free_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4605      	mov	r5, r0
 8009bec:	2900      	cmp	r1, #0
 8009bee:	d040      	beq.n	8009c72 <_free_r+0x8a>
 8009bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf4:	1f0c      	subs	r4, r1, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfb8      	it	lt
 8009bfa:	18e4      	addlt	r4, r4, r3
 8009bfc:	f000 fec0 	bl	800a980 <__malloc_lock>
 8009c00:	4a1c      	ldr	r2, [pc, #112]	; (8009c74 <_free_r+0x8c>)
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	b933      	cbnz	r3, 8009c14 <_free_r+0x2c>
 8009c06:	6063      	str	r3, [r4, #4]
 8009c08:	6014      	str	r4, [r2, #0]
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c10:	f000 bebc 	b.w	800a98c <__malloc_unlock>
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	d908      	bls.n	8009c2a <_free_r+0x42>
 8009c18:	6820      	ldr	r0, [r4, #0]
 8009c1a:	1821      	adds	r1, r4, r0
 8009c1c:	428b      	cmp	r3, r1
 8009c1e:	bf01      	itttt	eq
 8009c20:	6819      	ldreq	r1, [r3, #0]
 8009c22:	685b      	ldreq	r3, [r3, #4]
 8009c24:	1809      	addeq	r1, r1, r0
 8009c26:	6021      	streq	r1, [r4, #0]
 8009c28:	e7ed      	b.n	8009c06 <_free_r+0x1e>
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	b10b      	cbz	r3, 8009c34 <_free_r+0x4c>
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	d9fa      	bls.n	8009c2a <_free_r+0x42>
 8009c34:	6811      	ldr	r1, [r2, #0]
 8009c36:	1850      	adds	r0, r2, r1
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d10b      	bne.n	8009c54 <_free_r+0x6c>
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	4401      	add	r1, r0
 8009c40:	1850      	adds	r0, r2, r1
 8009c42:	4283      	cmp	r3, r0
 8009c44:	6011      	str	r1, [r2, #0]
 8009c46:	d1e0      	bne.n	8009c0a <_free_r+0x22>
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	4401      	add	r1, r0
 8009c4e:	6011      	str	r1, [r2, #0]
 8009c50:	6053      	str	r3, [r2, #4]
 8009c52:	e7da      	b.n	8009c0a <_free_r+0x22>
 8009c54:	d902      	bls.n	8009c5c <_free_r+0x74>
 8009c56:	230c      	movs	r3, #12
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	e7d6      	b.n	8009c0a <_free_r+0x22>
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	1821      	adds	r1, r4, r0
 8009c60:	428b      	cmp	r3, r1
 8009c62:	bf01      	itttt	eq
 8009c64:	6819      	ldreq	r1, [r3, #0]
 8009c66:	685b      	ldreq	r3, [r3, #4]
 8009c68:	1809      	addeq	r1, r1, r0
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	6054      	str	r4, [r2, #4]
 8009c70:	e7cb      	b.n	8009c0a <_free_r+0x22>
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	20000308 	.word	0x20000308

08009c78 <sbrk_aligned>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4e0e      	ldr	r6, [pc, #56]	; (8009cb4 <sbrk_aligned+0x3c>)
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6831      	ldr	r1, [r6, #0]
 8009c80:	4605      	mov	r5, r0
 8009c82:	b911      	cbnz	r1, 8009c8a <sbrk_aligned+0x12>
 8009c84:	f000 fb7a 	bl	800a37c <_sbrk_r>
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 fb75 	bl	800a37c <_sbrk_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d00a      	beq.n	8009cac <sbrk_aligned+0x34>
 8009c96:	1cc4      	adds	r4, r0, #3
 8009c98:	f024 0403 	bic.w	r4, r4, #3
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d007      	beq.n	8009cb0 <sbrk_aligned+0x38>
 8009ca0:	1a21      	subs	r1, r4, r0
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fb6a 	bl	800a37c <_sbrk_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d101      	bne.n	8009cb0 <sbrk_aligned+0x38>
 8009cac:	f04f 34ff 	mov.w	r4, #4294967295
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	2000030c 	.word	0x2000030c

08009cb8 <_malloc_r>:
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	1ccd      	adds	r5, r1, #3
 8009cbe:	f025 0503 	bic.w	r5, r5, #3
 8009cc2:	3508      	adds	r5, #8
 8009cc4:	2d0c      	cmp	r5, #12
 8009cc6:	bf38      	it	cc
 8009cc8:	250c      	movcc	r5, #12
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	4607      	mov	r7, r0
 8009cce:	db01      	blt.n	8009cd4 <_malloc_r+0x1c>
 8009cd0:	42a9      	cmp	r1, r5
 8009cd2:	d905      	bls.n	8009ce0 <_malloc_r+0x28>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	4630      	mov	r0, r6
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	4e2e      	ldr	r6, [pc, #184]	; (8009d9c <_malloc_r+0xe4>)
 8009ce2:	f000 fe4d 	bl	800a980 <__malloc_lock>
 8009ce6:	6833      	ldr	r3, [r6, #0]
 8009ce8:	461c      	mov	r4, r3
 8009cea:	bb34      	cbnz	r4, 8009d3a <_malloc_r+0x82>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff ffc2 	bl	8009c78 <sbrk_aligned>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	d14d      	bne.n	8009d96 <_malloc_r+0xde>
 8009cfa:	6834      	ldr	r4, [r6, #0]
 8009cfc:	4626      	mov	r6, r4
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	d140      	bne.n	8009d84 <_malloc_r+0xcc>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	4631      	mov	r1, r6
 8009d06:	4638      	mov	r0, r7
 8009d08:	eb04 0803 	add.w	r8, r4, r3
 8009d0c:	f000 fb36 	bl	800a37c <_sbrk_r>
 8009d10:	4580      	cmp	r8, r0
 8009d12:	d13a      	bne.n	8009d8a <_malloc_r+0xd2>
 8009d14:	6821      	ldr	r1, [r4, #0]
 8009d16:	3503      	adds	r5, #3
 8009d18:	1a6d      	subs	r5, r5, r1
 8009d1a:	f025 0503 	bic.w	r5, r5, #3
 8009d1e:	3508      	adds	r5, #8
 8009d20:	2d0c      	cmp	r5, #12
 8009d22:	bf38      	it	cc
 8009d24:	250c      	movcc	r5, #12
 8009d26:	4638      	mov	r0, r7
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7ff ffa5 	bl	8009c78 <sbrk_aligned>
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d02b      	beq.n	8009d8a <_malloc_r+0xd2>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	442b      	add	r3, r5
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	e00e      	b.n	8009d58 <_malloc_r+0xa0>
 8009d3a:	6822      	ldr	r2, [r4, #0]
 8009d3c:	1b52      	subs	r2, r2, r5
 8009d3e:	d41e      	bmi.n	8009d7e <_malloc_r+0xc6>
 8009d40:	2a0b      	cmp	r2, #11
 8009d42:	d916      	bls.n	8009d72 <_malloc_r+0xba>
 8009d44:	1961      	adds	r1, r4, r5
 8009d46:	42a3      	cmp	r3, r4
 8009d48:	6025      	str	r5, [r4, #0]
 8009d4a:	bf18      	it	ne
 8009d4c:	6059      	strne	r1, [r3, #4]
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	bf08      	it	eq
 8009d52:	6031      	streq	r1, [r6, #0]
 8009d54:	5162      	str	r2, [r4, r5]
 8009d56:	604b      	str	r3, [r1, #4]
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f104 060b 	add.w	r6, r4, #11
 8009d5e:	f000 fe15 	bl	800a98c <__malloc_unlock>
 8009d62:	f026 0607 	bic.w	r6, r6, #7
 8009d66:	1d23      	adds	r3, r4, #4
 8009d68:	1af2      	subs	r2, r6, r3
 8009d6a:	d0b6      	beq.n	8009cda <_malloc_r+0x22>
 8009d6c:	1b9b      	subs	r3, r3, r6
 8009d6e:	50a3      	str	r3, [r4, r2]
 8009d70:	e7b3      	b.n	8009cda <_malloc_r+0x22>
 8009d72:	6862      	ldr	r2, [r4, #4]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	bf0c      	ite	eq
 8009d78:	6032      	streq	r2, [r6, #0]
 8009d7a:	605a      	strne	r2, [r3, #4]
 8009d7c:	e7ec      	b.n	8009d58 <_malloc_r+0xa0>
 8009d7e:	4623      	mov	r3, r4
 8009d80:	6864      	ldr	r4, [r4, #4]
 8009d82:	e7b2      	b.n	8009cea <_malloc_r+0x32>
 8009d84:	4634      	mov	r4, r6
 8009d86:	6876      	ldr	r6, [r6, #4]
 8009d88:	e7b9      	b.n	8009cfe <_malloc_r+0x46>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	f000 fdfc 	bl	800a98c <__malloc_unlock>
 8009d94:	e7a1      	b.n	8009cda <_malloc_r+0x22>
 8009d96:	6025      	str	r5, [r4, #0]
 8009d98:	e7de      	b.n	8009d58 <_malloc_r+0xa0>
 8009d9a:	bf00      	nop
 8009d9c:	20000308 	.word	0x20000308

08009da0 <__sfputc_r>:
 8009da0:	6893      	ldr	r3, [r2, #8]
 8009da2:	b410      	push	{r4}
 8009da4:	3b01      	subs	r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	6093      	str	r3, [r2, #8]
 8009daa:	da07      	bge.n	8009dbc <__sfputc_r+0x1c>
 8009dac:	6994      	ldr	r4, [r2, #24]
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	db01      	blt.n	8009db6 <__sfputc_r+0x16>
 8009db2:	290a      	cmp	r1, #10
 8009db4:	d102      	bne.n	8009dbc <__sfputc_r+0x1c>
 8009db6:	bc10      	pop	{r4}
 8009db8:	f000 baf0 	b.w	800a39c <__swbuf_r>
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	1c58      	adds	r0, r3, #1
 8009dc0:	6010      	str	r0, [r2, #0]
 8009dc2:	7019      	strb	r1, [r3, #0]
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	bc10      	pop	{r4}
 8009dc8:	4770      	bx	lr

08009dca <__sfputs_r>:
 8009dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	18d5      	adds	r5, r2, r3
 8009dd4:	42ac      	cmp	r4, r5
 8009dd6:	d101      	bne.n	8009ddc <__sfputs_r+0x12>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e007      	b.n	8009dec <__sfputs_r+0x22>
 8009ddc:	463a      	mov	r2, r7
 8009dde:	4630      	mov	r0, r6
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	f7ff ffdc 	bl	8009da0 <__sfputc_r>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d1f3      	bne.n	8009dd4 <__sfputs_r+0xa>
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009df0 <_vfiprintf_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	460d      	mov	r5, r1
 8009df6:	4614      	mov	r4, r2
 8009df8:	4698      	mov	r8, r3
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	b09d      	sub	sp, #116	; 0x74
 8009dfe:	b118      	cbz	r0, 8009e08 <_vfiprintf_r+0x18>
 8009e00:	6983      	ldr	r3, [r0, #24]
 8009e02:	b90b      	cbnz	r3, 8009e08 <_vfiprintf_r+0x18>
 8009e04:	f000 fca8 	bl	800a758 <__sinit>
 8009e08:	4b89      	ldr	r3, [pc, #548]	; (800a030 <_vfiprintf_r+0x240>)
 8009e0a:	429d      	cmp	r5, r3
 8009e0c:	d11b      	bne.n	8009e46 <_vfiprintf_r+0x56>
 8009e0e:	6875      	ldr	r5, [r6, #4]
 8009e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e12:	07d9      	lsls	r1, r3, #31
 8009e14:	d405      	bmi.n	8009e22 <_vfiprintf_r+0x32>
 8009e16:	89ab      	ldrh	r3, [r5, #12]
 8009e18:	059a      	lsls	r2, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_vfiprintf_r+0x32>
 8009e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e1e:	f000 fd39 	bl	800a894 <__retarget_lock_acquire_recursive>
 8009e22:	89ab      	ldrh	r3, [r5, #12]
 8009e24:	071b      	lsls	r3, r3, #28
 8009e26:	d501      	bpl.n	8009e2c <_vfiprintf_r+0x3c>
 8009e28:	692b      	ldr	r3, [r5, #16]
 8009e2a:	b9eb      	cbnz	r3, 8009e68 <_vfiprintf_r+0x78>
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f000 fb06 	bl	800a440 <__swsetup_r>
 8009e34:	b1c0      	cbz	r0, 8009e68 <_vfiprintf_r+0x78>
 8009e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e38:	07dc      	lsls	r4, r3, #31
 8009e3a:	d50e      	bpl.n	8009e5a <_vfiprintf_r+0x6a>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	b01d      	add	sp, #116	; 0x74
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	4b7b      	ldr	r3, [pc, #492]	; (800a034 <_vfiprintf_r+0x244>)
 8009e48:	429d      	cmp	r5, r3
 8009e4a:	d101      	bne.n	8009e50 <_vfiprintf_r+0x60>
 8009e4c:	68b5      	ldr	r5, [r6, #8]
 8009e4e:	e7df      	b.n	8009e10 <_vfiprintf_r+0x20>
 8009e50:	4b79      	ldr	r3, [pc, #484]	; (800a038 <_vfiprintf_r+0x248>)
 8009e52:	429d      	cmp	r5, r3
 8009e54:	bf08      	it	eq
 8009e56:	68f5      	ldreq	r5, [r6, #12]
 8009e58:	e7da      	b.n	8009e10 <_vfiprintf_r+0x20>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	0598      	lsls	r0, r3, #22
 8009e5e:	d4ed      	bmi.n	8009e3c <_vfiprintf_r+0x4c>
 8009e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e62:	f000 fd18 	bl	800a896 <__retarget_lock_release_recursive>
 8009e66:	e7e9      	b.n	8009e3c <_vfiprintf_r+0x4c>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6c:	2320      	movs	r3, #32
 8009e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e72:	2330      	movs	r3, #48	; 0x30
 8009e74:	f04f 0901 	mov.w	r9, #1
 8009e78:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a03c <_vfiprintf_r+0x24c>
 8009e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e84:	4623      	mov	r3, r4
 8009e86:	469a      	mov	sl, r3
 8009e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e8c:	b10a      	cbz	r2, 8009e92 <_vfiprintf_r+0xa2>
 8009e8e:	2a25      	cmp	r2, #37	; 0x25
 8009e90:	d1f9      	bne.n	8009e86 <_vfiprintf_r+0x96>
 8009e92:	ebba 0b04 	subs.w	fp, sl, r4
 8009e96:	d00b      	beq.n	8009eb0 <_vfiprintf_r+0xc0>
 8009e98:	465b      	mov	r3, fp
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ff93 	bl	8009dca <__sfputs_r>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	f000 80aa 	beq.w	8009ffe <_vfiprintf_r+0x20e>
 8009eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eac:	445a      	add	r2, fp
 8009eae:	9209      	str	r2, [sp, #36]	; 0x24
 8009eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 80a2 	beq.w	8009ffe <_vfiprintf_r+0x20e>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec4:	f10a 0a01 	add.w	sl, sl, #1
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	9307      	str	r3, [sp, #28]
 8009ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ed2:	4654      	mov	r4, sl
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eda:	4858      	ldr	r0, [pc, #352]	; (800a03c <_vfiprintf_r+0x24c>)
 8009edc:	f000 fd42 	bl	800a964 <memchr>
 8009ee0:	9a04      	ldr	r2, [sp, #16]
 8009ee2:	b9d8      	cbnz	r0, 8009f1c <_vfiprintf_r+0x12c>
 8009ee4:	06d1      	lsls	r1, r2, #27
 8009ee6:	bf44      	itt	mi
 8009ee8:	2320      	movmi	r3, #32
 8009eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eee:	0713      	lsls	r3, r2, #28
 8009ef0:	bf44      	itt	mi
 8009ef2:	232b      	movmi	r3, #43	; 0x2b
 8009ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8009efc:	2b2a      	cmp	r3, #42	; 0x2a
 8009efe:	d015      	beq.n	8009f2c <_vfiprintf_r+0x13c>
 8009f00:	4654      	mov	r4, sl
 8009f02:	2000      	movs	r0, #0
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	9a07      	ldr	r2, [sp, #28]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f10:	3b30      	subs	r3, #48	; 0x30
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	d94e      	bls.n	8009fb4 <_vfiprintf_r+0x1c4>
 8009f16:	b1b0      	cbz	r0, 8009f46 <_vfiprintf_r+0x156>
 8009f18:	9207      	str	r2, [sp, #28]
 8009f1a:	e014      	b.n	8009f46 <_vfiprintf_r+0x156>
 8009f1c:	eba0 0308 	sub.w	r3, r0, r8
 8009f20:	fa09 f303 	lsl.w	r3, r9, r3
 8009f24:	4313      	orrs	r3, r2
 8009f26:	46a2      	mov	sl, r4
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	e7d2      	b.n	8009ed2 <_vfiprintf_r+0xe2>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	1d19      	adds	r1, r3, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	9103      	str	r1, [sp, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfbb      	ittet	lt
 8009f38:	425b      	neglt	r3, r3
 8009f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f3e:	9307      	strge	r3, [sp, #28]
 8009f40:	9307      	strlt	r3, [sp, #28]
 8009f42:	bfb8      	it	lt
 8009f44:	9204      	strlt	r2, [sp, #16]
 8009f46:	7823      	ldrb	r3, [r4, #0]
 8009f48:	2b2e      	cmp	r3, #46	; 0x2e
 8009f4a:	d10c      	bne.n	8009f66 <_vfiprintf_r+0x176>
 8009f4c:	7863      	ldrb	r3, [r4, #1]
 8009f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f50:	d135      	bne.n	8009fbe <_vfiprintf_r+0x1ce>
 8009f52:	9b03      	ldr	r3, [sp, #12]
 8009f54:	3402      	adds	r4, #2
 8009f56:	1d1a      	adds	r2, r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	9203      	str	r2, [sp, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bfb8      	it	lt
 8009f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a040 <_vfiprintf_r+0x250>
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	7821      	ldrb	r1, [r4, #0]
 8009f70:	f000 fcf8 	bl	800a964 <memchr>
 8009f74:	b140      	cbz	r0, 8009f88 <_vfiprintf_r+0x198>
 8009f76:	2340      	movs	r3, #64	; 0x40
 8009f78:	eba0 000a 	sub.w	r0, r0, sl
 8009f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	3401      	adds	r4, #1
 8009f84:	4303      	orrs	r3, r0
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8c:	2206      	movs	r2, #6
 8009f8e:	482d      	ldr	r0, [pc, #180]	; (800a044 <_vfiprintf_r+0x254>)
 8009f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f94:	f000 fce6 	bl	800a964 <memchr>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d03f      	beq.n	800a01c <_vfiprintf_r+0x22c>
 8009f9c:	4b2a      	ldr	r3, [pc, #168]	; (800a048 <_vfiprintf_r+0x258>)
 8009f9e:	bb1b      	cbnz	r3, 8009fe8 <_vfiprintf_r+0x1f8>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	3307      	adds	r3, #7
 8009fa4:	f023 0307 	bic.w	r3, r3, #7
 8009fa8:	3308      	adds	r3, #8
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	443b      	add	r3, r7
 8009fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb2:	e767      	b.n	8009e84 <_vfiprintf_r+0x94>
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fbc:	e7a5      	b.n	8009f0a <_vfiprintf_r+0x11a>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f04f 0c0a 	mov.w	ip, #10
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	3401      	adds	r4, #1
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fd0:	3a30      	subs	r2, #48	; 0x30
 8009fd2:	2a09      	cmp	r2, #9
 8009fd4:	d903      	bls.n	8009fde <_vfiprintf_r+0x1ee>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0c5      	beq.n	8009f66 <_vfiprintf_r+0x176>
 8009fda:	9105      	str	r1, [sp, #20]
 8009fdc:	e7c3      	b.n	8009f66 <_vfiprintf_r+0x176>
 8009fde:	4604      	mov	r4, r0
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe6:	e7f0      	b.n	8009fca <_vfiprintf_r+0x1da>
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	462a      	mov	r2, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4b16      	ldr	r3, [pc, #88]	; (800a04c <_vfiprintf_r+0x25c>)
 8009ff2:	a904      	add	r1, sp, #16
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	1c78      	adds	r0, r7, #1
 8009ffc:	d1d6      	bne.n	8009fac <_vfiprintf_r+0x1bc>
 8009ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a000:	07d9      	lsls	r1, r3, #31
 800a002:	d405      	bmi.n	800a010 <_vfiprintf_r+0x220>
 800a004:	89ab      	ldrh	r3, [r5, #12]
 800a006:	059a      	lsls	r2, r3, #22
 800a008:	d402      	bmi.n	800a010 <_vfiprintf_r+0x220>
 800a00a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00c:	f000 fc43 	bl	800a896 <__retarget_lock_release_recursive>
 800a010:	89ab      	ldrh	r3, [r5, #12]
 800a012:	065b      	lsls	r3, r3, #25
 800a014:	f53f af12 	bmi.w	8009e3c <_vfiprintf_r+0x4c>
 800a018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a01a:	e711      	b.n	8009e40 <_vfiprintf_r+0x50>
 800a01c:	ab03      	add	r3, sp, #12
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	462a      	mov	r2, r5
 800a022:	4630      	mov	r0, r6
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <_vfiprintf_r+0x25c>)
 800a026:	a904      	add	r1, sp, #16
 800a028:	f000 f882 	bl	800a130 <_printf_i>
 800a02c:	e7e4      	b.n	8009ff8 <_vfiprintf_r+0x208>
 800a02e:	bf00      	nop
 800a030:	0800ba20 	.word	0x0800ba20
 800a034:	0800ba40 	.word	0x0800ba40
 800a038:	0800ba00 	.word	0x0800ba00
 800a03c:	0800b9ca 	.word	0x0800b9ca
 800a040:	0800b9d0 	.word	0x0800b9d0
 800a044:	0800b9d4 	.word	0x0800b9d4
 800a048:	00000000 	.word	0x00000000
 800a04c:	08009dcb 	.word	0x08009dcb

0800a050 <_printf_common>:
 800a050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	4616      	mov	r6, r2
 800a056:	4699      	mov	r9, r3
 800a058:	688a      	ldr	r2, [r1, #8]
 800a05a:	690b      	ldr	r3, [r1, #16]
 800a05c:	4607      	mov	r7, r0
 800a05e:	4293      	cmp	r3, r2
 800a060:	bfb8      	it	lt
 800a062:	4613      	movlt	r3, r2
 800a064:	6033      	str	r3, [r6, #0]
 800a066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a06a:	460c      	mov	r4, r1
 800a06c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a070:	b10a      	cbz	r2, 800a076 <_printf_common+0x26>
 800a072:	3301      	adds	r3, #1
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	0699      	lsls	r1, r3, #26
 800a07a:	bf42      	ittt	mi
 800a07c:	6833      	ldrmi	r3, [r6, #0]
 800a07e:	3302      	addmi	r3, #2
 800a080:	6033      	strmi	r3, [r6, #0]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	f015 0506 	ands.w	r5, r5, #6
 800a088:	d106      	bne.n	800a098 <_printf_common+0x48>
 800a08a:	f104 0a19 	add.w	sl, r4, #25
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	6832      	ldr	r2, [r6, #0]
 800a092:	1a9b      	subs	r3, r3, r2
 800a094:	42ab      	cmp	r3, r5
 800a096:	dc28      	bgt.n	800a0ea <_printf_common+0x9a>
 800a098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a09c:	1e13      	subs	r3, r2, #0
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	bf18      	it	ne
 800a0a2:	2301      	movne	r3, #1
 800a0a4:	0692      	lsls	r2, r2, #26
 800a0a6:	d42d      	bmi.n	800a104 <_printf_common+0xb4>
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0b0:	47c0      	blx	r8
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d020      	beq.n	800a0f8 <_printf_common+0xa8>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	68e5      	ldr	r5, [r4, #12]
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	bf18      	it	ne
 800a0c2:	2500      	movne	r5, #0
 800a0c4:	6832      	ldr	r2, [r6, #0]
 800a0c6:	f04f 0600 	mov.w	r6, #0
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	bf08      	it	eq
 800a0ce:	1aad      	subeq	r5, r5, r2
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	bf08      	it	eq
 800a0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	bfc4      	itt	gt
 800a0dc:	1a9b      	subgt	r3, r3, r2
 800a0de:	18ed      	addgt	r5, r5, r3
 800a0e0:	341a      	adds	r4, #26
 800a0e2:	42b5      	cmp	r5, r6
 800a0e4:	d11a      	bne.n	800a11c <_printf_common+0xcc>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	e008      	b.n	800a0fc <_printf_common+0xac>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4652      	mov	r2, sl
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	47c0      	blx	r8
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d103      	bne.n	800a100 <_printf_common+0xb0>
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a100:	3501      	adds	r5, #1
 800a102:	e7c4      	b.n	800a08e <_printf_common+0x3e>
 800a104:	2030      	movs	r0, #48	; 0x30
 800a106:	18e1      	adds	r1, r4, r3
 800a108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a112:	4422      	add	r2, r4
 800a114:	3302      	adds	r3, #2
 800a116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a11a:	e7c5      	b.n	800a0a8 <_printf_common+0x58>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4622      	mov	r2, r4
 800a120:	4649      	mov	r1, r9
 800a122:	4638      	mov	r0, r7
 800a124:	47c0      	blx	r8
 800a126:	3001      	adds	r0, #1
 800a128:	d0e6      	beq.n	800a0f8 <_printf_common+0xa8>
 800a12a:	3601      	adds	r6, #1
 800a12c:	e7d9      	b.n	800a0e2 <_printf_common+0x92>
	...

0800a130 <_printf_i>:
 800a130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a134:	7e0f      	ldrb	r7, [r1, #24]
 800a136:	4691      	mov	r9, r2
 800a138:	2f78      	cmp	r7, #120	; 0x78
 800a13a:	4680      	mov	r8, r0
 800a13c:	460c      	mov	r4, r1
 800a13e:	469a      	mov	sl, r3
 800a140:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a146:	d807      	bhi.n	800a158 <_printf_i+0x28>
 800a148:	2f62      	cmp	r7, #98	; 0x62
 800a14a:	d80a      	bhi.n	800a162 <_printf_i+0x32>
 800a14c:	2f00      	cmp	r7, #0
 800a14e:	f000 80d9 	beq.w	800a304 <_printf_i+0x1d4>
 800a152:	2f58      	cmp	r7, #88	; 0x58
 800a154:	f000 80a4 	beq.w	800a2a0 <_printf_i+0x170>
 800a158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a15c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a160:	e03a      	b.n	800a1d8 <_printf_i+0xa8>
 800a162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a166:	2b15      	cmp	r3, #21
 800a168:	d8f6      	bhi.n	800a158 <_printf_i+0x28>
 800a16a:	a101      	add	r1, pc, #4	; (adr r1, 800a170 <_printf_i+0x40>)
 800a16c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a170:	0800a1c9 	.word	0x0800a1c9
 800a174:	0800a1dd 	.word	0x0800a1dd
 800a178:	0800a159 	.word	0x0800a159
 800a17c:	0800a159 	.word	0x0800a159
 800a180:	0800a159 	.word	0x0800a159
 800a184:	0800a159 	.word	0x0800a159
 800a188:	0800a1dd 	.word	0x0800a1dd
 800a18c:	0800a159 	.word	0x0800a159
 800a190:	0800a159 	.word	0x0800a159
 800a194:	0800a159 	.word	0x0800a159
 800a198:	0800a159 	.word	0x0800a159
 800a19c:	0800a2eb 	.word	0x0800a2eb
 800a1a0:	0800a20d 	.word	0x0800a20d
 800a1a4:	0800a2cd 	.word	0x0800a2cd
 800a1a8:	0800a159 	.word	0x0800a159
 800a1ac:	0800a159 	.word	0x0800a159
 800a1b0:	0800a30d 	.word	0x0800a30d
 800a1b4:	0800a159 	.word	0x0800a159
 800a1b8:	0800a20d 	.word	0x0800a20d
 800a1bc:	0800a159 	.word	0x0800a159
 800a1c0:	0800a159 	.word	0x0800a159
 800a1c4:	0800a2d5 	.word	0x0800a2d5
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	1d1a      	adds	r2, r3, #4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	602a      	str	r2, [r5, #0]
 800a1d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e0a4      	b.n	800a326 <_printf_i+0x1f6>
 800a1dc:	6820      	ldr	r0, [r4, #0]
 800a1de:	6829      	ldr	r1, [r5, #0]
 800a1e0:	0606      	lsls	r6, r0, #24
 800a1e2:	f101 0304 	add.w	r3, r1, #4
 800a1e6:	d50a      	bpl.n	800a1fe <_printf_i+0xce>
 800a1e8:	680e      	ldr	r6, [r1, #0]
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	2e00      	cmp	r6, #0
 800a1ee:	da03      	bge.n	800a1f8 <_printf_i+0xc8>
 800a1f0:	232d      	movs	r3, #45	; 0x2d
 800a1f2:	4276      	negs	r6, r6
 800a1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f8:	230a      	movs	r3, #10
 800a1fa:	485e      	ldr	r0, [pc, #376]	; (800a374 <_printf_i+0x244>)
 800a1fc:	e019      	b.n	800a232 <_printf_i+0x102>
 800a1fe:	680e      	ldr	r6, [r1, #0]
 800a200:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	bf18      	it	ne
 800a208:	b236      	sxthne	r6, r6
 800a20a:	e7ef      	b.n	800a1ec <_printf_i+0xbc>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	1d19      	adds	r1, r3, #4
 800a212:	6029      	str	r1, [r5, #0]
 800a214:	0601      	lsls	r1, r0, #24
 800a216:	d501      	bpl.n	800a21c <_printf_i+0xec>
 800a218:	681e      	ldr	r6, [r3, #0]
 800a21a:	e002      	b.n	800a222 <_printf_i+0xf2>
 800a21c:	0646      	lsls	r6, r0, #25
 800a21e:	d5fb      	bpl.n	800a218 <_printf_i+0xe8>
 800a220:	881e      	ldrh	r6, [r3, #0]
 800a222:	2f6f      	cmp	r7, #111	; 0x6f
 800a224:	bf0c      	ite	eq
 800a226:	2308      	moveq	r3, #8
 800a228:	230a      	movne	r3, #10
 800a22a:	4852      	ldr	r0, [pc, #328]	; (800a374 <_printf_i+0x244>)
 800a22c:	2100      	movs	r1, #0
 800a22e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a232:	6865      	ldr	r5, [r4, #4]
 800a234:	2d00      	cmp	r5, #0
 800a236:	bfa8      	it	ge
 800a238:	6821      	ldrge	r1, [r4, #0]
 800a23a:	60a5      	str	r5, [r4, #8]
 800a23c:	bfa4      	itt	ge
 800a23e:	f021 0104 	bicge.w	r1, r1, #4
 800a242:	6021      	strge	r1, [r4, #0]
 800a244:	b90e      	cbnz	r6, 800a24a <_printf_i+0x11a>
 800a246:	2d00      	cmp	r5, #0
 800a248:	d04d      	beq.n	800a2e6 <_printf_i+0x1b6>
 800a24a:	4615      	mov	r5, r2
 800a24c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a250:	fb03 6711 	mls	r7, r3, r1, r6
 800a254:	5dc7      	ldrb	r7, [r0, r7]
 800a256:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a25a:	4637      	mov	r7, r6
 800a25c:	42bb      	cmp	r3, r7
 800a25e:	460e      	mov	r6, r1
 800a260:	d9f4      	bls.n	800a24c <_printf_i+0x11c>
 800a262:	2b08      	cmp	r3, #8
 800a264:	d10b      	bne.n	800a27e <_printf_i+0x14e>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	07de      	lsls	r6, r3, #31
 800a26a:	d508      	bpl.n	800a27e <_printf_i+0x14e>
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	6861      	ldr	r1, [r4, #4]
 800a270:	4299      	cmp	r1, r3
 800a272:	bfde      	ittt	le
 800a274:	2330      	movle	r3, #48	; 0x30
 800a276:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a27a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a27e:	1b52      	subs	r2, r2, r5
 800a280:	6122      	str	r2, [r4, #16]
 800a282:	464b      	mov	r3, r9
 800a284:	4621      	mov	r1, r4
 800a286:	4640      	mov	r0, r8
 800a288:	f8cd a000 	str.w	sl, [sp]
 800a28c:	aa03      	add	r2, sp, #12
 800a28e:	f7ff fedf 	bl	800a050 <_printf_common>
 800a292:	3001      	adds	r0, #1
 800a294:	d14c      	bne.n	800a330 <_printf_i+0x200>
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	b004      	add	sp, #16
 800a29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a0:	4834      	ldr	r0, [pc, #208]	; (800a374 <_printf_i+0x244>)
 800a2a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2a6:	6829      	ldr	r1, [r5, #0]
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2ae:	6029      	str	r1, [r5, #0]
 800a2b0:	061d      	lsls	r5, r3, #24
 800a2b2:	d514      	bpl.n	800a2de <_printf_i+0x1ae>
 800a2b4:	07df      	lsls	r7, r3, #31
 800a2b6:	bf44      	itt	mi
 800a2b8:	f043 0320 	orrmi.w	r3, r3, #32
 800a2bc:	6023      	strmi	r3, [r4, #0]
 800a2be:	b91e      	cbnz	r6, 800a2c8 <_printf_i+0x198>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	f023 0320 	bic.w	r3, r3, #32
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	e7af      	b.n	800a22c <_printf_i+0xfc>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	f043 0320 	orr.w	r3, r3, #32
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	2378      	movs	r3, #120	; 0x78
 800a2d6:	4828      	ldr	r0, [pc, #160]	; (800a378 <_printf_i+0x248>)
 800a2d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2dc:	e7e3      	b.n	800a2a6 <_printf_i+0x176>
 800a2de:	0659      	lsls	r1, r3, #25
 800a2e0:	bf48      	it	mi
 800a2e2:	b2b6      	uxthmi	r6, r6
 800a2e4:	e7e6      	b.n	800a2b4 <_printf_i+0x184>
 800a2e6:	4615      	mov	r5, r2
 800a2e8:	e7bb      	b.n	800a262 <_printf_i+0x132>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	6826      	ldr	r6, [r4, #0]
 800a2ee:	1d18      	adds	r0, r3, #4
 800a2f0:	6961      	ldr	r1, [r4, #20]
 800a2f2:	6028      	str	r0, [r5, #0]
 800a2f4:	0635      	lsls	r5, r6, #24
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	d501      	bpl.n	800a2fe <_printf_i+0x1ce>
 800a2fa:	6019      	str	r1, [r3, #0]
 800a2fc:	e002      	b.n	800a304 <_printf_i+0x1d4>
 800a2fe:	0670      	lsls	r0, r6, #25
 800a300:	d5fb      	bpl.n	800a2fa <_printf_i+0x1ca>
 800a302:	8019      	strh	r1, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	4615      	mov	r5, r2
 800a308:	6123      	str	r3, [r4, #16]
 800a30a:	e7ba      	b.n	800a282 <_printf_i+0x152>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	2100      	movs	r1, #0
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	602a      	str	r2, [r5, #0]
 800a314:	681d      	ldr	r5, [r3, #0]
 800a316:	6862      	ldr	r2, [r4, #4]
 800a318:	4628      	mov	r0, r5
 800a31a:	f000 fb23 	bl	800a964 <memchr>
 800a31e:	b108      	cbz	r0, 800a324 <_printf_i+0x1f4>
 800a320:	1b40      	subs	r0, r0, r5
 800a322:	6060      	str	r0, [r4, #4]
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	6123      	str	r3, [r4, #16]
 800a328:	2300      	movs	r3, #0
 800a32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a32e:	e7a8      	b.n	800a282 <_printf_i+0x152>
 800a330:	462a      	mov	r2, r5
 800a332:	4649      	mov	r1, r9
 800a334:	4640      	mov	r0, r8
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	47d0      	blx	sl
 800a33a:	3001      	adds	r0, #1
 800a33c:	d0ab      	beq.n	800a296 <_printf_i+0x166>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	079b      	lsls	r3, r3, #30
 800a342:	d413      	bmi.n	800a36c <_printf_i+0x23c>
 800a344:	68e0      	ldr	r0, [r4, #12]
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	4298      	cmp	r0, r3
 800a34a:	bfb8      	it	lt
 800a34c:	4618      	movlt	r0, r3
 800a34e:	e7a4      	b.n	800a29a <_printf_i+0x16a>
 800a350:	2301      	movs	r3, #1
 800a352:	4632      	mov	r2, r6
 800a354:	4649      	mov	r1, r9
 800a356:	4640      	mov	r0, r8
 800a358:	47d0      	blx	sl
 800a35a:	3001      	adds	r0, #1
 800a35c:	d09b      	beq.n	800a296 <_printf_i+0x166>
 800a35e:	3501      	adds	r5, #1
 800a360:	68e3      	ldr	r3, [r4, #12]
 800a362:	9903      	ldr	r1, [sp, #12]
 800a364:	1a5b      	subs	r3, r3, r1
 800a366:	42ab      	cmp	r3, r5
 800a368:	dcf2      	bgt.n	800a350 <_printf_i+0x220>
 800a36a:	e7eb      	b.n	800a344 <_printf_i+0x214>
 800a36c:	2500      	movs	r5, #0
 800a36e:	f104 0619 	add.w	r6, r4, #25
 800a372:	e7f5      	b.n	800a360 <_printf_i+0x230>
 800a374:	0800b9db 	.word	0x0800b9db
 800a378:	0800b9ec 	.word	0x0800b9ec

0800a37c <_sbrk_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	2300      	movs	r3, #0
 800a380:	4d05      	ldr	r5, [pc, #20]	; (800a398 <_sbrk_r+0x1c>)
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	f7fa fc10 	bl	8004bac <_sbrk>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_sbrk_r+0x1a>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_sbrk_r+0x1a>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20000314 	.word	0x20000314

0800a39c <__swbuf_r>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	460e      	mov	r6, r1
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	b118      	cbz	r0, 800a3ae <__swbuf_r+0x12>
 800a3a6:	6983      	ldr	r3, [r0, #24]
 800a3a8:	b90b      	cbnz	r3, 800a3ae <__swbuf_r+0x12>
 800a3aa:	f000 f9d5 	bl	800a758 <__sinit>
 800a3ae:	4b21      	ldr	r3, [pc, #132]	; (800a434 <__swbuf_r+0x98>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d12b      	bne.n	800a40c <__swbuf_r+0x70>
 800a3b4:	686c      	ldr	r4, [r5, #4]
 800a3b6:	69a3      	ldr	r3, [r4, #24]
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	071a      	lsls	r2, r3, #28
 800a3be:	d52f      	bpl.n	800a420 <__swbuf_r+0x84>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	b36b      	cbz	r3, 800a420 <__swbuf_r+0x84>
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	6820      	ldr	r0, [r4, #0]
 800a3c8:	b2f6      	uxtb	r6, r6
 800a3ca:	1ac0      	subs	r0, r0, r3
 800a3cc:	6963      	ldr	r3, [r4, #20]
 800a3ce:	4637      	mov	r7, r6
 800a3d0:	4283      	cmp	r3, r0
 800a3d2:	dc04      	bgt.n	800a3de <__swbuf_r+0x42>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 f92a 	bl	800a630 <_fflush_r>
 800a3dc:	bb30      	cbnz	r0, 800a42c <__swbuf_r+0x90>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	701e      	strb	r6, [r3, #0]
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	d004      	beq.n	800a3fe <__swbuf_r+0x62>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	07db      	lsls	r3, r3, #31
 800a3f8:	d506      	bpl.n	800a408 <__swbuf_r+0x6c>
 800a3fa:	2e0a      	cmp	r6, #10
 800a3fc:	d104      	bne.n	800a408 <__swbuf_r+0x6c>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 f915 	bl	800a630 <_fflush_r>
 800a406:	b988      	cbnz	r0, 800a42c <__swbuf_r+0x90>
 800a408:	4638      	mov	r0, r7
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <__swbuf_r+0x9c>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	d101      	bne.n	800a416 <__swbuf_r+0x7a>
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	e7cf      	b.n	800a3b6 <__swbuf_r+0x1a>
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <__swbuf_r+0xa0>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	bf08      	it	eq
 800a41c:	68ec      	ldreq	r4, [r5, #12]
 800a41e:	e7ca      	b.n	800a3b6 <__swbuf_r+0x1a>
 800a420:	4621      	mov	r1, r4
 800a422:	4628      	mov	r0, r5
 800a424:	f000 f80c 	bl	800a440 <__swsetup_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0cb      	beq.n	800a3c4 <__swbuf_r+0x28>
 800a42c:	f04f 37ff 	mov.w	r7, #4294967295
 800a430:	e7ea      	b.n	800a408 <__swbuf_r+0x6c>
 800a432:	bf00      	nop
 800a434:	0800ba20 	.word	0x0800ba20
 800a438:	0800ba40 	.word	0x0800ba40
 800a43c:	0800ba00 	.word	0x0800ba00

0800a440 <__swsetup_r>:
 800a440:	4b32      	ldr	r3, [pc, #200]	; (800a50c <__swsetup_r+0xcc>)
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	681d      	ldr	r5, [r3, #0]
 800a446:	4606      	mov	r6, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	b125      	cbz	r5, 800a456 <__swsetup_r+0x16>
 800a44c:	69ab      	ldr	r3, [r5, #24]
 800a44e:	b913      	cbnz	r3, 800a456 <__swsetup_r+0x16>
 800a450:	4628      	mov	r0, r5
 800a452:	f000 f981 	bl	800a758 <__sinit>
 800a456:	4b2e      	ldr	r3, [pc, #184]	; (800a510 <__swsetup_r+0xd0>)
 800a458:	429c      	cmp	r4, r3
 800a45a:	d10f      	bne.n	800a47c <__swsetup_r+0x3c>
 800a45c:	686c      	ldr	r4, [r5, #4]
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a464:	0719      	lsls	r1, r3, #28
 800a466:	d42c      	bmi.n	800a4c2 <__swsetup_r+0x82>
 800a468:	06dd      	lsls	r5, r3, #27
 800a46a:	d411      	bmi.n	800a490 <__swsetup_r+0x50>
 800a46c:	2309      	movs	r3, #9
 800a46e:	6033      	str	r3, [r6, #0]
 800a470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	e03e      	b.n	800a4fa <__swsetup_r+0xba>
 800a47c:	4b25      	ldr	r3, [pc, #148]	; (800a514 <__swsetup_r+0xd4>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d101      	bne.n	800a486 <__swsetup_r+0x46>
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	e7eb      	b.n	800a45e <__swsetup_r+0x1e>
 800a486:	4b24      	ldr	r3, [pc, #144]	; (800a518 <__swsetup_r+0xd8>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	bf08      	it	eq
 800a48c:	68ec      	ldreq	r4, [r5, #12]
 800a48e:	e7e6      	b.n	800a45e <__swsetup_r+0x1e>
 800a490:	0758      	lsls	r0, r3, #29
 800a492:	d512      	bpl.n	800a4ba <__swsetup_r+0x7a>
 800a494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a496:	b141      	cbz	r1, 800a4aa <__swsetup_r+0x6a>
 800a498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <__swsetup_r+0x66>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7ff fba1 	bl	8009be8 <_free_r>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6063      	str	r3, [r4, #4]
 800a4b6:	6923      	ldr	r3, [r4, #16]
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	f043 0308 	orr.w	r3, r3, #8
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	b94b      	cbnz	r3, 800a4da <__swsetup_r+0x9a>
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d0:	d003      	beq.n	800a4da <__swsetup_r+0x9a>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f000 fa05 	bl	800a8e4 <__smakebuf_r>
 800a4da:	89a0      	ldrh	r0, [r4, #12]
 800a4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4e0:	f010 0301 	ands.w	r3, r0, #1
 800a4e4:	d00a      	beq.n	800a4fc <__swsetup_r+0xbc>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	6963      	ldr	r3, [r4, #20]
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	61a3      	str	r3, [r4, #24]
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b943      	cbnz	r3, 800a506 <__swsetup_r+0xc6>
 800a4f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4f8:	d1ba      	bne.n	800a470 <__swsetup_r+0x30>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	0781      	lsls	r1, r0, #30
 800a4fe:	bf58      	it	pl
 800a500:	6963      	ldrpl	r3, [r4, #20]
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	e7f4      	b.n	800a4f0 <__swsetup_r+0xb0>
 800a506:	2000      	movs	r0, #0
 800a508:	e7f7      	b.n	800a4fa <__swsetup_r+0xba>
 800a50a:	bf00      	nop
 800a50c:	20000044 	.word	0x20000044
 800a510:	0800ba20 	.word	0x0800ba20
 800a514:	0800ba40 	.word	0x0800ba40
 800a518:	0800ba00 	.word	0x0800ba00

0800a51c <abort>:
 800a51c:	2006      	movs	r0, #6
 800a51e:	b508      	push	{r3, lr}
 800a520:	f000 fa62 	bl	800a9e8 <raise>
 800a524:	2001      	movs	r0, #1
 800a526:	f7fa face 	bl	8004ac6 <_exit>
	...

0800a52c <__sflush_r>:
 800a52c:	898a      	ldrh	r2, [r1, #12]
 800a52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a530:	4605      	mov	r5, r0
 800a532:	0710      	lsls	r0, r2, #28
 800a534:	460c      	mov	r4, r1
 800a536:	d457      	bmi.n	800a5e8 <__sflush_r+0xbc>
 800a538:	684b      	ldr	r3, [r1, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	dc04      	bgt.n	800a548 <__sflush_r+0x1c>
 800a53e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	dc01      	bgt.n	800a548 <__sflush_r+0x1c>
 800a544:	2000      	movs	r0, #0
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	d0fa      	beq.n	800a544 <__sflush_r+0x18>
 800a54e:	2300      	movs	r3, #0
 800a550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a554:	682f      	ldr	r7, [r5, #0]
 800a556:	602b      	str	r3, [r5, #0]
 800a558:	d032      	beq.n	800a5c0 <__sflush_r+0x94>
 800a55a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	075a      	lsls	r2, r3, #29
 800a560:	d505      	bpl.n	800a56e <__sflush_r+0x42>
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	1ac0      	subs	r0, r0, r3
 800a566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a568:	b10b      	cbz	r3, 800a56e <__sflush_r+0x42>
 800a56a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a56c:	1ac0      	subs	r0, r0, r3
 800a56e:	2300      	movs	r3, #0
 800a570:	4602      	mov	r2, r0
 800a572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a574:	4628      	mov	r0, r5
 800a576:	6a21      	ldr	r1, [r4, #32]
 800a578:	47b0      	blx	r6
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	d106      	bne.n	800a58e <__sflush_r+0x62>
 800a580:	6829      	ldr	r1, [r5, #0]
 800a582:	291d      	cmp	r1, #29
 800a584:	d82c      	bhi.n	800a5e0 <__sflush_r+0xb4>
 800a586:	4a29      	ldr	r2, [pc, #164]	; (800a62c <__sflush_r+0x100>)
 800a588:	40ca      	lsrs	r2, r1
 800a58a:	07d6      	lsls	r6, r2, #31
 800a58c:	d528      	bpl.n	800a5e0 <__sflush_r+0xb4>
 800a58e:	2200      	movs	r2, #0
 800a590:	6062      	str	r2, [r4, #4]
 800a592:	6922      	ldr	r2, [r4, #16]
 800a594:	04d9      	lsls	r1, r3, #19
 800a596:	6022      	str	r2, [r4, #0]
 800a598:	d504      	bpl.n	800a5a4 <__sflush_r+0x78>
 800a59a:	1c42      	adds	r2, r0, #1
 800a59c:	d101      	bne.n	800a5a2 <__sflush_r+0x76>
 800a59e:	682b      	ldr	r3, [r5, #0]
 800a5a0:	b903      	cbnz	r3, 800a5a4 <__sflush_r+0x78>
 800a5a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5a6:	602f      	str	r7, [r5, #0]
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	d0cb      	beq.n	800a544 <__sflush_r+0x18>
 800a5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d002      	beq.n	800a5ba <__sflush_r+0x8e>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f7ff fb17 	bl	8009be8 <_free_r>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a5be:	e7c2      	b.n	800a546 <__sflush_r+0x1a>
 800a5c0:	6a21      	ldr	r1, [r4, #32]
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b0      	blx	r6
 800a5c8:	1c41      	adds	r1, r0, #1
 800a5ca:	d1c7      	bne.n	800a55c <__sflush_r+0x30>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0c4      	beq.n	800a55c <__sflush_r+0x30>
 800a5d2:	2b1d      	cmp	r3, #29
 800a5d4:	d001      	beq.n	800a5da <__sflush_r+0xae>
 800a5d6:	2b16      	cmp	r3, #22
 800a5d8:	d101      	bne.n	800a5de <__sflush_r+0xb2>
 800a5da:	602f      	str	r7, [r5, #0]
 800a5dc:	e7b2      	b.n	800a544 <__sflush_r+0x18>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	e7ae      	b.n	800a546 <__sflush_r+0x1a>
 800a5e8:	690f      	ldr	r7, [r1, #16]
 800a5ea:	2f00      	cmp	r7, #0
 800a5ec:	d0aa      	beq.n	800a544 <__sflush_r+0x18>
 800a5ee:	0793      	lsls	r3, r2, #30
 800a5f0:	bf18      	it	ne
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	680e      	ldr	r6, [r1, #0]
 800a5f6:	bf08      	it	eq
 800a5f8:	694b      	ldreq	r3, [r1, #20]
 800a5fa:	1bf6      	subs	r6, r6, r7
 800a5fc:	600f      	str	r7, [r1, #0]
 800a5fe:	608b      	str	r3, [r1, #8]
 800a600:	2e00      	cmp	r6, #0
 800a602:	dd9f      	ble.n	800a544 <__sflush_r+0x18>
 800a604:	4633      	mov	r3, r6
 800a606:	463a      	mov	r2, r7
 800a608:	4628      	mov	r0, r5
 800a60a:	6a21      	ldr	r1, [r4, #32]
 800a60c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a610:	47e0      	blx	ip
 800a612:	2800      	cmp	r0, #0
 800a614:	dc06      	bgt.n	800a624 <__sflush_r+0xf8>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f04f 30ff 	mov.w	r0, #4294967295
 800a61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	e790      	b.n	800a546 <__sflush_r+0x1a>
 800a624:	4407      	add	r7, r0
 800a626:	1a36      	subs	r6, r6, r0
 800a628:	e7ea      	b.n	800a600 <__sflush_r+0xd4>
 800a62a:	bf00      	nop
 800a62c:	20400001 	.word	0x20400001

0800a630 <_fflush_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	690b      	ldr	r3, [r1, #16]
 800a634:	4605      	mov	r5, r0
 800a636:	460c      	mov	r4, r1
 800a638:	b913      	cbnz	r3, 800a640 <_fflush_r+0x10>
 800a63a:	2500      	movs	r5, #0
 800a63c:	4628      	mov	r0, r5
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	b118      	cbz	r0, 800a64a <_fflush_r+0x1a>
 800a642:	6983      	ldr	r3, [r0, #24]
 800a644:	b90b      	cbnz	r3, 800a64a <_fflush_r+0x1a>
 800a646:	f000 f887 	bl	800a758 <__sinit>
 800a64a:	4b14      	ldr	r3, [pc, #80]	; (800a69c <_fflush_r+0x6c>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d11b      	bne.n	800a688 <_fflush_r+0x58>
 800a650:	686c      	ldr	r4, [r5, #4]
 800a652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0ef      	beq.n	800a63a <_fflush_r+0xa>
 800a65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a65c:	07d0      	lsls	r0, r2, #31
 800a65e:	d404      	bmi.n	800a66a <_fflush_r+0x3a>
 800a660:	0599      	lsls	r1, r3, #22
 800a662:	d402      	bmi.n	800a66a <_fflush_r+0x3a>
 800a664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a666:	f000 f915 	bl	800a894 <__retarget_lock_acquire_recursive>
 800a66a:	4628      	mov	r0, r5
 800a66c:	4621      	mov	r1, r4
 800a66e:	f7ff ff5d 	bl	800a52c <__sflush_r>
 800a672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a674:	4605      	mov	r5, r0
 800a676:	07da      	lsls	r2, r3, #31
 800a678:	d4e0      	bmi.n	800a63c <_fflush_r+0xc>
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	059b      	lsls	r3, r3, #22
 800a67e:	d4dd      	bmi.n	800a63c <_fflush_r+0xc>
 800a680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a682:	f000 f908 	bl	800a896 <__retarget_lock_release_recursive>
 800a686:	e7d9      	b.n	800a63c <_fflush_r+0xc>
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <_fflush_r+0x70>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d101      	bne.n	800a692 <_fflush_r+0x62>
 800a68e:	68ac      	ldr	r4, [r5, #8]
 800a690:	e7df      	b.n	800a652 <_fflush_r+0x22>
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <_fflush_r+0x74>)
 800a694:	429c      	cmp	r4, r3
 800a696:	bf08      	it	eq
 800a698:	68ec      	ldreq	r4, [r5, #12]
 800a69a:	e7da      	b.n	800a652 <_fflush_r+0x22>
 800a69c:	0800ba20 	.word	0x0800ba20
 800a6a0:	0800ba40 	.word	0x0800ba40
 800a6a4:	0800ba00 	.word	0x0800ba00

0800a6a8 <std>:
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6b6:	6083      	str	r3, [r0, #8]
 800a6b8:	8181      	strh	r1, [r0, #12]
 800a6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a6bc:	81c2      	strh	r2, [r0, #14]
 800a6be:	6183      	str	r3, [r0, #24]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	2208      	movs	r2, #8
 800a6c4:	305c      	adds	r0, #92	; 0x5c
 800a6c6:	f7ff fa11 	bl	8009aec <memset>
 800a6ca:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <std+0x38>)
 800a6cc:	6224      	str	r4, [r4, #32]
 800a6ce:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <std+0x3c>)
 800a6d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6d4:	4b04      	ldr	r3, [pc, #16]	; (800a6e8 <std+0x40>)
 800a6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <std+0x44>)
 800a6da:	6323      	str	r3, [r4, #48]	; 0x30
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800aa21 	.word	0x0800aa21
 800a6e4:	0800aa43 	.word	0x0800aa43
 800a6e8:	0800aa7b 	.word	0x0800aa7b
 800a6ec:	0800aa9f 	.word	0x0800aa9f

0800a6f0 <_cleanup_r>:
 800a6f0:	4901      	ldr	r1, [pc, #4]	; (800a6f8 <_cleanup_r+0x8>)
 800a6f2:	f000 b8af 	b.w	800a854 <_fwalk_reent>
 800a6f6:	bf00      	nop
 800a6f8:	0800a631 	.word	0x0800a631

0800a6fc <__sfmoreglue>:
 800a6fc:	2268      	movs	r2, #104	; 0x68
 800a6fe:	b570      	push	{r4, r5, r6, lr}
 800a700:	1e4d      	subs	r5, r1, #1
 800a702:	4355      	muls	r5, r2
 800a704:	460e      	mov	r6, r1
 800a706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a70a:	f7ff fad5 	bl	8009cb8 <_malloc_r>
 800a70e:	4604      	mov	r4, r0
 800a710:	b140      	cbz	r0, 800a724 <__sfmoreglue+0x28>
 800a712:	2100      	movs	r1, #0
 800a714:	e9c0 1600 	strd	r1, r6, [r0]
 800a718:	300c      	adds	r0, #12
 800a71a:	60a0      	str	r0, [r4, #8]
 800a71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a720:	f7ff f9e4 	bl	8009aec <memset>
 800a724:	4620      	mov	r0, r4
 800a726:	bd70      	pop	{r4, r5, r6, pc}

0800a728 <__sfp_lock_acquire>:
 800a728:	4801      	ldr	r0, [pc, #4]	; (800a730 <__sfp_lock_acquire+0x8>)
 800a72a:	f000 b8b3 	b.w	800a894 <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	20000311 	.word	0x20000311

0800a734 <__sfp_lock_release>:
 800a734:	4801      	ldr	r0, [pc, #4]	; (800a73c <__sfp_lock_release+0x8>)
 800a736:	f000 b8ae 	b.w	800a896 <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	20000311 	.word	0x20000311

0800a740 <__sinit_lock_acquire>:
 800a740:	4801      	ldr	r0, [pc, #4]	; (800a748 <__sinit_lock_acquire+0x8>)
 800a742:	f000 b8a7 	b.w	800a894 <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	20000312 	.word	0x20000312

0800a74c <__sinit_lock_release>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__sinit_lock_release+0x8>)
 800a74e:	f000 b8a2 	b.w	800a896 <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	20000312 	.word	0x20000312

0800a758 <__sinit>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4604      	mov	r4, r0
 800a75c:	f7ff fff0 	bl	800a740 <__sinit_lock_acquire>
 800a760:	69a3      	ldr	r3, [r4, #24]
 800a762:	b11b      	cbz	r3, 800a76c <__sinit+0x14>
 800a764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a768:	f7ff bff0 	b.w	800a74c <__sinit_lock_release>
 800a76c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a770:	6523      	str	r3, [r4, #80]	; 0x50
 800a772:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <__sinit+0x68>)
 800a774:	4a13      	ldr	r2, [pc, #76]	; (800a7c4 <__sinit+0x6c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	62a2      	str	r2, [r4, #40]	; 0x28
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	bf08      	it	eq
 800a77e:	2301      	moveq	r3, #1
 800a780:	4620      	mov	r0, r4
 800a782:	bf08      	it	eq
 800a784:	61a3      	streq	r3, [r4, #24]
 800a786:	f000 f81f 	bl	800a7c8 <__sfp>
 800a78a:	6060      	str	r0, [r4, #4]
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 f81b 	bl	800a7c8 <__sfp>
 800a792:	60a0      	str	r0, [r4, #8]
 800a794:	4620      	mov	r0, r4
 800a796:	f000 f817 	bl	800a7c8 <__sfp>
 800a79a:	2200      	movs	r2, #0
 800a79c:	2104      	movs	r1, #4
 800a79e:	60e0      	str	r0, [r4, #12]
 800a7a0:	6860      	ldr	r0, [r4, #4]
 800a7a2:	f7ff ff81 	bl	800a6a8 <std>
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	2109      	movs	r1, #9
 800a7aa:	68a0      	ldr	r0, [r4, #8]
 800a7ac:	f7ff ff7c 	bl	800a6a8 <std>
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	2112      	movs	r1, #18
 800a7b4:	68e0      	ldr	r0, [r4, #12]
 800a7b6:	f7ff ff77 	bl	800a6a8 <std>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	61a3      	str	r3, [r4, #24]
 800a7be:	e7d1      	b.n	800a764 <__sinit+0xc>
 800a7c0:	0800b918 	.word	0x0800b918
 800a7c4:	0800a6f1 	.word	0x0800a6f1

0800a7c8 <__sfp>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	f7ff ffac 	bl	800a728 <__sfp_lock_acquire>
 800a7d0:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <__sfp+0x84>)
 800a7d2:	681e      	ldr	r6, [r3, #0]
 800a7d4:	69b3      	ldr	r3, [r6, #24]
 800a7d6:	b913      	cbnz	r3, 800a7de <__sfp+0x16>
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff ffbd 	bl	800a758 <__sinit>
 800a7de:	3648      	adds	r6, #72	; 0x48
 800a7e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	d503      	bpl.n	800a7f0 <__sfp+0x28>
 800a7e8:	6833      	ldr	r3, [r6, #0]
 800a7ea:	b30b      	cbz	r3, 800a830 <__sfp+0x68>
 800a7ec:	6836      	ldr	r6, [r6, #0]
 800a7ee:	e7f7      	b.n	800a7e0 <__sfp+0x18>
 800a7f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7f4:	b9d5      	cbnz	r5, 800a82c <__sfp+0x64>
 800a7f6:	4b16      	ldr	r3, [pc, #88]	; (800a850 <__sfp+0x88>)
 800a7f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7fc:	60e3      	str	r3, [r4, #12]
 800a7fe:	6665      	str	r5, [r4, #100]	; 0x64
 800a800:	f000 f847 	bl	800a892 <__retarget_lock_init_recursive>
 800a804:	f7ff ff96 	bl	800a734 <__sfp_lock_release>
 800a808:	2208      	movs	r2, #8
 800a80a:	4629      	mov	r1, r5
 800a80c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a810:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a814:	6025      	str	r5, [r4, #0]
 800a816:	61a5      	str	r5, [r4, #24]
 800a818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a81c:	f7ff f966 	bl	8009aec <memset>
 800a820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a828:	4620      	mov	r0, r4
 800a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a82c:	3468      	adds	r4, #104	; 0x68
 800a82e:	e7d9      	b.n	800a7e4 <__sfp+0x1c>
 800a830:	2104      	movs	r1, #4
 800a832:	4638      	mov	r0, r7
 800a834:	f7ff ff62 	bl	800a6fc <__sfmoreglue>
 800a838:	4604      	mov	r4, r0
 800a83a:	6030      	str	r0, [r6, #0]
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d1d5      	bne.n	800a7ec <__sfp+0x24>
 800a840:	f7ff ff78 	bl	800a734 <__sfp_lock_release>
 800a844:	230c      	movs	r3, #12
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	e7ee      	b.n	800a828 <__sfp+0x60>
 800a84a:	bf00      	nop
 800a84c:	0800b918 	.word	0x0800b918
 800a850:	ffff0001 	.word	0xffff0001

0800a854 <_fwalk_reent>:
 800a854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a858:	4606      	mov	r6, r0
 800a85a:	4688      	mov	r8, r1
 800a85c:	2700      	movs	r7, #0
 800a85e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a866:	f1b9 0901 	subs.w	r9, r9, #1
 800a86a:	d505      	bpl.n	800a878 <_fwalk_reent+0x24>
 800a86c:	6824      	ldr	r4, [r4, #0]
 800a86e:	2c00      	cmp	r4, #0
 800a870:	d1f7      	bne.n	800a862 <_fwalk_reent+0xe>
 800a872:	4638      	mov	r0, r7
 800a874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a878:	89ab      	ldrh	r3, [r5, #12]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d907      	bls.n	800a88e <_fwalk_reent+0x3a>
 800a87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a882:	3301      	adds	r3, #1
 800a884:	d003      	beq.n	800a88e <_fwalk_reent+0x3a>
 800a886:	4629      	mov	r1, r5
 800a888:	4630      	mov	r0, r6
 800a88a:	47c0      	blx	r8
 800a88c:	4307      	orrs	r7, r0
 800a88e:	3568      	adds	r5, #104	; 0x68
 800a890:	e7e9      	b.n	800a866 <_fwalk_reent+0x12>

0800a892 <__retarget_lock_init_recursive>:
 800a892:	4770      	bx	lr

0800a894 <__retarget_lock_acquire_recursive>:
 800a894:	4770      	bx	lr

0800a896 <__retarget_lock_release_recursive>:
 800a896:	4770      	bx	lr

0800a898 <__swhatbuf_r>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	460e      	mov	r6, r1
 800a89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	461d      	mov	r5, r3
 800a8a6:	b096      	sub	sp, #88	; 0x58
 800a8a8:	da08      	bge.n	800a8bc <__swhatbuf_r+0x24>
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8b0:	602a      	str	r2, [r5, #0]
 800a8b2:	061a      	lsls	r2, r3, #24
 800a8b4:	d410      	bmi.n	800a8d8 <__swhatbuf_r+0x40>
 800a8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ba:	e00e      	b.n	800a8da <__swhatbuf_r+0x42>
 800a8bc:	466a      	mov	r2, sp
 800a8be:	f000 f915 	bl	800aaec <_fstat_r>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	dbf1      	blt.n	800a8aa <__swhatbuf_r+0x12>
 800a8c6:	9a01      	ldr	r2, [sp, #4]
 800a8c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8d0:	425a      	negs	r2, r3
 800a8d2:	415a      	adcs	r2, r3
 800a8d4:	602a      	str	r2, [r5, #0]
 800a8d6:	e7ee      	b.n	800a8b6 <__swhatbuf_r+0x1e>
 800a8d8:	2340      	movs	r3, #64	; 0x40
 800a8da:	2000      	movs	r0, #0
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	b016      	add	sp, #88	; 0x58
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8e4 <__smakebuf_r>:
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8e8:	079d      	lsls	r5, r3, #30
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	d507      	bpl.n	800a900 <__smakebuf_r+0x1c>
 800a8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	6163      	str	r3, [r4, #20]
 800a8fc:	b002      	add	sp, #8
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	466a      	mov	r2, sp
 800a902:	ab01      	add	r3, sp, #4
 800a904:	f7ff ffc8 	bl	800a898 <__swhatbuf_r>
 800a908:	9900      	ldr	r1, [sp, #0]
 800a90a:	4605      	mov	r5, r0
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff f9d3 	bl	8009cb8 <_malloc_r>
 800a912:	b948      	cbnz	r0, 800a928 <__smakebuf_r+0x44>
 800a914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a918:	059a      	lsls	r2, r3, #22
 800a91a:	d4ef      	bmi.n	800a8fc <__smakebuf_r+0x18>
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	f043 0302 	orr.w	r3, r3, #2
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	e7e3      	b.n	800a8f0 <__smakebuf_r+0xc>
 800a928:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <__smakebuf_r+0x7c>)
 800a92a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	6020      	str	r0, [r4, #0]
 800a930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a934:	81a3      	strh	r3, [r4, #12]
 800a936:	9b00      	ldr	r3, [sp, #0]
 800a938:	6120      	str	r0, [r4, #16]
 800a93a:	6163      	str	r3, [r4, #20]
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	b15b      	cbz	r3, 800a958 <__smakebuf_r+0x74>
 800a940:	4630      	mov	r0, r6
 800a942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a946:	f000 f8e3 	bl	800ab10 <_isatty_r>
 800a94a:	b128      	cbz	r0, 800a958 <__smakebuf_r+0x74>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	f043 0301 	orr.w	r3, r3, #1
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	89a0      	ldrh	r0, [r4, #12]
 800a95a:	4305      	orrs	r5, r0
 800a95c:	81a5      	strh	r5, [r4, #12]
 800a95e:	e7cd      	b.n	800a8fc <__smakebuf_r+0x18>
 800a960:	0800a6f1 	.word	0x0800a6f1

0800a964 <memchr>:
 800a964:	4603      	mov	r3, r0
 800a966:	b510      	push	{r4, lr}
 800a968:	b2c9      	uxtb	r1, r1
 800a96a:	4402      	add	r2, r0
 800a96c:	4293      	cmp	r3, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	d101      	bne.n	800a976 <memchr+0x12>
 800a972:	2000      	movs	r0, #0
 800a974:	e003      	b.n	800a97e <memchr+0x1a>
 800a976:	7804      	ldrb	r4, [r0, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	428c      	cmp	r4, r1
 800a97c:	d1f6      	bne.n	800a96c <memchr+0x8>
 800a97e:	bd10      	pop	{r4, pc}

0800a980 <__malloc_lock>:
 800a980:	4801      	ldr	r0, [pc, #4]	; (800a988 <__malloc_lock+0x8>)
 800a982:	f7ff bf87 	b.w	800a894 <__retarget_lock_acquire_recursive>
 800a986:	bf00      	nop
 800a988:	20000310 	.word	0x20000310

0800a98c <__malloc_unlock>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__malloc_unlock+0x8>)
 800a98e:	f7ff bf82 	b.w	800a896 <__retarget_lock_release_recursive>
 800a992:	bf00      	nop
 800a994:	20000310 	.word	0x20000310

0800a998 <_raise_r>:
 800a998:	291f      	cmp	r1, #31
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	d904      	bls.n	800a9ac <_raise_r+0x14>
 800a9a2:	2316      	movs	r3, #22
 800a9a4:	6003      	str	r3, [r0, #0]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ae:	b112      	cbz	r2, 800a9b6 <_raise_r+0x1e>
 800a9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <_raise_r+0x32>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 f830 	bl	800aa1c <_getpid_r>
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4601      	mov	r1, r0
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_kill_r>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d00a      	beq.n	800a9e4 <_raise_r+0x4c>
 800a9ce:	1c59      	adds	r1, r3, #1
 800a9d0:	d103      	bne.n	800a9da <_raise_r+0x42>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7e7      	b.n	800a9aa <_raise_r+0x12>
 800a9da:	2400      	movs	r4, #0
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9e2:	4798      	blx	r3
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e7e0      	b.n	800a9aa <_raise_r+0x12>

0800a9e8 <raise>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	; (800a9f4 <raise+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f7ff bfd3 	b.w	800a998 <_raise_r>
 800a9f2:	bf00      	nop
 800a9f4:	20000044 	.word	0x20000044

0800a9f8 <_kill_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4d06      	ldr	r5, [pc, #24]	; (800aa18 <_kill_r+0x20>)
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	f7fa f84e 	bl	8004aa6 <_kill>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d102      	bne.n	800aa14 <_kill_r+0x1c>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	b103      	cbz	r3, 800aa14 <_kill_r+0x1c>
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20000314 	.word	0x20000314

0800aa1c <_getpid_r>:
 800aa1c:	f7fa b83c 	b.w	8004a98 <_getpid>

0800aa20 <__sread>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f000 f894 	bl	800ab54 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bfab      	itete	ge
 800aa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa32:	89a3      	ldrhlt	r3, [r4, #12]
 800aa34:	181b      	addge	r3, r3, r0
 800aa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa3a:	bfac      	ite	ge
 800aa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3e:	81a3      	strhlt	r3, [r4, #12]
 800aa40:	bd10      	pop	{r4, pc}

0800aa42 <__swrite>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	461f      	mov	r7, r3
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	05db      	lsls	r3, r3, #23
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	d505      	bpl.n	800aa60 <__swrite+0x1e>
 800aa54:	2302      	movs	r3, #2
 800aa56:	2200      	movs	r2, #0
 800aa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5c:	f000 f868 	bl	800ab30 <_lseek_r>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	4632      	mov	r2, r6
 800aa64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	463b      	mov	r3, r7
 800aa6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	f000 b817 	b.w	800aaa8 <_write_r>

0800aa7a <__sseek>:
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa82:	f000 f855 	bl	800ab30 <_lseek_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	bf15      	itete	ne
 800aa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa96:	81a3      	strheq	r3, [r4, #12]
 800aa98:	bf18      	it	ne
 800aa9a:	81a3      	strhne	r3, [r4, #12]
 800aa9c:	bd10      	pop	{r4, pc}

0800aa9e <__sclose>:
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 b813 	b.w	800aacc <_close_r>
	...

0800aaa8 <_write_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	2200      	movs	r2, #0
 800aab2:	4d05      	ldr	r5, [pc, #20]	; (800aac8 <_write_r+0x20>)
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7fa f82c 	bl	8004b14 <_write>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_write_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_write_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000314 	.word	0x20000314

0800aacc <_close_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	2300      	movs	r3, #0
 800aad0:	4d05      	ldr	r5, [pc, #20]	; (800aae8 <_close_r+0x1c>)
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f7fa f838 	bl	8004b4c <_close>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_close_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_close_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	20000314 	.word	0x20000314

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4d06      	ldr	r5, [pc, #24]	; (800ab0c <_fstat_r+0x20>)
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f7fa f832 	bl	8004b62 <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000314 	.word	0x20000314

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	2300      	movs	r3, #0
 800ab14:	4d05      	ldr	r5, [pc, #20]	; (800ab2c <_isatty_r+0x1c>)
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7fa f830 	bl	8004b80 <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20000314 	.word	0x20000314

0800ab30 <_lseek_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4d05      	ldr	r5, [pc, #20]	; (800ab50 <_lseek_r+0x20>)
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7fa f828 	bl	8004b94 <_lseek>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_lseek_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_lseek_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20000314 	.word	0x20000314

0800ab54 <_read_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4d05      	ldr	r5, [pc, #20]	; (800ab74 <_read_r+0x20>)
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f9 ffb9 	bl	8004ada <_read>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_read_r+0x1e>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_read_r+0x1e>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20000314 	.word	0x20000314

0800ab78 <_init>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr

0800ab84 <_fini>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr
